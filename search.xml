<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>软件工程——基于华为云平台的凤凰商城项目实习报告</title>
      <link href="/2022/10/03/ruan-jian-gong-cheng-ji-yu-hua-wei-yun-ping-tai-de-feng-huang-shang-cheng-xiang-mu-shi-xi-bao-gao/"/>
      <url>/2022/10/03/ruan-jian-gong-cheng-ji-yu-hua-wei-yun-ping-tai-de-feng-huang-shang-cheng-xiang-mu-shi-xi-bao-gao/</url>
      
        <content type="html"><![CDATA[<p>注意：这里没有提供截图，在学期末会在文中上传pdf版本报告。</p><h2 id="持续规划与设计"><a href="#持续规划与设计" class="headerlink" title="持续规划与设计"></a><strong>持续规划与设计</strong></h2><h3 id="敏捷项目规划"><a href="#敏捷项目规划" class="headerlink" title="敏捷项目规划"></a><strong>敏捷项目规划</strong></h3><p>首先登录华为云官网，进入控制台内的规定区域，搜索DevCloud并登陆，单击页面上方右侧＂新建项目＂。在弹窗中选择＂DevOps全流程样例项目＂，输入项目名称＂凤凰商城＂（可自定义），单击＂确定＂，完成项目创建。</p><h3 id="项目规划"><a href="#项目规划" class="headerlink" title="项目规划"></a><em>项目规划</em></h3><h3 id="相关知识"><a href="#相关知识" class="headerlink" title="相关知识"></a>相关知识</h3><ul><li><strong>Epic</strong>：史诗，是项目的愿景目标。通过Epic的落地达成，使公司可以获得相应的市场地位和回报，具有战略价值。通常需要数月完成。</li><li><strong>Feature</strong>：可以带来价值的产品功能和特性。相比Epic，Feature更具体，更形象，客户可以感知，具有业务价值。通常需要数周，多个Sprint才能够完成。</li><li><strong>Story</strong>：通常所说的用户故事，是User Story的简称。Story是从用户角度对产品功能的详细描述，承接Feature，并放入产品Backlog中，持续规划，滚动调整，始终让高优先级Story交付给客户，具有用户价值。Story要符合INVEST原则（<strong>I</strong>dependent、<strong>N</strong>egotiable、<strong>V</strong>aluable、<strong>E</strong>stimable、<strong>S</strong>mall、<strong>T</strong>estable），通常需要数天，并在一个Sprint中完成。</li><li><strong>Task</strong>：是团队成员要完成的具体任务。在Sprint计划会议上，将Story分配给成员，然后由成员分解为Task，并预估工时，通常在一天内完成。</li></ul><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><p>这一部分需要构建由epic、feature、story以及task构成的思维导图，这里除了手册中规定的两个stories，我在初始状态设置了会员管理、门店网络查询功能、账号系统三个特征。</p><p>在后续的操作中，我发现之前的迭代已经完成了会员系统的相关功能实现，结果如下图所示。同时在账号系统的story部分中，除了手册中要求的作为用户可以登录和注册账号，我认为还需要有作为管理员可以注销账号的功能。</p><h3 id="迭代开发"><a href="#迭代开发" class="headerlink" title="迭代开发"></a><em>迭代开发</em></h3><h3 id="相关知识-1"><a href="#相关知识-1" class="headerlink" title="相关知识"></a>相关知识</h3><p><strong>Backlog</strong>&nbsp;英文意思为“积压的工作“，Product Backlog 其实就是一个具有优先级的需求列表， 并对每个需求进行了粗略的估算。</p><p><strong>迭代</strong>定义为：如果算法的定义没有包含算法本身，则叫做迭代法。 迭代式开发 也被称作 迭代增量式开发 或 迭代进化式开发 ，是一种与传统的 瀑布式开发 相反的 软件开发过程 ，它弥补了传统开发方式中的一些弱点，具有更高的成功率和生产率。</p><p><strong>每日站立会议</strong>(晨会) 这是在每个工作日特定的时间举行的短小（15分钟）的会议，开发团队的每一成员都将参与，通常可以选择在早上或者下午下班前进行。为了保证其短小精悍，与会成员都保持站立（所以叫“站立会议”）。以此提供给开发团队机会来汇报交流成果和阐述任何存在的障碍。</p><h3 id="具体操作-1"><a href="#具体操作-1" class="headerlink" title="具体操作"></a>具体操作</h3><p>这一部分需要对backlog进行编辑。在市场部门的施压下，Story＂作为用户应该可以查看、查询所有门店网络＂被指定为最高优先级处理，因为许多客户需要通过它来查询最近的门店网络地址，从而获取服务。这里选择story＂作为用户应该可以查看、查询所有门店网络＂，编辑得到如下结果：</p><p>此外还实现了设置业务优先级、业务选择过滤、自定义业务过滤器等等，具体操作结果如下：</p><p>然后创建迭代4，这里需要注意观察之前的迭代实现了哪些功能，避免和新的迭代产生冲突。</p><p>迭代的具体要求：步骤1 迭代名称＂迭代4＂、设置迭代计划时间，单击＂新建＂。本练习中，设置迭代设置迭代的开始日期为本周一，结束日期为下周五。按照同样方式创建迭代5，并设置迭代周期为下一个周期。然后进行迭代规划：步骤1 接下来我们需要对当前迭代（近两周）的工作进行规划，其中最重要的工作＂作为用户应该可以查看、查询所有门店网络＂需要在本迭代完成并上线。在迭代页面，单击＂未规划工作项＂，找到Story＂作为用户应该可以查看、查询所有门店网络＂，鼠标拖拽工作项至＂迭代4＂。单击＂迭代4＂的＂作为用户应该可以查看、查询所有门店网络＂，可以设置Story的预计开始日期与预计结束日期。 按照同样的方式，添加以下两个Story添加至迭代4：作为用户可以登录账号；作为用户可以注册账号。</p><p>得到的结果如下：</p><p>Story分解。接下来我们需要将Story＂作为用户应该可以查看、查询所有门店网络＂拆分到开发任务级别，并指派给对应的负责人。单击工作项列表最右侧＂操作＂列中的图标 ，添加子工作项。输入Task标题＂前端展示-添加门店网络菜单＂，并选择处理人，单击＂确定＂完成。按照同样的方式，添加Task＂后台管理-添加门店网络管理维护模块＂。</p><p>更换视图对各工程项进行观察：</p><p>每日站立会议的事务项记录：</p><h3 id="跟踪项目状态"><a href="#跟踪项目状态" class="headerlink" title="跟踪项目状态"></a><em>跟踪项目状态</em></h3><h3 id="相关知识-2"><a href="#相关知识-2" class="headerlink" title="相关知识"></a>相关知识</h3><p><strong>燃尽图</strong>（英语：<strong>burn down chart</strong>）是用于表示剩余工作量的工作图表，由横轴（X）和纵轴（Y）组成，横轴表示时间，纵轴表示工作量。这种图表可以直观的预测何时工作将全部完成，常用于软件开发中的敏捷软件开发方式，也可以用于其他类型的工作流程监控。</p><h3 id="具体操作-2"><a href="#具体操作-2" class="headerlink" title="具体操作"></a>具体操作</h3><p>通过迭代图表，团队可以方便的统计当前迭代的进度情况，包括需求完成情况、迭代燃尽图、工作量等。本次实验的迭代图表如下：</p><p>项目仪表盘提供了强大的项目进度跟进能力、包括需求进度统计、燃尽图、工作完成度、工时统计等等。下图给出了本次实验的报表列表以及新版仪表盘：</p><h3 id="项目管理配置"><a href="#项目管理配置" class="headerlink" title="项目管理配置"></a><strong>项目管理配置</strong></h3><h3 id="维护项目基本信息"><a href="#维护项目基本信息" class="headerlink" title="维护项目基本信息"></a><em>维护项目基本信息</em></h3><p>通过本章节我学会了如何对 ＂凤凰商城＂ 进行基本信息等维护，以及团队成员管理，并学习如何通过定制站内消息通知以及邮件通知来跟进项目进度。</p><p>首先是项目成员管理。单击页面左侧菜单“成员管理”，进入“成员管理”页面。点击添加成员，在下拉菜单中选择“邀请其他企业用户”，在弹出窗口的“企业用户”文本框输入小组成员账号进行添加。重复该步骤直到小组全部成员添加完毕。</p><p>然后根据需要选择栈内通知以及邮件通知设置：</p><p>最后添加模块和管理模块，具体操作如添加负责人、输入描述以及名称。</p><h3 id="定制项目工程流程"><a href="#定制项目工程流程" class="headerlink" title="定制项目工程流程"></a><em>定制项目工程流程</em></h3><p>通过本节，我学会了如何使用＂自定义工作项模版＂功能来定制个性化的工作项表单，以及工作流程定制。</p><p>首先将验收标准作为必填项：</p><p>然后增加工作项，改变当前项目的属性为进行中：</p><p>添加并勾选验收中的选项，保存设置后调整各个状态的顺序，即将验收中的状态放置在测试中这一状态之后：</p><h2 id="持续开发和集成"><a href="#持续开发和集成" class="headerlink" title="持续开发和集成"></a><strong>持续开发和集成</strong></h2><h3 id="代码托管"><a href="#代码托管" class="headerlink" title="代码托管"></a><strong>代码托管</strong></h3><h3 id="使用CloudIDE修改和提交代码"><a href="#使用CloudIDE修改和提交代码" class="headerlink" title="使用CloudIDE修改和提交代码"></a><em>使用CloudIDE修改和提交代码</em></h3><h3 id="相关知识-3"><a href="#相关知识-3" class="headerlink" title="相关知识"></a>相关知识</h3><p><strong>CloudIDE：</strong>面向云原生的轻量级WebIDE，通过浏览器访问即可实现云端开发环境获取、代码编写、编译调试、运行预览、访问代码仓库、命令行执行等能力，同时支持丰富的插件扩展。</p><h3 id="具体操作-3"><a href="#具体操作-3" class="headerlink" title="具体操作"></a>具体操作</h3><p>登录DevCloud，记录story＂作为用户应该可以查看、查询所有门店网络＂的编号。</p><p>进入cloudide服务，新建实例。自定义IDE实例名称，其他项可保持默认设置，项目名称选择您在DevCloud创建的样例项目名称，仓库地址选择“phoenix-sample.git”。</p><p>等待CloudIDE加载完毕后，打开＂/vote/templates/index.html＂，进行以下编辑，即在179行添加菜单＂门店网络＂：</p><p>然后使用Git命令将修改的代码提交到代码仓库中。在新版本的cloudide中，只需要选择对应文件后选择对钩图表以及push选项即可，对于提交信息，注意工作项编码为上述记录的编码。</p><p>然后查询代码是否更改成功，查询代码托管的历史记录即可：</p><p>同时，可以在story页签中的代码提交记录中观察到提交结果：</p><h3 id="使用CloudIDE运行代码"><a href="#使用CloudIDE运行代码" class="headerlink" title="使用CloudIDE运行代码"></a><em>使用CloudIDE运行代码</em></h3><h3 id="相关知识-4"><a href="#相关知识-4" class="headerlink" title="相关知识"></a>相关知识</h3><p><strong>Pylint</strong>&nbsp;是一个 Python 代码分析工具，它分析 Python 代码中的错误，查找不符合代码风格标准（Pylint 默认使用的代码风格是 PEP 8，具体信息，请参阅参考资料）和有潜在问题的代码。</p><h3 id="具体操作-4"><a href="#具体操作-4" class="headerlink" title="具体操作"></a>具体操作</h3><p>回到CloudIDE页面，打开index.html，预览前端页面：</p><p>安装依赖项：Linter pylint和python 3.7.x。这里本机已经安装了python3.9，因此没有安装python 3.7.x的解释器，这里就不再进行赘述。运行所需模块的安装过程如下：</p><p>然后替换部分代码，使之符合Python2.7.x的特性，最后在app.py程序中运行</p><p>由于对应网站的安全证书存在问题，很多浏览器为保证用户隐私而拒绝不安全连接，因此这里使用扫描url的方法使用安卓手机验证，得到如下结果：</p><p>后续发现对不安全网站输入“thisisunsafe”命令然后回车即可。</p><h3 id="添加登录系统"><a href="#添加登录系统" class="headerlink" title="添加登录系统"></a><em>添加登录系统</em></h3><h3 id="相关知识-5"><a href="#相关知识-5" class="headerlink" title="相关知识"></a>相关知识</h3><p>Flask中的jsonify被定义为Python能力中的一种功能，通过包装用于添加增强功能的转储函数。</p><h3 id="具体操作-5"><a href="#具体操作-5" class="headerlink" title="具体操作"></a>具体操作</h3><p>这里首先在cloudide中填补缺失代码，在/vote/template目录下新建登录界面模板login.html</p><p>导入需要的函数库，即jsonify、redirect、url_for：</p><p>在/vote/app.py文件的47行和/vote/app.py文件的 main入口前添加必需的程序块。最后将修改后的代码传输到代码仓库，调试新生成的代码，登录凤凰商城，得到如下的登录状态：</p><h3 id="使用Git分支-合并请求方式提交代码并进行代码检视"><a href="#使用Git分支-合并请求方式提交代码并进行代码检视" class="headerlink" title="使用Git分支+合并请求方式提交代码并进行代码检视"></a><em>使用Git分支+合并请求方式提交代码并进行代码检视</em></h3><h3 id="相关知识-6"><a href="#相关知识-6" class="headerlink" title="相关知识"></a>相关知识</h3><p><strong>Git</strong>&nbsp;是基于Linux内核开发的版本控制工具。与常用的版本控制工具 CVS, Subversion 等不同，它采用了分布式版本库的方式，不必服务器端软件支持（wingeddevil注：这得分是用什么样的服务端，使用http协议或者git协议等不太一样。并且在push和pull的时候和服务器端还是有交互的。），使源代码的发布和交流极其方便。 Git 的速度很快，这对于诸如 Linux kernel 这样的大项目来说自然很重要。 Git 最为出色的是它的合并跟踪（merge tracing）能力。</p><h3 id="具体操作-6"><a href="#具体操作-6" class="headerlink" title="具体操作"></a>具体操作</h3><p>这里需要提升分支的稳定性以及使用拉取请求的方式完成用户故事的开发。</p><p>首先将master分支设置为受保护分支。进入代码托管服务。单击仓库名称，进入代码仓库，选择相关页签，进入保护分支管理，进行相关参数的配置，得到如下的结果：</p><p>然后对分支进行管理合并策略，这里需要选择允许分支合并的最低评分：</p><p>然后创建分支进行新功能开发，在代码仓库中新建分支（分支名称＂feature工作项编号＂）</p><p>用cloudide打开代码仓库，选择新创建的分支进入</p><h3 id="合并请求（登录模块）"><a href="#合并请求（登录模块）" class="headerlink" title="合并请求（登录模块）"></a><em>合并请求（登录模块）</em></h3><ul><li>创建合并请求，在代码托管中新建合并请求，选择新建的分支，入标题、描述（选填），选择合并人、评审人，提出请求。</li><li>评审人进入代码仓库找到需要评审的合并请求，查看合并请求详情，对合并请求进行评分。（PS：这里拒绝合并，防止后续产生冲突。当然这里也可以在文件变更页签，针对某一行代码发表讨论。评论与讨论的区别在于：评论无需回复并解决。而讨论是一个需要解决的问题。在评论记录里，可以看到差别。）</li><li>评审成员提交评分，合并人进入代码仓库后，在＂合并请求＂页签中找到需要评审的合并请求，单击该请求即可完成合并。对于被拒绝的请求，合并人需要分析审理人提出的问题以及评价，给出更好的合并方案。</li></ul><h3 id="代码检查确保编码规范"><a href="#代码检查确保编码规范" class="headerlink" title="代码检查确保编码规范"></a><strong>代码检查确保编码规范</strong></h3><h3 id="为示例项目配置代码检查任务并执行"><a href="#为示例项目配置代码检查任务并执行" class="headerlink" title="为示例项目配置代码检查任务并执行"></a><em>为示例项目配置代码检查任务并执行</em></h3><p>在代码检查部分选择＂phoenix-codecheck-worker＂任务进行代码检查。</p><p>修改规则集。首先步骤1 重新获取代码仓库语言，在刷新的列表中将Python语言对应的开关打开。</p><p>然后启动代码检查任务，观察检查结果：</p><p>可以看到代码中存在着11个问题，代码的平均复杂度为17.7%，有效代码行数为324。</p><h3 id="分析代码检查结果并修复问题"><a href="#分析代码检查结果并修复问题" class="headerlink" title="分析代码检查结果并修复问题"></a><em>分析代码检查结果并修复问题</em></h3><p>分析代码检查报表，查看检查结果。这里需要设置质量门禁，观察不满足门禁的问题，＂代码问题＂页签中列出问题的严重级别、状态、所属文件等信息，可以根据需要对代码进行修改，及时解决代码存在的相关问题。对于不是很重要的问题，可以选择将其状态设置为“已解决”或者“已忽略”。</p><h3 id="配置和管理代码检查规则集"><a href="#配置和管理代码检查规则集" class="headerlink" title="配置和管理代码检查规则集"></a><em>配置和管理代码检查规则集</em></h3><p>这里我们需要学习自定义规则集的设置以及自定义代码检查的设置。</p><p>在代码检察服务中设置新的规则集＂phoenix-java-rule-set＂</p><p>系统自动进入新建规则集的＂规则集配置＂页面，此时需要取消＂Loops should not be infinite＂规则的选择。</p><p>然后启动自定义检查规范，进入代码检查任务＂phoenix-codecheck-worker＂的＂代码检查详情＂页面，勾选规则集＂phoenix-java-rule-set＂。</p><p>启动代码检查任务，任务成功执行后，再次查看检查结果。检查出来的问题是团队关心的问题，应该尽快修复掉。</p><h3 id="使用自动化编译提高代码质量验证速度"><a href="#使用自动化编译提高代码质量验证速度" class="headerlink" title="使用自动化编译提高代码质量验证速度"></a><strong>使用自动化编译提高代码质量验证速度</strong></h3><p>通过本节，我们需要学习如何通过＂编译构建＂服务完成应用的Docker镜像打包以及推送。</p><p>首先查看编译构建任务，单击＂phoenix-sample-ci＂进入＂编译构建编辑任务＂页面。在源码选择＂栏，＂仓库分支＂选择＂master＂。然后配置SWR服务，进入到＂容器镜像服务＂主页，在登录指令中找到对应指令。本次实验的指令如下：</p><p><strong>docker login -u cn-north-4@452RN6W0V1686CMHXZVO -p 3880b9568aa05a263f3c8d6a6b164f098fb7b91ab6cf818f5b2346b3bfe57823 swr.cn-north-4.myhuaweicloud.com</strong></p><p>返回DevCloud页面，选择＂参数设置＂页签，编辑dockerOrg和dockerServer：</p><p>然后修改镜像为swr容器上的镜像地址，启动编译构建任务。编译构建完成后，进入发布服务。列表中找到相关文件夹。然后进入SWR控制台，选择＂我的镜像＂</p><p>在列表中单击＂worker＂查看镜像详情。</p><h3 id="配置持续集成并通过提交代码触发自动化编译"><a href="#配置持续集成并通过提交代码触发自动化编译" class="headerlink" title="配置持续集成并通过提交代码触发自动化编译"></a><em>配置持续集成并通过提交代码触发自动化编译</em></h3><p>持续集成配置。进入编译构建任务＂phoenix-sample-ci＂的＂编译构建编辑任务＂页面，选择＂执行计划＂页签，打开＂提交代码触发执行＂开关，持续集成执行计划配置。</p><h3 id="使用开源镜像站服务改进自动化编译"><a href="#使用开源镜像站服务改进自动化编译" class="headerlink" title="使用开源镜像站服务改进自动化编译"></a><em>使用开源镜像站服务改进自动化编译</em></h3><p>如何使用开源镜像站服务提高依赖包获取速度，提高自动化编译效率呢？这里使用了手册中的方法二，即分别配置python、npm、nuget：</p><h2 id="持续测试与反馈"><a href="#持续测试与反馈" class="headerlink" title="持续测试与反馈"></a><strong>持续测试与反馈</strong></h2><h3 id="使用追溯视图进行驱动的测试"><a href="#使用追溯视图进行驱动的测试" class="headerlink" title="使用追溯视图进行驱动的测试"></a><strong>使用追溯视图进行驱动的测试</strong></h3><p>进入项目选择测试计划，新建测试计划，填写测试计划名称、处理者、计划周期，选择手工测试、接口自动化、性能自动化测试，在添加需求页面勾选“作为用户应该可以查看、查询门店网络信息”工作项。</p><p>新版本的测试计划高级配置和旧版本存在差异，不需要选择测试类型，分为手工测试、接口自动化以及性能自动化，同时初始设置为最初思维导图中设置的工作项和子工作项。具体参数设置如下：</p><p>然后设计功能测试用例：</p><p>接着，设计接口测试用例并执行。新建迭代4接口测试计划，添加需求“作为用户可以登录账号”Story，并为该需求设计测试用例。l 编写测试脚本，在新建步骤中选择“URL请求”。请求选择“POST”，URL地址使用部署服务器的ip地址/api/login。这里作为测试，我们可以选择CloudIDE调试运行时访问的URL\api\login。填写好请求信息后，添加“表单参数”。在请求体中填写username和password。</p><p>点击右上角“保存”，进行调试，查看结果：</p><h3 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a><strong>性能测试</strong></h3><h3 id="编写性能测试计划"><a href="#编写性能测试计划" class="headerlink" title="编写性能测试计划"></a><em>编写性能测试计划</em></h3><h3 id="部署测试环境应用"><a href="#部署测试环境应用" class="headerlink" title="部署测试环境应用"></a><em>部署测试环境应用</em></h3><h3 id="测试工具搭建"><a href="#测试工具搭建" class="headerlink" title="测试工具搭建"></a><em>测试工具搭建</em></h3><p>获取AOM服务，安装ICAgent。在安装过程中，需要获取AK/SK密匙，然后复制ICAgent安装命令，使用PuTTY等远程登录工具，以root用户登录待安装主机（主机为刚所购买的云主机），执行复制到的命令</p><p>当显示“ICAgent install success”时，表示安装成功。安装成功后，在左侧导航栏中选择“Agent管理”，查看ICAgent状态。</p><p>然后通过AOM查看当前主机的状态</p><p>接着获取云性能测试CPTS，安装CPTS录制插件</p><p>这里出现了程序包无效的问题，此时需要右击下载链接，将插件安装包另存为桌面。下载成功后，将后缀更改为rar后解压在某一个文件夹中，然后再谷歌浏览器中的插件开发者模式中选择加载录制插件，最终安装成功，安装结果如上图所示。</p><p>最后购买CCE资源，创建CCE集群，集群规模50节点，控制节点数1，虚拟私有云默认网段。</p><h3 id="性能测试资源准备及执行"><a href="#性能测试资源准备及执行" class="headerlink" title="性能测试资源准备及执行"></a><em>性能测试资源准备及执行</em></h3><p>使用步骤1 CPTS录制脚本，点击开始录制，打开凤凰商城的官网，录制工具自动访问操作过程中的HTTP，观察录制结果：</p><p>将需要的数据导出得到json文件。在CPTS中添加测试资源，添加刚刚创建好的CCE节点；</p><p>等待其运行成功：</p><p>接着创建测试工程并添加任务：</p><p>添加测试用例以及多节点：</p><p>将脚本导入，并发参数以及压力配置如下图所示：</p><p>启动压力测试，注意CCE资源对于性能的要求，在本次实验中我首先选择了2核4GB的节点，但是这种节点并不适合压力测试，性能较低、在本次试验中最适合的节点为4核8GB。</p><p>压测实验结束后，观察各项测试指标，这里对各项测试指标和响应状态分布进行了研究，得到了如下的结果：</p><p>可以看出，压测实验的结果较为成功。然后再devcloud云测界面中执行相关的性能测试，发现测试结果十分成功。</p><h3 id="使用测试套件进行迭代测试规划"><a href="#使用测试套件进行迭代测试规划" class="headerlink" title="使用测试套件进行迭代测试规划"></a><strong>使用测试套件进行迭代测试规划</strong></h3><p>这里在项目中选择测试执行，选择新建测试套件，在迭代4中添加新的实验用例，同时对用例进行筛选：</p><h3 id="用例自定义"><a href="#用例自定义" class="headerlink" title="用例自定义"></a><strong>用例自定义</strong></h3><p>首先进入项目，在云测设置中使用功能用例自定义，输入已分配选项：</p><p>返回设计测试，选择新建的测试用例，保存已分配状态：</p><h3 id="使用测试用例和测试套件视图进行用例驱动测试"><a href="#使用测试用例和测试套件视图进行用例驱动测试" class="headerlink" title="使用测试用例和测试套件视图进行用例驱动测试"></a><strong>使用测试用例和测试套件视图进行用例驱动测试</strong></h3><p>进入项目选择测试执行，在测试套件部分查看测试套件的执行情况：</p><p>对于测试失败的用例，可以选择分析内部失败的原因，记录其中的缺陷信息，消除项目关联的bug，最后执行成功。</p><h3 id="使用测试总览跟踪测试进度和质量"><a href="#使用测试总览跟踪测试进度和质量" class="headerlink" title="使用测试总览跟踪测试进度和质量"></a><strong>使用测试总览跟踪测试进度和质量</strong></h3><p>分析测试的执行结果，对迭代4的需求覆盖率、缺陷、用例通过率等相关统计进行分析。</p><p>自定义测量报表，通过统计度量可以量化高效管理测试团队和测试项目,自定义报表可以帮助创建个性化的统计报表。</p><h2 id="持续部署与发布"><a href="#持续部署与发布" class="headerlink" title="持续部署与发布"></a><strong>持续部署与发布</strong></h2><h3 id="购买并配置弹性云服务器"><a href="#购买并配置弹性云服务器" class="headerlink" title="购买并配置弹性云服务器"></a><strong>购买并配置弹性云服务器</strong></h3><p>在前面已经购买了相关的弹性云服务器，这里就不再赘述，只标出云服务器的配置：</p><p>返回控制台，单击云主机名称，进入主机管理页面。选择＂安全组＂页签，单击安全组名称，展开详情，单击＂更改安全组规则＂，选择＂入方向规则＂页签，单击＂添加规则＂，添加一条入方向规则＂允许访问5000以及5001端口＂。</p><p>然后添加授信主机。</p><p>当出现以下提示时，表示主机添加成功。</p><h3 id="使用DevCloud部署服务配置主机环境"><a href="#使用DevCloud部署服务配置主机环境" class="headerlink" title="使用DevCloud部署服务配置主机环境"></a><strong>使用DevCloud部署服务配置主机环境</strong></h3><p>进入项目，选择部署服务，新建关于docker的部署任务，等待安装：</p><h3 id="使用自动化部署实现一键部署"><a href="#使用自动化部署实现一键部署" class="headerlink" title="使用自动化部署实现一键部署"></a><strong>使用自动化部署实现一键部署</strong></h3><p>持续部署配置。进入项目，单击页面上方导航＂构建&amp;发布 &gt; 部署＂，进入部署服务。找到部署任务＂phoenix-sample-standalone＂，单击此任务对应操作列中的图标，进入＂编辑任务＂页面。</p><p>选择＂部署步骤＂页签，单击部署步骤＂选择部署来源＂，编译相关信息。</p><p>选择＂参数设置＂页签，根据SWR服务登录指令填写参数。登录指令通过SWR控制台获取。</p><p>单击＂保存并执行＂，启动部署任务。系统自动跳转至＂部署详情＂页面，可以查看任务执行进展。当出现以下页面时，表示任务执行成功。</p><h3 id="持续交付流水线"><a href="#持续交付流水线" class="headerlink" title="持续交付流水线"></a><strong>持续交付流水线</strong></h3><h3 id="配置流水线串接代码检查，编译构建和自动化部署步骤"><a href="#配置流水线串接代码检查，编译构建和自动化部署步骤" class="headerlink" title="配置流水线串接代码检查，编译构建和自动化部署步骤"></a><em>配置流水线串接代码检查，编译构建和自动化部署步骤</em></h3><p>创建并触发持续交付流水线。进入项目，单击页面上方导航＂构建&amp;发布 &gt; 流水线＂，进入流水线服务，选择新建流水线。</p><p>单击图标，在右侧滑出框中输入名称＂代码检查＂，单击＂保存＂。</p><p>在＂代码检查＂后面，按照同样方式，添加构建任务＂phoenix-sample-ci＂。</p><p>在＂测试＂后添加阶段＂部署＂，并在该阶段中添加部署任务＂phoenix-sample-standalone＂，单击＂保存＂。</p><p>步骤1 流水线任务阶段设置完成后点击右上角＂保存并执行＂，启动流水线。当出现以下页面时，表示任务执行成功。</p><p>添加质量门禁。为了控制代码的质量，我们要求代码必须经过扫描，并且错误数量控制在合理范围内，才允许发布。</p><p>保存流水线，返回＂流水线详情＂页面。启动流水线任务，待任务执行结束可看到：由于代码检查问题数大于5，因此流水线任务执行失败。</p><h3 id="更新流水线配置，实现代码变更触发的持续交付流水线"><a href="#更新流水线配置，实现代码变更触发的持续交付流水线" class="headerlink" title="更新流水线配置，实现代码变更触发的持续交付流水线"></a><em>更新流水线配置，实现代码变更触发的持续交付流水线</em></h3><p>步骤1 进入项目，单击页面上方导航＂构建&amp;发布 &gt; 流水线＂，进入流水线服务。找到流水线任务＂phoenix-sample-pipeline＂，单击此任务对应操作列中的图标，进入＂流水线配置＂页面。点击＂代码源＂页签，在＂更多设置＂中勾选所需触发分支，单击＂保存＂。</p><h3 id="流水线配置高级功能"><a href="#流水线配置高级功能" class="headerlink" title="流水线配置高级功能"></a><em>流水线配置高级功能</em></h3><p>添加人工审核，DevCloud支持在流水线任务中加入人工审核设置，在某个阶段任务执行完成时，需要人工审核通过才能继续执行。</p><h3 id="资源释放"><a href="#资源释放" class="headerlink" title="资源释放"></a><strong>资源释放</strong></h3><p>为了避免不必要的费用，如果您在项目课程实践完成后，无需再使用这些资源，建议您参考以下操作释放弹性云服务器资源。返回ECS控制台，选择phoenix-test（自定义主机名）云主机，然后点击＂更多删除＂。在弹出的对话框中勾选＂释放云服务器绑定的弹性公网IP地址＂和＂删除云服务器挂载的数据盘＂，然后点击＂是＂，删除云主机，释放ECS资源。</p><p>回到CloudIDE服务，删除IDE实例：</p><h2 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a><strong>实验总结</strong></h2><p>通过本次实验，我对软件项目开发、测试、维护的一系列流程有了更为深入的了解。总的来说，软件项目开发分为六个阶段，即项目启动阶段、需求阶段、设计阶段、开发阶段、测试阶段、常规文档。</p><p>在<strong>项目启动阶段</strong>，产品经理和项目内的干系人确定项目的方向，公司确定项目组的团队组成，同时需要明确项目管理制度，输出《需求调研》以及《业务梳理》的相关文档。在本次实验中，由于是直接从迭代四开始做起，因此不需要项目启动这一阶段（因为项目启动已经发生在第一次迭代中，可以看到凤凰商城的项目启动方向就是售卖汽车零件的网络平台）</p><p>在<strong>需求阶段</strong>，产品经理提供最简单也最接近成品的《产品原型》，线框图形式即可。在这个过程中还可能产生的包括业务流程图和页面跳转流程图。业务流程图侧重在不同节点不同角色所进行的操作，页面跳转流程图主要指不同界面间的跳转关系。在本次实验中，我们的需求就是在开始阶段绘制的思维导图，其中story就是需要实现的具体功能。与此同时，团队内部的分工也是需要在需求阶段确定的。结合scrum模式的特点，每日站立会议也是一个小的需求阶段，它需要你明确实现功能的过程中需要面对的问题，根据问题的难易程度去略微改变需求的实现方法，也是一种需求变化的阶段。</p><p>在<strong>设计阶段</strong>，UI设计师根据产品的原型，输出《界面效果图》，并提供界面的标注，最后根据主要的界面，提供一套《UI设计规范》。UI设计规范主要是明确常用界面形式尺寸等，方便研发快速开发。UI设计常涵盖交互的内容。研发工程师完成《概要设计》、《通讯协议》及《表结构设计》，及完成正式编码前的一系列研发设计工作。在本次实验中，我们对项目的前端页面和后端的接口进行了修改，利用代码仓库的存储功能，将代码使用git命令传输到云端。虽然在调试过程中遇到了许多问题，但是整体的过程还算得上顺利，同时提升了我的编程水平，对python中的各个函数库有了更为深入的了解。</p><p>在<strong>开发阶段</strong>，研发工程师正式进入编码阶段，这个过程虽然大部分时间用来写代码，但是可能还需要进行技术预研、进行需求确认（每日站立会议、代码自动化检查）。编码过程一般还需进行服务端和移动端的联调等，在凤凰商城新功能测试中，使用的cloudide能够给出网站的二维码，从而使得双端的程序测试更加便捷。</p><p>在<strong>测试阶段</strong>，测试工程师按阶段设计《测试实例》，未通过的流程测试提交至开发组，分配给相应的开发人员调整。在本次实验过程中，华为云系统可以实现审批人和申请人的互通有无，通过打分的方式确定申请项目是否通过测试。</p><p>在<strong>常规文档</strong>阶段，项目组根据开发得到的软件，输出内部的技术文档以及客户使用的操作文档。</p><p>总而言之，通过本次实验，我掌握了如何使用华为云平台进行软件项目开发的流程，希望在之后的软件开发学习过程中，继续使用华为云平台进行软件的创新，和团队队员一同创造价值。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> 自我提升 </tag>
            
            <tag> 项目 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树树</title>
      <link href="/2021/11/12/shu-shu/"/>
      <url>/2021/11/12/shu-shu/</url>
      
        <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h3 id="树的基本性质"><a href="#树的基本性质" class="headerlink" title="树的基本性质"></a>树的基本性质</h3><p>1.树中的节点数等于所有节点的度数和+1；</p><p>2.度数为m的树，其第i层上至多有m^i个节点；</p><p>3.高度为h（深度为h-1）度为m的树至多有m^h-1/m-1个节点；（归纳法证明）</p><p>4.具有n个节点的度为m的树，最小高度为[logm(n(m-1)+1)]（归纳法，根据3中的公式，其中取整为上取整）</p><h2 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h2><p>根据某个特定的关键k，从集合R中找出关键词与k相同的记录</p><ul><li>静态查找：集合中记录是固定的，没有插入和删除操作，只有查找</li><li>动态查找：集合中的记录是动态变化的，还可能发生插入和删除操作</li></ul><h3 id="静态查找"><a href="#静态查找" class="headerlink" title="静态查找"></a>静态查找</h3><p>1.顺序</p><p>哨兵:对i进行初始化处理，查找到哨兵时会自动退出循环。</p><p>2.二分查找</p><p>会形成二分查找判定树</p><h2 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h2><p>n个节点构成的有限集合</p><ul><li>子树是不相交的</li><li>除了根节点以外，每个节点有且仅有一个父节点</li><li>一棵N个节点的树有n-1条边。</li></ul><h3 id="树的基本术语"><a href="#树的基本术语" class="headerlink" title="树的基本术语"></a>树的基本术语</h3><p><img src="https://s1.imagehub.cc/images/2021/11/12/Screenshot_20210907_130547.jpg" alt="1"></p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-163606040b8b87358.png" alt="2"></p><h3 id="树的表示方法"><a href="#树的表示方法" class="headerlink" title="树的表示方法"></a>树的表示方法</h3><p>父亲-兄弟表示法</p><p>二叉树较为重要</p><h3 id="二叉树的定义"><a href="#二叉树的定义" class="headerlink" title="二叉树的定义"></a>二叉树的定义</h3><p>斜二叉树，类似于链表。</p><p>满二叉树：每个节点都具有数据</p><p>完全二叉树：具有编号，从上到下，从左到右编号；</p><p>扩充二叉树：将所有节点缺少的左右节点补全；</p><p>扩充二叉树性质：</p><p>外部路径E：根节点到所有扩充节点的距离之和；<br>内部路径I：根节点到所有内部原有节点的距离之和；<br><strong>E=I+2n；</strong></p><p>性质（重点中的重点）：</p><p>在二叉树的第i层上至多有2^i个节点（根节点为第0层，i≥0）</p><p>高度为h的二叉树至多有2^i-1个节点；</p><p>非空满二叉树树叶数等于其分支节点数加1；</p><p>有n个节点的完全二叉树的高度为[log2(n+1)];</p><p>例：完全二叉树，高度为h，最少的节点数：2^(h-1)+1;</p><h3 id="二叉树的存储结构"><a href="#二叉树的存储结构" class="headerlink" title="二叉树的存储结构"></a>二叉树的存储结构</h3><p>顺序存储结构：</p><p>对二叉树进行扩充处理，在数组中储存；</p><p>链式存储：</p><p>二叉链表：在n个节点的二叉链表中，有n+1个空指针域；</p><p>三叉链表：每个节点存储自己的父节点；</p><h3 id="二叉树的遍历"><a href="#二叉树的遍历" class="headerlink" title="二叉树的遍历"></a>二叉树的遍历</h3><p>广度优先遍历：<br>利用队列存储节点，即将节点压入队列中，将其左节点和右节点按顺序压入之后，将</p><p>先序遍历：</p><p>先数据，后左，后右</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-2958f1d9aab07f561.png" alt="3"></p><p>中序遍历：<br>先左，后数据，后右。</p><p>后序遍历：</p><p>先左，后右，后数据。</p><p>三种遍历方法的比较分析：<br>前序和后序相反的情形：任意节点只有一个子树；</p><p>遍历的性质：</p><p><strong>任何n个不同节点的二叉树，都可以由它的中序序列和先序序列唯一的确定；</strong></p><p>任何n个不同节点的二叉树，都可以由它的中序序列和后序序列唯一的确定；</p><h3 id="非递归实现中序遍历"><a href="#非递归实现中序遍历" class="headerlink" title="非递归实现中序遍历"></a>非递归实现中序遍历</h3><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-3bb18cd3609dc140a.png" alt="4"></p><h2 id="二叉树的查找、删除、以及插入等操作"><a href="#二叉树的查找、删除、以及插入等操作" class="headerlink" title="二叉树的查找、删除、以及插入等操作"></a>二叉树的查找、删除、以及插入等操作</h2><h3 id="查找问题："><a href="#查找问题：" class="headerlink" title="查找问题："></a>查找问题：</h3><p>静态查找、动态查找</p><h3 id="二叉搜索树"><a href="#二叉搜索树" class="headerlink" title="二叉搜索树"></a>二叉搜索树</h3><ul><li>左边小右边大</li></ul><h3 id="查找操作的实现"><a href="#查找操作的实现" class="headerlink" title="查找操作的实现"></a>查找操作的实现</h3><p>方法一：递归</p><ul><li>判断是否为空二叉树</li><li>小于搜索左侧，大于搜索右侧</li><li>找到返回节点</li></ul><p>方法二：循环</p><p>以根节点不为空为循环条件，其他步骤同上</p><p>查找的效率决定于树的高度</p><h3 id="最大最小查找"><a href="#最大最小查找" class="headerlink" title="最大最小查找"></a>最大最小查找</h3><p>左侧/右侧搜索到底</p><h3 id="二叉树的插入"><a href="#二叉树的插入" class="headerlink" title="二叉树的插入"></a>二叉树的插入</h3><p>大小值判断</p><h3 id="二叉树的删除"><a href="#二叉树的删除" class="headerlink" title="二叉树的删除"></a>二叉树的删除</h3><p>1.删除叶节点：<br>修改父节点的指针，同时删除叶节点</p><p>2.删除只有一个儿子的节点：</p><p>把儿子挂在删除节点的父节点上，删除；</p><p>3.删除有两个儿子的节点：</p><p>方法：</p><p>1）取右子树中的最小元素替代；</p><p>2）取左子树中的最大元素替代；</p><p>注：需要考虑子树中的左右大小关系是否成立；</p><p>实现步骤：</p><p>1.找到删除的节点；</p><p>2.判断子节点数；</p><h3 id="平衡二叉树"><a href="#平衡二叉树" class="headerlink" title="平衡二叉树"></a>平衡二叉树</h3><p>1.平均查找长度：（ASL）搜索每一个节点需要的搜索次数的平均数</p><p>2.平衡因子：对节点来说，左右子树的高度差为平衡因子</p><p>3.平衡因子不超过1时为平衡树</p><p>4.调整：</p><p>二叉树的遍历</p><p>广度优先遍历：按字母顺序进行遍历搜索</p><p>深度优先遍历：一条路走到黑；</p><p>先序遍历、后序遍历、中序遍历的区别只在于根节点的搜索顺序。</p><p>复杂度分析</p><p>对于含有n个节点的二叉树，遍历完树的每一个元素都需要O（n）时间。</p><p>二叉搜索树</p><p>左子树数值小于父节点，右子树数值大于父节点，根节点的左右子树也是二叉搜索树。</p><p>平均性能分析</p><p>所有节点的搜索所需经过节点个数之和除以节点数（ASL）</p><p>二叉搜索树的插入、删除问题</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled4a5ebe596101a8bf.png" alt="5"></p><p>总结：节点有右子树可以直接删除，如果只有左子树，需要将左侧搜索左子树，找到最后一个大于删除节点的父节点元素，代替被删除元素。</p><p>堆与优先队列</p><p>最大树（最小树）：每个节点的值都大于（小于）或等于其子节点值的树</p><p>最大堆（最小堆）：最大（最小）的完全生成树</p><p>堆的建立（初始化）：</p><p>首先将所有的关键码放到一维数组中，然后考虑自顶向下将各个节点的左右两个节点进行比较，找出最大的一点作为父节点。</p><p>Huffman树</p><p>每个叶节点有权，权重越大离根节点就越远，相当于记录各个节点的位置信息。</p><p>Huffman树是最优二叉树，即带权路径长度最小。</p><p>2021/11/9</p><p>1.队列实现广度优先遍历，计算层数；</p><p>2.二叉树先序遍历递归（三条语句）；</p><p>3.先序遍历非递归实现；</p><p>4.中序遍历的递归和非递归；</p><p>5.后续遍历的递归实现</p>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> 概念 </tag>
            
            <tag> 数据结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>几种特殊的图</title>
      <link href="/2021/11/12/ji-chong-te-shu-de-tu/"/>
      <url>/2021/11/12/ji-chong-te-shu-de-tu/</url>
      
        <content type="html"><![CDATA[<h1 id="几种特殊的图"><a href="#几种特殊的图" class="headerlink" title="几种特殊的图"></a>几种特殊的图</h1><h1 id="欧拉图"><a href="#欧拉图" class="headerlink" title="欧拉图"></a>欧拉图</h1><p>图中包含所有边的简单开路径：欧拉路径；</p><p>图中包含所有边的简单闭路径：欧拉闭路；</p><p>充要条件：每个节点都是偶节点的连通无向图就是欧拉图；</p><p>每个节点的出度和入度相等的连通有向图就是欧拉图；</p><p>（规定平凡图为欧拉图）</p><h2 id="欧拉回路"><a href="#欧拉回路" class="headerlink" title="欧拉回路"></a>欧拉回路</h2><p>相关推论：</p><p>G是连通欧拉图，任意节点的度大于一→G有回路；</p><p>构造欧拉回路的方法：（无向图）</p><ul><li>在图中选择一点，找到一个基本循环，删去任意个边，每个节点都是偶节点；</li><li>若得到的图为零图，则解除的闭路就是欧拉回路；</li><li>如果不是零图就继续删除循环，直到得到零图。</li><li>删除循环的同时，将每次删除的子图进行合并，得到的简单循环图为所求欧拉回路；</li><li>如果得到的图不是零图，那么无欧拉回路；</li></ul><p>欧拉有向图：<br>每个节点的出度和入度相等的连通有向图；</p><p>推论：</p><p>两个可运算的图运算之后得到的图仍为欧拉图；</p><h2 id="欧拉开路径"><a href="#欧拉开路径" class="headerlink" title="欧拉开路径"></a>欧拉开路径</h2><p>欧拉开路径存在判断方法：连通无向图，存在路径只存在两个奇节点；</p><p>可以添加一条虚拟边，构造欧拉闭路；</p><h1 id="哈密尔顿图"><a href="#哈密尔顿图" class="headerlink" title="哈密尔顿图"></a>哈密尔顿图</h1><p>每个节点访问一次，节点和边都不重复；</p><p>包含所有节点的简单闭路；</p><p>定理：</p><p>对于连通图G&lt;V,E&gt;是哈密尔顿图，S是V的任意真子集，G－S的分支数小于S的基数，反之不一定成立；</p><p>充要条件：</p><p>G=&lt;V,E&gt;，若|V|=n≥3简单图，d(u)+d(v)≥n-1,称为哈密尔顿链；</p><p>每个节点的度数≥|V|/2，则它是哈密尔顿图；</p><h2 id="二部图"><a href="#二部图" class="headerlink" title="二部图"></a>二部图</h2><p>一个图存在两个分支，且两个分支中的点互不相邻，其中V1，V2称为互补结点子集；</p><p>一个图的二部图并不唯一；</p><p>判断方法：G的所有回路的长度均为偶数（充分必要）；</p><p>完全二部图：</p><p>V1中的每一个结点和V2中的每一个结点相邻；</p><p>K（3，3） 三个结点，连接三个点；</p><h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><p>如果E’中不包含自圈，且其中任何两条边都不邻接，称为G的匹配；</p><p>最大匹配；</p><p>匹配数：最大匹配的元素数；</p><p>完美匹配：G的匹配数等于V1的基数；V1，V2为G的互补节点子集；</p><p>充分条件：</p><p>V1和V2是G的互补节点子集，t为正整数，V1中至少有t个节点和其相邻，V2中至多有t个节点和其相邻；</p><h2 id="平面图"><a href="#平面图" class="headerlink" title="平面图"></a>平面图</h2><p>定义：无向图，没有任何边的交叉；</p><p>判断方法：非循环图显然是平面图；</p><p>对于有回路的图：</p><ul><li>找出最大的回路；</li><li>将相交的边放在循环的外面或者里面；</li></ul><p>K（3，3）K（5）都不是平面图，统称为库拉耶夫斯基图；</p><p>比二者小的是平面图</p><p>平面图的特殊情况：多边形；</p><p>在多边形的内部两点有不交叉的路径，得到两个多边形，行程多边形定界；</p><p>欧拉公式：n-m+k=2;</p><p>其中n为点数，m为边数，k为面数；</p><h2 id="库拉耶夫斯基图"><a href="#库拉耶夫斯基图" class="headerlink" title="库拉耶夫斯基图"></a>库拉耶夫斯基图</h2><p>若G1和G2是同构的，或者插入、删除次数为2的节点得到的两个图同构，称两个图在2次以内同构；</p><h2 id="对偶图、自对偶图"><a href="#对偶图、自对偶图" class="headerlink" title="对偶图、自对偶图"></a>对偶图、自对偶图</h2><p>四色问题、图着色；</p><p>只有孤立结点：1</p><p>完全图：n；</p><p>二部图：2；</p><p>闭合回路：偶数：2；奇数：3；</p>]]></content>
      
      
      <categories>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 离散数学2 </tag>
            
            <tag> 特殊的图 </tag>
            
            <tag> 欧拉图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图的基本概念以及矩阵基本表示</title>
      <link href="/2021/11/12/tu-de-ji-ben-gai-nian-yi-ji-ju-zhen-ji-ben-biao-shi/"/>
      <url>/2021/11/12/tu-de-ji-ben-gai-nian-yi-ji-ju-zhen-ji-ben-biao-shi/</url>
      
        <content type="html"><![CDATA[<h1 id="图的基本概念以及其矩阵基本表示"><a href="#图的基本概念以及其矩阵基本表示" class="headerlink" title="图的基本概念以及其矩阵基本表示"></a>图的基本概念以及其矩阵基本表示</h1><p>构成：点的非空集合，有限的边集合，算子（建立两个集合之间的关系）</p><p>G=&lt;V,E,e&gt;</p><p>有向图（E=V×V）、无向图；</p><p>节点数目：图的阶；</p><p>边的表示：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-1efee09580b6433c5.png" alt="1"></p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-25fd45473c8a37d9d.png" alt="2"></p><p>无向图：点邻接、边邻接（两条边通过共同节点连接）</p><p>有向图：起点、终点、邻接（边）</p><p>自圈：与边相连的两个顶点相同，这个边称为自圈；</p><p>平行：两条边大小相等；</p><p>简单图：没有平行边、自圈；</p><p>多重边图：有平行边；</p><p>伪图：平行边和自圈都有；</p><h2 id="同构"><a href="#同构" class="headerlink" title="同构"></a>同构</h2><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-322c9b5fb30df5ba0.png" alt="3"></p><p>有同样数量的节点，同时边的关系相同；</p><p>证明同构：<br>节点、边数相同；</p><p>设映射函数；</p><p>确定边的相邻关系是否保持；</p><h2 id="图模型"><a href="#图模型" class="headerlink" title="图模型"></a>图模型</h2><p>图的度：<br>无向图：与节点关联的边和自圈数量的和称为节点的度或者次；</p><p>有向图：出度+入度；</p><p>无向图：<strong>度数之和等于边的二倍；</strong></p><h2 id="节点"><a href="#节点" class="headerlink" title="节点"></a>节点</h2><p>奇节点、偶节点，孤立节点（0）、端点（1）；</p><p><strong>任何图都有偶数个奇结点；</strong></p><p>零图：都是孤立节点的图；</p><p>平凡图：一阶节点构成的图；</p><p>圈图：</p><p>正则图：所有节点的度均为自然数d的</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-407ffbdbefc1eb936.png" alt="4"></p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitledfdf63b6bb94addab.png" alt="5"></p><p>同构条件：<br>顶点个数相同</p><p>边数相同；</p><p>度数相同的顶点个数相同；</p><p>相邻关系是否 一致；</p><p>子图：</p><p>子集，子集，子母图；</p><p>生成子图：点数相同，边少，度少；</p><p>真子图：点数、边、度的数量减少；</p><p>V’导出的子图：减少一些点，但边集中的边的起点和终点都在点集中；</p><p>E’导出子图：减少一些边，去掉边的关联点</p><p>区分：生成子图、V’导出的子图、E’导出的子图</p><p>补图：</p><h2 id="图的运算"><a href="#图的运算" class="headerlink" title="图的运算"></a>图的运算</h2><ul><li>边相交，为可运算；</li><li>边和节点集合都不相交，为不可交；</li><li>图的交、并；</li><li>两个可运算的图，节点没有交集，存在唯一的交图，并图，和异或图；</li><li>可运算图的相加</li></ul><h2 id="路径、回路和连通性"><a href="#路径、回路和连通性" class="headerlink" title="路径、回路和连通性"></a>路径、回路和连通性</h2><p>回路：终点和起点重合，闭合回路，闭的简单回路；</p><p>圈：基本路径中除了终点和起点相同，其他点都不相同；</p><p>图中出现的边互不相同，称路径为简单路径；</p><p>点互不相同：基本路径；</p><p>两点之间存在路径，那么他们之间一定存在基本路径；</p><p>基本路径的长度小于或者等于n-1；</p><p>回路的确定：</p><p>图G的子图是闭合路径，那么图G有回路；</p><p>有向图的任意一个节点的出度大于0，那么有有向回路；</p><p>找回路的方法：去除所有的出度为0的点以及相关的边，最后得到的就是回路的母图；</p><p>点与点的可达、不可达；</p><p>存在不可达：</p><p><strong>直径为无穷</strong></p><p>可达：</p><p>连通的</p><p>测地线：最短路径；</p><p>一个图的最长路径称为直径；</p><p>对于有向图：</p><p>强连通：任意两个点之间都互相可达；</p><p>单向连通：任意两个节点，必有一个节点可达另一个节点；<br>弱连通：基础图是连通的（将有向图转化为无向图，得到的为基础图）</p><p>强分支、弱分枝，单项分枝；</p><p>极大子图，三个分支（有向图）</p><p>连通无向图只有一个分支；</p><p>割集：</p><p>去掉一个点以及关联的边，得到的图具有更多的分支；</p><h2 id="图的矩阵表示"><a href="#图的矩阵表示" class="headerlink" title="图的矩阵表示"></a>图的矩阵表示</h2><h3 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h3><p>简单有序图，每确定一条边就++；</p><p>多个邻接矩阵相似，与编号无关；</p><p>邻接矩阵自反、反自反对应的性质；</p><p>图对称，邻接矩阵也对称；</p><p>简单无序图：</p><p>邻接矩阵一定对称，</p><p>多重边图、加权图：<br>权值/边数加入矩阵中</p><p>逆图：由原图（简单有向图）转置得到的图，即将所有的有向线段反向；</p><p>原图的邻接矩阵和逆图的邻接矩阵相乘：<br>得到的新矩阵的元素为从i到j各条路线之和；</p><p>i到j共同引出、终止的结点，点的个数为新矩阵的元素值；</p><p>如何计算：</p><p>原矩阵中第i行和第j行相交，得到的相交数为对应的新矩阵（i，j）的值，其中对角线上的元素对应节点的出度；</p><p>逆图的邻接矩阵和原图的邻接矩阵相乘：</p><p>从k引出终止于i，j的结点个数之和为新矩阵（i，j）的元素值；</p><p>如何计算：</p><p>对角线上的元素对应结点的入度；</p><p>邻接矩阵的幂：（15分）</p><p>对应的幂数下的矩阵，矩阵中对应的元素（i，j）表示i→j存在距离为n的路径的数目；（归纳法证明）</p><p>作用：判断不同的分图，求解路径数</p><p>使A非零的最小正整数：类似于闭包关系，需要算到An；</p><p>可达性矩阵：（路径矩阵）<br>P，类似于邻接矩阵，但至少有一条路径就可以赋值为1，不能指名存在的所有路径；</p><p>确定某个过程是否递归：<br>求解可达性矩阵后进行合取，如果某一列全为1，则该列对应的元素参与递归；</p><p>布尔矩阵：</p><p>布尔乘法：带括号；</p><p>邻接矩阵也是布尔矩阵（不考虑平行边，简单图）</p><p><strong>区别邻接矩阵的幂：一个是路径的条数，一个是存不存在路径；</strong></p><p>路径矩阵判断强分支：找互通的方块；</p><p>关联矩阵：<br>1：有路径；2：有相反路径；0：无路径；</p>]]></content>
      
      
      <categories>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> 离散数学2 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代数系统</title>
      <link href="/2021/11/12/dai-shu-xi-tong/"/>
      <url>/2021/11/12/dai-shu-xi-tong/</url>
      
        <content type="html"><![CDATA[<h1 id="代数系统"><a href="#代数系统" class="headerlink" title="代数系统"></a>代数系统</h1><p><a href="https://www.imagehub.cc/image/73YjT"><img src="https://s1.imagehub.cc/images/2021/11/12/Screenshot_20210906_091249.jpg" alt="Screenshot_20210906_091249.jpg"></a></p><p>近似数学，离散数学及其应用</p><p>代数系统：</p><p>一种特殊的函数。（一个集合、封闭的运算）</p><p>同态：加密；</p><p>同构：双射函数+双同态；（迁移学习）</p>]]></content>
      
      
      <categories>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> 离散数学2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数学建模算法以及应用</title>
      <link href="/2021/11/12/shu-xue-jian-mo-suan-fa-yi-ji-ying-yong/"/>
      <url>/2021/11/12/shu-xue-jian-mo-suan-fa-yi-ji-ying-yong/</url>
      
        <content type="html"><![CDATA[<h1 id="数学建模算法以及应用"><a href="#数学建模算法以及应用" class="headerlink" title="数学建模算法以及应用"></a>数学建模算法以及应用</h1><p>示例：</p><p>基本原理</p><p>适用问题</p><p>相应解决办法</p><p>代码附录</p><p>拓展</p><h1 id="线性规划（matlab）"><a href="#线性规划（matlab）" class="headerlink" title="线性规划（matlab）"></a>线性规划（matlab）</h1><p>适用问题</p><p>多变量的不等关系和相等关系，通过建立坐标系利用限制方程对区域进行规划限制</p><ul><li>投资类问题求解最优收益率的问题（考虑风险率，收益率以及交易费用等等）</li><li>工厂生产不同成本不同价值商品的最优收入</li><li>飞机货运平衡问题（前，后，中如何保持飞机平稳）</li><li>其他最大值最优解问题</li></ul><p>基本原理</p><p>分别对不同的变量进行不等式的构造，得到问题要求的各个变量的最小值or最大值。</p><p>将各个变量的不等公式最优解带入到目标方程中。</p><p>代码附录</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Screenshot_20210908_192220.jpg" alt="1"></p><p>拓展</p><h1 id="整数规划（Lingo）"><a href="#整数规划（Lingo）" class="headerlink" title="整数规划（Lingo）"></a>整数规划（Lingo）</h1><p>基本原理：</p><p>将部分变量转化成整数，达到简化运算的目的。具体分为01整形规划、蒙特卡洛算法以及匈牙利算法。</p><p>01整形规划：利用某些变量只有两种变化的特性，对限制条件进行增添，从而简化运算。</p><p>蒙特卡洛算法：利用计算机进行模拟，适合数据量较大的规划问题</p><p>适用问题:</p><ul><li>指派问题（01规划，构建矩阵）</li><li>不规则图形面积求解（蒙特卡洛算法）</li><li>混合型问题，考虑整数以及其他多重变量。</li><li>最优分配问题（建最少的小学覆盖最大的范围）</li></ul><p>代码附录：</p><p>混合整数规划问题</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Screenshot_20210908_195318.jpg" alt="2"></p><h1 id="非线性规划"><a href="#非线性规划" class="headerlink" title="非线性规划"></a>非线性规划</h1><p>基本原理：</p><p>同线性规划，代码和原理的变化很少，需要考虑</p><p>目标函数如何进行构造。</p><p>适用问题：</p><ul><li>求解多元函数的极值（Matlab）</li><li></li></ul><p>代码附录：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Screenshot_20210908_200702.jpg" alt="3"></p><p>拓展：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc，clearsyms x yf <span class="token operator">=</span>x<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">-</span>y<span class="token operator">^</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">3</span><span class="token operator">*</span> x<span class="token operator">^</span><span class="token number">2</span>＋<span class="token number">3</span><span class="token operator">*</span>y<span class="token operator">^</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">9</span><span class="token operator">*</span> x<span class="token punctuation">;</span>df <span class="token operator">=</span><span class="token function">jacobian</span><span class="token punctuation">(</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%求一阶偏导数</span>d2f <span class="token operator">=</span><span class="token function">jacobian</span><span class="token punctuation">(</span> df<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%求Hessian阵</span><span class="token punctuation">[</span>xx<span class="token punctuation">,</span>yy<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token function">solve</span><span class="token punctuation">(</span> df<span class="token punctuation">)</span><span class="token comment">%求驻点</span>xx <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span> <span class="token punctuation">;</span>yy <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span>yvy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%转化成双精度浮点型数据，下面判断特征值的正负,必是数值型数据</span><span class="token keyword">for</span> <span class="token number">i</span><span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span> <span class="token function">length</span><span class="token punctuation">(</span>xx<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token function">subs</span><span class="token punctuation">(</span>d2f<span class="token punctuation">,</span>Ix<span class="token punctuation">,</span>yl<span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token function">xx</span><span class="token punctuation">(</span> <span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">yvy</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>b <span class="token operator">=</span><span class="token function">eig</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%求矩阵的特征值</span>f <span class="token operator">=</span> <span class="token function">subs</span><span class="token punctuation">(</span> f<span class="token punctuation">,</span><span class="token punctuation">{</span>x<span class="token punctuation">,</span>yl <span class="token punctuation">,</span><span class="token operator">|</span><span class="token function">xx</span><span class="token punctuation">(</span> <span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">yy</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">)</span><span class="token punctuation">;</span>f <span class="token operator">=</span> <span class="token function">double</span><span class="token punctuation">(</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token function">all</span><span class="token punctuation">(</span>b<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'( % f,%f)是极小值点,对应的极小值为% f vn'</span> <span class="token punctuation">,</span> <span class="token function">xx</span><span class="token punctuation">(</span> <span class="token number">i</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token function">yy</span><span class="token punctuation">(</span> <span class="token number">i</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">elseif</span> <span class="token function">all</span><span class="token punctuation">(</span>b<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'( % f,% f)是极大值点,对应的极大值为% f \n'</span><span class="token punctuation">,</span> <span class="token function">xx</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token function">yy</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">elseif</span> <span class="token function">any</span><span class="token punctuation">(</span> b<span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token function">any</span><span class="token punctuation">(</span> b<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'( %f,% f)不是极值点 \n'</span><span class="token punctuation">,</span><span class="token function">xx</span><span class="token punctuation">(</span> <span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">yy</span><span class="token punctuation">(</span> <span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span><span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token string">'无法判断(%f,% f)是否是极值点n'</span><span class="token punctuation">,</span><span class="token function">xx</span><span class="token punctuation">(</span> <span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">yy</span><span class="token punctuation">(</span> <span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="图与网络模型及方法（规划）"><a href="#图与网络模型及方法（规划）" class="headerlink" title="图与网络模型及方法（规划）"></a>图与网络模型及方法（规划）</h1><p>基本原理：</p><p>通过邻接矩阵或者其他数据结构构建有向图或无向图，储存各点之间的关系。</p><p>适用问题：</p><p>最短路问题（狄克斯特拉算法、弗洛伊德算法）</p><p>最小生成树问题：连接各点，生成的边数最少。</p><ul><li>prim算法：也是一种贪心算法，每次选择最小权值的边存入集合中。</li><li>Kruskal算法：</li></ul><p>(1)选eeE(G),使得e，是权值最小的边。<br>(2）若e ,e2,…,e;已选好,则从E(G)-ie1 ,e2,…”,e}中选取e;.1,使得{e, ,e2,…”,e;,e;.}中无圈;<br>e.是E(G)-e1 ,e2,…,e,|中权值最小的边。(3）直到选得e,v-为止。</p><p>网络最大流问题：</p><ul><li>网络最大流问题：有向图中一个集合存储弧的信息，控制为流量，此时图构成了网络，存在弧的容量，发点到收点的函数被称为流量，由此求解最大流。</li><li>最小费用最大流：<br>线性规划求出最大流量，即最短路径，然后利用线性规划模型求出最大流对应的最小费用。</li></ul><p>旅行商问题：<br>钢管运输问题：</p><p>相对解决办法：</p><p>狄克斯特拉算法：</p><ul><li>规划模型文字描述：</li></ul><p><img src="https://s1.imagehub.cc/images/2021/11/12/Screenshot_20210908_203350.jpg" alt="4"></p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-1.png" alt="5"></p><ul><li>佛洛依德算法文字描述：</li></ul><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-2ddf542f2710c983d.png" alt="6"></p><ul><li>最小费用流的一种迭代方法：（无代码）</li></ul><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-3e6984e381c1f001b.png" alt="7"></p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-4.png" alt="8"></p><p>代码附录：</p><p>佛洛依德算法、狄克斯特拉求最短路：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">;</span>clc<span class="token punctuation">;</span>n <span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span> a <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>）<span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">;</span>a <span class="token operator">=</span>a <span class="token operator">+</span>a<span class="token operator">'</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> a <span class="token operator">=</span> <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">inf</span><span class="token punctuation">;</span><span class="token comment">%把所有零元素替换成无穷</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">:</span>n <span class="token operator">+</span><span class="token number">1</span><span class="token operator">:</span>n <span class="token operator">^</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">%对角线元素替换成零,Matlab中数据是逐列存储的path = zeros(n);</span><span class="token keyword">for</span> k <span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>n<span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span><span class="token number">1</span> <span class="token operator">:</span>n<span class="token keyword">if</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">a</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">a</span><span class="token punctuation">(</span> k<span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">path</span><span class="token punctuation">(</span> <span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> k<span class="token punctuation">;</span><span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">end</span><span class="token keyword">end</span>a<span class="token punctuation">,</span> path<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc<span class="token punctuation">,</span>cleara <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%邻接矩阵初始化</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">50</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span> <span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">55</span><span class="token punctuation">;</span>a <span class="token operator">=</span>a <span class="token operator">+</span>a<span class="token operator">'</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">inf</span><span class="token punctuation">;</span><span class="token function">pb</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token function">length</span><span class="token punctuation">(</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span><span class="token function">pb</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span>index1 <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span>index2 <span class="token operator">=</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token function">length</span><span class="token punctuation">(</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">:</span> <span class="token function">length</span><span class="token punctuation">(</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">inf</span><span class="token punctuation">;</span><span class="token function">d</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>temp <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">%最新的Р标号的顶点</span><span class="token keyword">while</span> <span class="token function">sum</span><span class="token punctuation">(</span> pb<span class="token punctuation">)</span> <span class="token operator">&lt;</span><span class="token function">length</span><span class="token punctuation">(</span> a<span class="token punctuation">)</span>tb <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span> pb <span class="token operator">=</span> <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">d</span><span class="token punctuation">(</span>tb<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span> <span class="token function">d</span><span class="token punctuation">(</span> tb<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">d</span><span class="token punctuation">(</span> temp<span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">a</span><span class="token punctuation">(</span> temp<span class="token punctuation">,</span>tb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>tmpb <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token function">d</span><span class="token punctuation">(</span>tb<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span> <span class="token function">d</span><span class="token punctuation">(</span> tb<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>temp <span class="token operator">=</span> <span class="token function">tb</span><span class="token punctuation">(</span> <span class="token function">tmpb</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%可能有多个点同时达到最小值,只取其中的一个</span><span class="token function">pb</span><span class="token punctuation">(</span> temp<span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>index1 <span class="token operator">=</span> <span class="token punctuation">[</span> index1 <span class="token punctuation">,</span> temp<span class="token punctuation">]</span><span class="token punctuation">;</span>temp2 <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span> <span class="token function">d</span><span class="token punctuation">(</span> index1 <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">=</span> <span class="token function">d</span><span class="token punctuation">(</span> temp<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token function">a</span><span class="token punctuation">(</span> temp<span class="token punctuation">,</span>index1 <span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token function">index2</span> <span class="token punctuation">(</span> temp<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">index1</span> <span class="token punctuation">(</span> <span class="token function">temp2</span> <span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span>d<span class="token punctuation">,</span>index1<span class="token punctuation">,</span>index2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最小生成树部分代码：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc<span class="token punctuation">;</span>clear<span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token function">zeros</span><span class="token punctuation">(</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">60</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">40</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">52</span> <span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">45</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token number">4</span> <span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">50</span><span class="token punctuation">;</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">=</span> <span class="token number">70</span><span class="token punctuation">;</span>a <span class="token operator">=</span> a <span class="token operator">+</span>a<span class="token operator">'</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span>a <span class="token operator">=</span> <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token keyword">inf</span><span class="token punctuation">;</span>result <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p<span class="token operator">=</span><span class="token number">1</span> <span class="token punctuation">;</span>tb <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">;</span><span class="token function">length</span><span class="token punctuation">(</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token function">size</span><span class="token punctuation">(</span> result<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">~</span> <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span> a<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>temp <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>tb<span class="token punctuation">)</span> <span class="token punctuation">;</span>temp <span class="token operator">=</span> <span class="token function">temp</span><span class="token punctuation">(</span> <span class="token operator">:</span><span class="token punctuation">)</span><span class="token punctuation">;</span>d <span class="token operator">=</span> <span class="token function">min</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token punctuation">;</span><span class="token punctuation">[</span> jb<span class="token punctuation">,</span>kb<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span> <span class="token function">a</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>tb<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">=</span>d<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%找第1个最小值</span><span class="token number">j</span><span class="token operator">=</span> <span class="token function">p</span><span class="token punctuation">(</span>jb<span class="token punctuation">)</span><span class="token punctuation">;</span>k <span class="token operator">=</span> <span class="token function">tb</span><span class="token punctuation">(</span> kb<span class="token punctuation">)</span><span class="token punctuation">;</span>result <span class="token operator">=</span> <span class="token punctuation">[</span> result<span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">j</span><span class="token punctuation">;</span>k<span class="token punctuation">;</span>d<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>p <span class="token operator">=</span><span class="token punctuation">[</span>p<span class="token punctuation">,</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">tb</span><span class="token punctuation">(</span> <span class="token function">find</span><span class="token punctuation">(</span>tb <span class="token operator">=</span> <span class="token operator">=</span>k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">end</span>result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>lingo+matlab解决最大流最小费用问题：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token operator">/</span><span class="token operator">/</span>lingomodel<span class="token operator">:</span>sets<span class="token operator">:</span>nodes <span class="token operator">/</span>s<span class="token punctuation">,</span><span class="token number">1</span> <span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>t<span class="token operator">/</span><span class="token operator">:</span>d<span class="token punctuation">;</span><span class="token function">arcs</span><span class="token punctuation">(</span> nodes<span class="token punctuation">,</span>nodes<span class="token punctuation">)</span><span class="token operator">:</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>f<span class="token punctuation">;</span> <span class="token punctuation">!</span>c为容量<span class="token punctuation">,</span>b为单位运价<span class="token punctuation">;</span>endsetsdata<span class="token operator">:</span>d<span class="token operator">=</span><span class="token number">14000</span>o <span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">;</span>b <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>c <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span>enddatacalc<span class="token operator">:</span><span class="token function">b</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>）<span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">3</span> <span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">4</span> <span class="token punctuation">;</span><span class="token function">b</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token function">c</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>endcalcmin <span class="token operator">=</span><span class="token operator">@</span> <span class="token function">sum</span><span class="token punctuation">(</span> arcs<span class="token operator">:</span>b<span class="token operator">*</span> f<span class="token punctuation">)</span><span class="token punctuation">;</span>e <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token function">nodes</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">:</span><span class="token operator">@</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">nodes</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">@</span> <span class="token function">sum</span><span class="token punctuation">(</span> <span class="token function">nodes</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">,</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token function">d</span><span class="token punctuation">(</span> <span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">@</span> <span class="token keyword">for</span><span class="token punctuation">(</span>arcs<span class="token operator">:</span> <span class="token operator">@</span> <span class="token function">bnd</span><span class="token punctuation">(</span> o<span class="token punctuation">,</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拓展：</p><p><a href="https://www.notion.so/99c4c88aa25647d5a31db4f769f18426">图论相关命令：</a></p><p>计划网络图和关键路线法。</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-5.png" alt="9"></p><p><a href="https://www.imagehub.cc/image/73qFU"><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-6.png" alt="10"></a></p><h1 id="插值与拟合"><a href="#插值与拟合" class="headerlink" title="插值与拟合"></a>插值与拟合</h1><p>基本原理</p><p>插值：如何求解一个确定的函数？显然不能直接通过实验进行推理，因此可以将函数分解成无穷多的小段函数，再确定局部与整体的关系吧！</p><p>拟合：如何求解众多数据点之间的函数关系呢？拟合成具体的函数吧！</p><p>适用问题</p><ul><li>机床机件加工</li><li>判断函数最高点最低点的数值</li><li>求解函数关系</li><li>部分优化问题（最小二乘）</li></ul><p>相应解决办法</p><ul><li>分段线性插值：用直线把各点相连。</li></ul><p>公式说明：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-7.png" alt="11"><br><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-9.png" alt="13"></p><ul><li>拉格朗日插值多项式：利用拉格朗日函数</li></ul><p>公式说明：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-8.png" alt="12"></p><ul><li>样条插值</li></ul><p>文字说明（三次样条插值）：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-9.png" alt="13"></p><p>总的来讲，有matlab工具箱。</p><p>一维：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">y<span class="token operator">=</span><span class="token function">interp1</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span><span class="token string">'method'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>近似线性：</p><p>‘nearest’最近项插值<br>‘linear’线性插值</p><p>有点弯？<br>‘spline’立方样条插值<br>‘cubic’立方插值</p><p>弯曲程度较大：（三次样条插值）</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">y <span class="token operator">=</span> <span class="token function">interp1</span> <span class="token punctuation">(</span> x0 <span class="token punctuation">,</span> y0<span class="token punctuation">,</span>x<span class="token punctuation">,</span><span class="token string">'spline'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token function">spline</span><span class="token punctuation">(</span> x0 <span class="token punctuation">,</span>y0 <span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>Pp <span class="token operator">=</span> <span class="token function">csape</span><span class="token punctuation">(</span> x0 <span class="token punctuation">,</span>y0<span class="token punctuation">,</span> conds<span class="token punctuation">)</span><span class="token punctuation">;</span>pp <span class="token operator">=</span><span class="token function">csape</span><span class="token punctuation">(</span> x0 <span class="token punctuation">,</span>y0<span class="token punctuation">,</span>conds<span class="token punctuation">,</span>valconds<span class="token punctuation">)</span> <span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token function">fnval</span><span class="token punctuation">(</span> pp<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span>求插值点函数值（推荐）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>二维曲线：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">z<span class="token operator">=</span><span class="token function">interp2</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>y0<span class="token punctuation">,</span>z0<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'method'</span><span class="token punctuation">)</span>pp <span class="token operator">=</span> <span class="token function">csape</span><span class="token punctuation">(</span> <span class="token operator">|</span> x0 <span class="token punctuation">,</span>y0 <span class="token operator">|</span> <span class="token punctuation">,</span>z0 <span class="token punctuation">,</span> conds<span class="token punctuation">,</span>valconds<span class="token punctuation">)</span> <span class="token punctuation">,</span>z <span class="token operator">=</span> <span class="token function">fnval</span><span class="token punctuation">(</span> pp<span class="token punctuation">,</span><span class="token operator">|</span>x<span class="token punctuation">,</span>y<span class="token operator">|</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码附录</p><p>一维插值：(三次样条插值)</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc<span class="token punctuation">,</span>clearx0<span class="token operator">=</span><span class="token number">0.15</span><span class="token operator">:</span><span class="token number">0.01</span><span class="token operator">:</span><span class="token number">0.18</span><span class="token punctuation">;</span>yo <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">3.51</span><span class="token number">.5</span> <span class="token number">2</span> <span class="token number">.52</span><span class="token number">.8</span><span class="token punctuation">]</span><span class="token punctuation">;</span>pp <span class="token operator">=</span> <span class="token function">csape</span><span class="token punctuation">(</span> x0 <span class="token punctuation">,</span>y0）<span class="token comment">%默认的边界条件,Lagrange边界条件</span>format long gxishu <span class="token operator">=</span> pp<span class="token punctuation">.</span>coefs <span class="token comment">%显示每个区间上三次多项式的系数</span>s <span class="token operator">=</span> <span class="token function">quadl</span><span class="token punctuation">(</span><span class="token function">e</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token function">ppval</span><span class="token punctuation">(</span> pp<span class="token punctuation">,</span>t<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0.15</span><span class="token punctuation">,</span><span class="token number">0</span> <span class="token number">.18</span>）<span class="token comment">%求积分</span>format<span class="token comment">%恢复短小数的显示格式</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二维插值：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clear<span class="token punctuation">,</span>clcx <span class="token operator">=</span><span class="token number">100</span><span class="token operator">:</span><span class="token number">100</span> <span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">;</span>y <span class="token operator">=</span><span class="token number">100</span><span class="token operator">:</span><span class="token number">100</span><span class="token operator">:</span><span class="token number">400</span> <span class="token punctuation">;</span>z<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">636</span> <span class="token number">697</span> <span class="token number">624</span> <span class="token number">478</span> <span class="token number">450</span>   <span class="token number">698</span> <span class="token number">712</span> <span class="token number">630</span> <span class="token number">478</span> <span class="token number">420</span>   <span class="token number">680</span> <span class="token number">674</span> <span class="token number">598</span> <span class="token number">412</span> <span class="token number">400</span>   <span class="token number">662</span> <span class="token number">626</span> <span class="token number">552</span> <span class="token number">334</span> <span class="token number">310</span><span class="token punctuation">]</span><span class="token punctuation">;</span>pp <span class="token operator">=</span> <span class="token function">csape</span><span class="token punctuation">(</span>ix<span class="token punctuation">,</span>yl <span class="token punctuation">,</span>z<span class="token operator">'</span><span class="token punctuation">)</span>xi <span class="token operator">=</span><span class="token number">100</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">;</span>yi <span class="token operator">=</span><span class="token number">100</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">400</span><span class="token punctuation">;</span>cz <span class="token operator">=</span> <span class="token function">fnval</span><span class="token punctuation">(</span>pp<span class="token punctuation">,</span>ixi<span class="token punctuation">,</span>yi<span class="token operator">|</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span> cz <span class="token operator">=</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span> <span class="token function">max</span><span class="token punctuation">(</span> cz<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">%找最高点的地址</span>x <span class="token operator">=</span> <span class="token function">xi</span><span class="token punctuation">(</span> <span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">,</span>y <span class="token operator">=</span><span class="token function">yi</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>zmax <span class="token operator">=</span> <span class="token function">Cz</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">,</span><span class="token number">j</span><span class="token punctuation">)</span><span class="token comment">%求最高点的坐标</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最小二乘拟合：（线性）</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">x<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">19</span> <span class="token number">25</span> <span class="token number">31</span> <span class="token number">38</span> <span class="token number">44</span><span class="token punctuation">]</span><span class="token operator">'</span><span class="token punctuation">;</span>y<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">19.032</span><span class="token number">.349</span><span class="token number">.073</span><span class="token number">.397</span><span class="token number">.8</span><span class="token punctuation">]</span><span class="token operator">'</span><span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">,</span>x<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>ab <span class="token operator">=</span>r<span class="token operator">\</span>vx0 <span class="token operator">=</span><span class="token number">19</span><span class="token operator">:</span><span class="token number">0</span> <span class="token number">.1</span><span class="token operator">:</span><span class="token number">44</span> <span class="token punctuation">;</span>y0 <span class="token operator">=</span><span class="token function">ab</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token function">ab</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> x0<span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token function">plot</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span><span class="token string">'o'</span> <span class="token punctuation">,</span>x0 <span class="token punctuation">,</span> y0 <span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最小二乘优化：lsqlin优化、lsqcurvefit优化、lsqnonlin、lsqnonneg</p><p>拓展</p><h1 id="微分方程建模（预测）"><a href="#微分方程建模（预测）" class="headerlink" title="微分方程建模（预测）"></a>微分方程建模（预测）</h1><p>基本原理</p><p>列方程解决实际问题；多元方程组求解</p><p>适用问题</p><p>1.火箭的发射，三级火箭的作用（应用动量守恒、能量守恒等原理）；</p><p>2.建立人口模型：</p><p>Malthus模型：</p><p>结合自然常数，联系每个个体，利用常微分方程解决；</p><p>阻碍增长模型：<br>人口增长的导函数不一定是线性的，可能会有环境中的最大人口数量的限制；</p><p>模型推广：人口增长率为非线性函数，考虑多方面因素：</p><p>放射性废料的处理；</p><p>相应解决办法</p><p>人口模型：非线性最小二乘计算、线性最小二乘计算、向前差分获得差分方程</p><p>非线性：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc<span class="token punctuation">,</span>cleara <span class="token operator">=</span><span class="token function">textread</span><span class="token punctuation">(</span> <span class="token string">'data4 .txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%把原始数据保存在纯文本文件 data4.txt中x = a([2:2:6],:)';号提出人口数据</span>x <span class="token operator">=</span> <span class="token function">nonzeros</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%去掉后面的0,并变成列向量t =[1790:10:2000]';</span>to <span class="token operator">=</span><span class="token function">t</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x0 <span class="token operator">=</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>fun <span class="token operator">=</span> <span class="token function">e</span> <span class="token punctuation">(</span> cs<span class="token punctuation">,</span>td<span class="token punctuation">)</span><span class="token function">cs</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>八<span class="token number">1</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token function">cs</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token number">0</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">exp</span><span class="token punctuation">(</span> <span class="token operator">-</span> <span class="token function">cs</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> td <span class="token operator">-</span> t0 <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">% cs(1) =xm,cs(2)= r</span>cs <span class="token operator">=</span> <span class="token function">lsqcurvefit</span><span class="token punctuation">(</span> fun<span class="token punctuation">,</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">t</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token function">x</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token punctuation">,</span><span class="token function">zeros</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>xhat <span class="token operator">=</span> <span class="token function">fun</span><span class="token punctuation">(</span> cs<span class="token punctuation">,</span><span class="token punctuation">[</span>t<span class="token punctuation">;</span><span class="token number">2010</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">%预测已知年代和2010年的人口</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>线性：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc<span class="token punctuation">,</span> cleara <span class="token operator">=</span> <span class="token function">textread</span><span class="token punctuation">(</span><span class="token string">'data4 .txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%把原始数据保存在纯文本文件 data4 .txt中x = a([2:2:6],:)'; x = nonzeros(x);</span>t<span class="token operator">=</span><span class="token punctuation">[</span> <span class="token number">1790</span><span class="token operator">:</span><span class="token number">10</span><span class="token operator">:</span><span class="token number">2000</span><span class="token punctuation">]</span><span class="token operator">'</span><span class="token punctuation">;</span>a <span class="token operator">-</span> <span class="token punctuation">[</span> <span class="token function">ones</span><span class="token punctuation">(</span> <span class="token number">21</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>，<span class="token operator">-</span><span class="token function">x</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token function">diff</span><span class="token punctuation">(</span> ×<span class="token punctuation">)</span><span class="token operator">./</span><span class="token punctuation">(</span> <span class="token number">2</span> <span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">)</span><span class="token number">10</span><span class="token punctuation">;</span>cs <span class="token operator">=</span>a lb<span class="token punctuation">;</span>r <span class="token operator">=</span> <span class="token function">cs</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>xm <span class="token operator">=</span>r<span class="token operator">/</span><span class="token function">cs</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>差分：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc<span class="token punctuation">,</span>cleara<span class="token operator">=</span><span class="token function">textread</span><span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>x <span class="token operator">=</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">2</span><span class="token operator">:</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token operator">:</span><span class="token punctuation">)</span><span class="token string">'; x = nonzeros(x) ;t=[1790:10:2000]'</span><span class="token punctuation">;</span>a <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token function">ones</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>，<span class="token operator">-</span>×<span class="token punctuation">(</span> <span class="token number">1</span> <span class="token punctuation">;</span><span class="token keyword">end</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>b <span class="token operator">=</span> <span class="token function">diff</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token operator">./</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token keyword">end</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>cs <span class="token operator">=</span>a b<span class="token punctuation">;</span>r <span class="token operator">=</span><span class="token function">cs</span><span class="token punctuation">(</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> xm <span class="token operator">=</span>r <span class="token operator">/</span><span class="token function">cs</span><span class="token punctuation">(</span> <span class="token number">2</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码附录</p><p>拓展</p><h1 id="数理统计"><a href="#数理统计" class="headerlink" title="数理统计"></a>数理统计</h1><p>基本原理</p><p>以概率论为基础，从少数的数据判断整体的变化，少量数据确定整体的全部特征。</p><p>基本：参数估计、假设检验</p><p>前提条件：求解置信区间：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-11.png" alt="14"></p><p>经验分布函数：<br>坐标纸上绘制离散的数据，通过阶梯式的方法连接；</p><p><strong>Q-Q图，经验函数（检验拟合优度）</strong></p><p>计算步骤：</p><p>1.将x1,x2,…,xn依大小顺序排列成x1≤x2≤…≤xn</p><p>2.取y=1/F((i-1/2)/n) ,i =1 ,2,…,n。<br>3．将(yi,xi ) ,i = 1 ,2,…,n,这n个点画在直角坐标图上。<br>4.如果这n个点看起来呈一条45°角的直线,从(0,0)到(1,1)分布,则x1,x2…xn拟合分布F(x)的效果很好。</p><p>柯尔莫哥洛夫检验：<br>对曲线的拟合效果进行直接的分析，分析构造出的函数值与离散数据的差值的极限，区别于之前的分析离散数据的递推公式。</p><p>秩和检验：<br>1.将两个样本混合起来,按照数值大小统一编序,由小到大,每个数据对应的序数称为秩。</p><p>2.计算取自总体X的样本所对应的秩之和,用T表示。（取最小）<br>3．根据n ,n,与水平α,查秩和检验表,得秩和下限T与上限 T。（不同条件下自变量对应空白数据的秩数之和）<br>4．如果T≤T或T≥T,,则否定假设H,认为X,Y两总体分布有显著差异</p><p>。否则认为X、Y两总体分布在水平α下无显著差异。</p><p>Bootstrap方法</p><p>对极少的数据进行抽样处理（如放回抽样），得到更多样本后（n≥1000）,对各组数据的中位数进行标准差处理，从而分析精度。</p><p>适用问题</p><ul><li>求解置信区间</li><li>检验是否满足正态分布、泊松分布</li><li>两种分布的比较，判断是否一致</li><li>极少数据估测分布情况</li><li>对未知参数通过公式进行估算</li></ul><p>相应解决办法</p><p>代码附录</p><p>假设检验命令：<br>[ h,p,ci] = ttest( x0 , mu ,0 .05)</p><p>参数估计命令：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">t <span class="token operator">=</span><span class="token punctuation">[</span> mu <span class="token operator">-</span>sig <span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">tinv</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span>alpha <span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span> <span class="token punctuation">,</span>mu <span class="token operator">+</span>sig <span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">tinv</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">-</span>alpha <span class="token operator">/</span><span class="token number">2</span> <span class="token punctuation">,</span>n <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Q-Q图命令：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token function">qqplot</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>pd<span class="token punctuation">)</span><span class="token comment">%其中a为数据，pd=ProbDisUnivParam('normal',[xbar s])，即定义正态分布</span><span class="token comment">%xbar=mean(a),s=std(a),此为利用matlab工具箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>秩和检验命令：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc，clearx <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">41.542</span><span class="token number">.040</span> <span class="token number">.042</span> <span class="token number">.542</span><span class="token number">.042</span><span class="token number">.242</span><span class="token number">.742</span> <span class="token number">.141</span> <span class="token number">.4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">41.241</span><span class="token number">.842</span><span class="token number">.441</span><span class="token number">.641</span><span class="token number">.741</span> <span class="token number">.3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>yx <span class="token operator">=</span><span class="token punctuation">[</span>y<span class="token punctuation">,</span>x<span class="token punctuation">]</span> <span class="token punctuation">;</span> yxr <span class="token operator">=</span> <span class="token function">tiedrank</span><span class="token punctuation">(</span>yx<span class="token punctuation">)</span><span class="token comment">%计算秩</span>yr <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span> <span class="token function">yxr</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">%计算y的秩和</span><span class="token punctuation">[</span>p<span class="token punctuation">,</span>h<span class="token punctuation">,</span>s<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token function">ranksum</span><span class="token punctuation">(</span> y<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token comment">%利用Matlab工具箱直接进行检验</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拓展</p><h1 id="时间序列（趋势预测）"><a href="#时间序列（趋势预测）" class="headerlink" title="时间序列（趋势预测）"></a>时间序列（趋势预测）</h1><p>基本原理</p><p>将预测对象按照时间顺序排列，根据现有和过去的时间序列特点规律，推断今后变化趋势、变化规律。</p><p><strong>平均移动法（一次、二次）（近期预测）</strong></p><p>如何实现？</p><p>一次：选定合适的移动区间值N，从区间左端向右端一步一步推算出第N+2的自变量点的预测值（移动区间内对数据求平均值），最后得到想要的结果。</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-12.png" alt="15"></p><p>二次：在一次进行计算的基础上，利用计算得到的数据再次进行平均移动计算。</p><p>检验方法：预测标准误差公式：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-13.png" alt="16"></p><p>一次指数平滑</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-14.png" alt="17"></p><p>α：0-1之间选择，越大修正幅度越大，越小修正幅度越小，根据已有曲线的波动程度进行选择（0.1-0.5 0.6-0.8），检验方法同上。</p><p>二次指数平滑，后期具有直线的趋势：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-15.png" alt="18"></p><p>计算值再次参与指数平滑。</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-16.png" alt="19"></p><p>三次指数平滑，适用曲线，不再赘述。</p><p>指数平滑之前可以进行差分处理，即</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitledbbca6dcd43f105c2.png" alt="20"></p><p>适用问题</p><ul><li>短期的时间预测（平均移动法）</li><li>未来趋势成曲线、直线（指数平滑）</li><li>季度问题的预测（ARIMA季节性序列求解）</li></ul><p>相应解决办法</p><p>代码附录</p><p>平均移动法：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc<span class="token punctuation">,</span>cleary <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">533.8</span><span class="token punctuation">,</span><span class="token number">574.6</span><span class="token punctuation">,</span><span class="token number">606.9</span>，<span class="token number">649.8</span><span class="token punctuation">,</span><span class="token number">705.1</span><span class="token punctuation">,</span><span class="token number">772.0</span><span class="token punctuation">,</span><span class="token number">816.4</span><span class="token punctuation">,</span><span class="token number">892.7</span><span class="token punctuation">,</span><span class="token number">963.9</span><span class="token punctuation">,</span><span class="token number">1015.1</span><span class="token punctuation">,</span><span class="token number">1102.7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>m <span class="token operator">=</span> <span class="token function">length</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>n <span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">% n为移动平均的项数</span><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span><span class="token number">1</span> <span class="token operator">:</span><span class="token function">length</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token comment">% 由于n的取值不同,因此下面使用了细胞数组</span><span class="token keyword">for</span> <span class="token number">j</span> <span class="token operator">=</span><span class="token number">1</span><span class="token operator">:</span>m<span class="token operator">-</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token number">1</span>yhat <span class="token punctuation">{</span><span class="token function">il</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token number">j</span><span class="token operator">:</span><span class="token number">j</span> <span class="token operator">+</span><span class="token function">n</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">h</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token function">y12</span><span class="token punctuation">(</span> <span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> yhat <span class="token punctuation">{</span><span class="token function">il</span> <span class="token punctuation">(</span> <span class="token keyword">end</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%提出12月的预测值</span><span class="token function">s</span><span class="token punctuation">(</span> <span class="token number">i</span> <span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token function">mean</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token function">n</span><span class="token punctuation">(</span> <span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token keyword">end</span><span class="token punctuation">)</span> <span class="token operator">-</span>yhat<span class="token punctuation">{</span><span class="token function">il</span><span class="token punctuation">(</span> <span class="token number">1</span> <span class="token operator">:</span><span class="token keyword">end</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.^</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%求预测的标准</span>误差<span class="token keyword">end</span>y12，s <span class="token comment">%分别显示两种方法的预测值和预测的标准误差</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二次指数平滑：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab">clc<span class="token punctuation">,</span>clearyt <span class="token operator">=</span><span class="token function">load</span><span class="token punctuation">(</span> <span class="token string">'fadian.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%原始发电总量数据以列向量的方式存放在纯文本文件中n = length(yt) ,alpha = 0.3 ; st1(1） =yt(1); st2(1) =yt(1);</span><span class="token keyword">for</span> <span class="token number">i</span> <span class="token operator">=</span><span class="token number">2</span><span class="token operator">:</span>n<span class="token function">st1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">=</span> alpha <span class="token operator">*</span><span class="token function">yt</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span> <span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> alpha<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">sti</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">st2</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">=</span> alpha <span class="token operator">*</span> <span class="token function">st1</span><span class="token punctuation">(</span><span class="token number">i</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> alpha<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">st2</span><span class="token punctuation">(</span><span class="token number">i</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">end</span><span class="token function">xlswrite</span><span class="token punctuation">(</span> <span class="token string">'fadian.xls'</span><span class="token punctuation">,</span><span class="token punctuation">[</span> st1<span class="token operator">'</span><span class="token punctuation">,</span>st2<span class="token operator">'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">%把数据写入表单Sheet1中的前两列</span>at <span class="token operator">=</span><span class="token number">2</span> <span class="token operator">*</span>st1 <span class="token operator">-</span>st2 <span class="token punctuation">;</span>bt <span class="token operator">=</span>alpha八<span class="token number">1</span> <span class="token operator">-</span> alpha<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span> st1 <span class="token operator">-</span>st2<span class="token punctuation">)</span><span class="token punctuation">;</span>yhat <span class="token operator">=</span>at <span class="token operator">+</span>bt <span class="token punctuation">;</span><span class="token comment">%最后的一个分量为1986年的预测值</span><span class="token function">xlswrite</span><span class="token punctuation">(</span><span class="token string">'fadian.xls'</span><span class="token punctuation">,</span>yhat<span class="token operator">'</span> <span class="token punctuation">,</span><span class="token string">'sheet1'</span><span class="token punctuation">,</span><span class="token string">'c2'</span><span class="token punctuation">)</span> <span class="token comment">%把预测值写入第3列</span>str <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">'C'</span><span class="token punctuation">,</span><span class="token function">int2str</span><span class="token punctuation">(</span>n <span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%准备写1987年的预测值位置的字符串</span><span class="token function">xlswrite</span><span class="token punctuation">(</span><span class="token string">'fadian.xls'</span><span class="token punctuation">,</span><span class="token function">at</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token function">bt</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">,</span> <span class="token string">'sheet1'</span> <span class="token punctuation">,</span>str<span class="token punctuation">)</span><span class="token comment">%把1987年的预测值写到相应位置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拓展</p><h1 id="支持向量机"><a href="#支持向量机" class="headerlink" title="支持向量机"></a>支持向量机</h1><p>基本原理</p><p>1.求解均指向量；</p><p>2.对所有数据点进行标准化处理；</p><p>3.利用不同函数对应支持的向量机进行处理，得到支持向量；</p><p>4.得到线性或者其他类分类函数，带入对应目标向量值，判别属于的类别；</p><p>适用问题</p><ul><li>聚类模型,城市分类问题，根据多重指标对数据进行划分；</li><li>疾病诊断（症状划分）</li></ul><p>相应解决办法</p><p>代码附录</p><p>疾病诊断部分：</p><pre class="line-numbers language-matlab" data-language="matlab"><code class="language-matlab"><span class="token comment">%原始数据cancerdata.txt可在网上下载,数据中的B替换成1,M替换成-1,X替换成⒉,删</span><span class="token comment">%除了分割符”,替换后的数据命名成 cancerdata2.txt</span>clc<span class="token punctuation">,</span>cleara <span class="token operator">=</span> <span class="token function">load</span><span class="token punctuation">(</span> <span class="token string">'cancerdata2.txt'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">a</span><span class="token punctuation">(</span> <span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">%删除第一列病例号</span>gind <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%读出良性肿瘤的序号</span>bind <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span> <span class="token function">a</span><span class="token punctuation">(</span> <span class="token operator">:</span><span class="token punctuation">,</span><span class="token number">1</span>）<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%读出恶性肿瘤的序号</span>training <span class="token operator">=</span><span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">:</span><span class="token number">500</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%提出已知样本点的数据</span>training <span class="token operator">=</span>training<span class="token operator">'</span><span class="token punctuation">;</span><span class="token comment">%为了进行数据标准化,这里进行了转置</span><span class="token punctuation">[</span> train<span class="token punctuation">,</span>ps<span class="token punctuation">]</span> <span class="token operator">=</span><span class="token function">mapstd</span><span class="token punctuation">(</span> training<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">%已分类数据标准化</span><span class="token function">group</span><span class="token punctuation">(</span>gind<span class="token punctuation">)</span><span class="token operator">=</span>l <span class="token punctuation">;</span> <span class="token function">group</span><span class="token punctuation">(</span> bind<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">%已知样本点的类别标号</span>group <span class="token operator">=</span> group<span class="token operator">'</span><span class="token punctuation">;</span> <span class="token comment">%转换成列向量</span>xa0 <span class="token operator">=</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">501</span><span class="token operator">:</span><span class="token number">569</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token operator">:</span><span class="token keyword">end</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">% 提出待分类数据</span>xa <span class="token operator">=</span> xa0<span class="token operator">'</span><span class="token punctuation">;</span> xa <span class="token operator">=</span> <span class="token function">mapstd</span><span class="token punctuation">(</span> <span class="token string">'apply'</span><span class="token punctuation">,</span>xa<span class="token punctuation">,</span>ps<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%待分类数据标准化</span>s <span class="token operator">=</span> <span class="token function">svmtrain</span><span class="token punctuation">(</span>train<span class="token operator">'</span><span class="token punctuation">,</span>group，<span class="token string">'Method'</span> <span class="token punctuation">,</span><span class="token string">' sMo'</span> <span class="token punctuation">,</span> <span class="token string">'Kernel_Function'</span> <span class="token punctuation">,</span> <span class="token string">' quadratic'</span><span class="token punctuation">)</span><span class="token comment">%使用序列最小化方法训练支持向量机的分类器,如果使用二次规划的方法训练支持向量机则无法求解</span>sv_index <span class="token operator">=</span> s<span class="token punctuation">.</span>SupportVectorIndices<span class="token operator">'</span> <span class="token comment">% 返回支持向量的标号</span>beta <span class="token operator">=</span> s<span class="token punctuation">.</span>Alpha<span class="token operator">'</span><span class="token comment">%返回分类函数的权系数</span>b<span class="token operator">=</span>s<span class="token punctuation">.</span>Bias <span class="token comment">%返回分类函数的常数项</span>mean_and_std_trans <span class="token operator">=</span> s<span class="token punctuation">.</span>ScaleData <span class="token comment">%第1行返回的是已知样本点均值向量的相反数,第2行返回的是标准差向量的倒数</span>check <span class="token operator">=</span> <span class="token function">svmclassify</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span>train<span class="token operator">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%验证已知样本点</span>err_rate <span class="token operator">=</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token function">sum</span><span class="token punctuation">(</span> group <span class="token operator">=</span> <span class="token operator">=</span> check <span class="token punctuation">)</span><span class="token operator">/</span><span class="token function">Alength</span><span class="token punctuation">(</span> group<span class="token punctuation">)</span><span class="token comment">%计算错判率</span>solution <span class="token operator">=</span> <span class="token function">svmclassify</span><span class="token punctuation">(</span> s<span class="token punctuation">,</span>xa<span class="token operator">'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">%进行待判样本点分类</span>solution <span class="token operator">=</span> solution<span class="token operator">'</span>sg <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span> solution <span class="token operator">=</span> <span class="token operator">=</span><span class="token number">1</span>）<span class="token number">8</span>求待判样本点中的良性编号sb <span class="token operator">=</span> <span class="token function">find</span><span class="token punctuation">(</span>solution <span class="token operator">=</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>）<span class="token comment">%求待判样本点中的恶性编号</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>拓展</p>]]></content>
      
      
      <categories>
          
          <category> 数学建模 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> 自我提升 </tag>
            
            <tag> 概念 </tag>
            
            <tag> 数学建模 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>计算机组成原理</title>
      <link href="/2021/10/05/ji-suan-ji-zu-cheng-yuan-li/"/>
      <url>/2021/10/05/ji-suan-ji-zu-cheng-yuan-li/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机组织与结构"><a href="#计算机组织与结构" class="headerlink" title="计算机组织与结构"></a>计算机组织与结构</h1><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这一板块将会分成两个部分，即中文版的学习笔记以及英文版的日常学习笔记</p><p><a href="https://www.notion.so/8bc37485d00744efaba756760d707f66">深入理解计算机系统</a></p><p><a href="https://www.notion.so/65a39b294f0c466ab3c9bbce7603785e">计算机组成原理</a></p><h2 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h2><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitledf1fae6221b9de927.png" alt="1"></p><p>系统构造：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-1beabd8b2ee7d63e3.png" alt="2"></p><p>冯诺依曼计算机结构：<br>输入、输出设备、运算器、处理器、存储</p><h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><p>function:</p><p>Process Management: control,scheduling,synchronization,communication;<br>Memory Management:<br>control,Protection,mapping,expansion;<br>Device Management:<br>device opreation,virtual devices,cache management;<br>File Management:<br>User Interface</p><h2 id="Date-Representation-and-Encoding"><a href="#Date-Representation-and-Encoding" class="headerlink" title="Date Representation and Encoding"></a>Date Representation and Encoding</h2><p>电压(方形波等等)，纸带（类似于打点计时器），磁性介质（振动情况）表示位的运算。</p><h3 id="why-binary-and-encode"><a href="#why-binary-and-encode" class="headerlink" title="why binary and encode"></a>why binary and encode</h3><p>Represent the elements of any finite set (numbers,strings,pictures,etc.)</p><p>Bit:0 or 1</p><p>1 Byte=8 bits</p><p>1 Word=32Bytes</p><p>Halfword,Doubleworld</p><p>二进制、十六进制、八进制相互转换；</p><p>Example：<br>32 bits computer (4 bytes)</p><p>limited addresses to 4GB(2^32)</p><p>The size of pointer : </p><p>32Bytes,64Bytes: 4Bits;</p><p>86×64bytes ： 8Bits;</p><h3 id="Byte-Ordering"><a href="#Byte-Ordering" class="headerlink" title="Byte Ordering"></a>Byte Ordering</h3><p>Convention:</p><p>Big Endian :</p><p>低位高地址</p><p>Little Endian :</p><p>低位低地址</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-2fab2e266f5cd9257.png" alt="3"></p><h3 id="Dissassembly"><a href="#Dissassembly" class="headerlink" title="Dissassembly"></a>Dissassembly</h3><p>Text representation of binary machine code;</p><p>Generatated by program that reads the machine code;</p><h3 id="Boolean-Algebra"><a href="#Boolean-Algebra" class="headerlink" title="Boolean Algebra"></a>Boolean Algebra</h3><p>实现集合之间的运算，利用位进行与非计算。</p><p>逻辑计算</p><h3 id="Shift-Operations"><a href="#Shift-Operations" class="headerlink" title="Shift Operations"></a>Shift Operations</h3><p>Arguments: 01000010</p><p>&lt;&lt;3:00010 000</p><p>log.&gt;&gt;2 :00 11000</p><p>Arith.&gt;&gt; 2: 00 011000</p><p>Arguments:1010010</p><p>&lt;&lt; 3 : 00010 000</p><p>Log.&gt;&gt; 2 : 00 101000</p><p>Arith.&gt;&gt; 2 : 11 101000（11 为前置符号位的补位）</p><h2 id="System-Functionality"><a href="#System-Functionality" class="headerlink" title="System Functionality"></a>System Functionality</h2><p>Process Management:</p><ul><li>Process control</li><li>Process scheduling(时序)</li><li>Process synchronization(同步)</li><li>Process communication</li></ul><p>Memory Management:</p><ul><li>Memory Control</li><li>Memory Protection</li><li>Memory Mapping</li><li>Memory Expansion</li></ul><p>Device Management</p><ul><li>Device Operation</li><li>Virtual Devices</li><li>Cache Management</li></ul><p>File Management</p><ul><li>File Storage Management</li><li>Directory Management</li><li>Read/Write Manage</li><li>Storage Control</li></ul><p>User Interface</p><ul><li>System Command</li><li>Programmable Interface</li><li>Graphical Interface</li></ul><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-34766c63ef0c9a1da.png" alt="4"></p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-4527a70751a9bd80b.png" alt="5"></p><h2 id="Inter-Data-Types"><a href="#Inter-Data-Types" class="headerlink" title="Inter Data Types"></a>Inter Data Types</h2><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-5aceac806dba56610.png" alt="6"></p><p>无符号数：表示计算机的存储地址；</p><p>转化公式：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-63503fae6fd087958.png" alt="7"></p><p>有符号数：<br>补码进行储存（most significant bit 存储符号位）</p><p>（公式插入）</p><h3 id="有符号数－-gt-无符号数：转化为二进制数后在进行转换"><a href="#有符号数－-gt-无符号数：转化为二进制数后在进行转换" class="headerlink" title="有符号数－>无符号数：转化为二进制数后在进行转换"></a>有符号数－&gt;无符号数：转化为二进制数后在进行转换</h3><p>有符号数赋值给无符号数、或者和无符号数参加运算会发生转换(隐式)，结果往往为无符号数；<br>例子：0==0U 结果为unsigned  </p><p>&lt;,&gt;同理，当无符号数介入运算之后，结果为无符号数；</p><h3 id="Integer-Arithmetic"><a href="#Integer-Arithmetic" class="headerlink" title="Integer Arithmetic"></a>Integer Arithmetic</h3><p>两个数相加发生进位怎么办？</p><p>删除进位，有50%的概率产生进位。</p><p>（插入图片）</p><p>为什么数据溢出之后计算机依旧可以正常使用？<br>存在阿贝尔群，满足：</p><ul><li>Closed under addition</li><li>Communicative</li><li>Associative(结合律)</li><li>0 is additive identity</li><li>every element has additive inverse</li></ul><p>有符号数溢出问题：<br>删除符号位，只保留w位。有符号数的相加和无符号数的相加（二进制）相同</p><p>乘法运算：</p><p>无论是有符号数之间相乘还是无符号数之间相乘，最后的结果都会相同，都是删除多出的进位。</p><p>除法运算：<br>左移运算；</p><h2 id="浮点数的计算和存储"><a href="#浮点数的计算和存储" class="headerlink" title="浮点数的计算和存储"></a>浮点数的计算和存储</h2><p>二进制表示浮点数：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-788cd4a926c8c977b.png" alt="8"></p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-8d19876288645ed8a.png" alt="9"></p><p>M:1.0-2.0</p><p>浮点数的储存，考虑大端小端：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-9769628d23c620d85.png" alt="10"></p><p>计算题：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-111f25d62dd177081d.png" alt="11"></p><p>s:符号位</p><p>NaN:not a number</p><p>E = Exp – Bias</p><p>Bias = 2^(k-1) - 1, where k is number of exponent bits<br>Single precision: 127 (Exp: 1…254, E: -126…127)<br>Double precision: 1023 (Exp: 1…2046, E: -1022…1023)</p><p>.xxx…x: bits of frac</p><p>example:</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-122d6f4eabefda4bb4.png" alt="12"></p><h3 id="Denormalized-Values"><a href="#Denormalized-Values" class="headerlink" title="Denormalized Values"></a>Denormalized Values</h3><p>Condition: exp = 000…0</p><p>Exponent value: E = –Bias + 1 (instead of E = 0 – Bias) (For seamless)<br>Significand coded with implied leading 0: M = <a href="http://0.xxx/">0.xxx</a>…x2<br>xxx…x: bits of frac</p><h3 id="Special-Values"><a href="#Special-Values" class="headerlink" title="Special Values"></a>Special Values</h3><p>Condition: exp = 111…1</p><p>Case: exp = 111…1, frac = 000…0<br>Represents value  (infinity)<br>S=0, +       S=1, - <br>Operation that overflows<br>Both positive and negative<br>E.g., 1.0/0.0 = −1.0/−0.0 = +,  1.0/−0.0 = −</p><p>example:</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-13c3fb28920ddba9dd.png" alt="13"></p><p>浮点数进行计算的时候，如果相乘M大于2，结果会发生右移，部分位缺失；</p><p>相加溢出：&gt;2时发生右移，&lt;1时会发生左移；</p><h3 id="浮点数运算"><a href="#浮点数运算" class="headerlink" title="浮点数运算"></a>浮点数运算</h3><p>加法：</p><p>满足：交换律、计算封闭，单调性；</p><p>不满足：结合律；</p><p>乘法：<br>满足：交换律，有幺元</p><p>不满足：结合律，</p><p>不一定：分配律、单调性；</p><h2 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h2><p>ALU 算数逻辑运算部件；</p><p>功能：</p><ul><li>performs arithmetic and logical operations on data</li><li>bring data into ALU for it to process and then totake the results back out;</li><li></li></ul><p>进行简单的逻辑计算，存储二进制数据，进行简单的布尔代数逻辑运算</p><p>输入：control unit ; registers</p><p>输出：Flag(the result of an operation ) ; Registers</p><p>Flag：值为1时代表overflow </p><h1 id="信息处理，指令"><a href="#信息处理，指令" class="headerlink" title="信息处理，指令"></a>信息处理，指令</h1><p>指令编码；</p><p>寻址方式；</p><p>指令的使用方法；</p><p>RISC；</p><h2 id="指令编码"><a href="#指令编码" class="headerlink" title="指令编码"></a>指令编码</h2><h3 id="指令的性质"><a href="#指令的性质" class="headerlink" title="指令的性质"></a>指令的性质</h3><p>指令集：存储机器指令；</p><p>指令周期：</p><p>确定指令的地址→内存里调出指令，将指令存储在IR中→送到CU→译码（decode）→找到操作数的地址→取出操作数（寄存器）→计算，将结果送回寄存器→计算下一条指令的地址→重复刚才的操作；</p><h3 id="指令组成部分："><a href="#指令组成部分：" class="headerlink" title="指令组成部分："></a>指令组成部分：</h3><p>操作码：（Operation code）</p><p>作用：明确操作的步骤；</p><p>源操作数（source operand reference）</p><p>结果操作数：（result operand reference）</p><p>下一个指令数：（next instruction reference）</p><p>32位机器：</p><p>例：cond(31:28) 执行的条件码；</p><p>type(27:26) 指令类型码；</p><p>opcode(24:21) 指令操作码；</p><p>S(20) 判断操作结果是否影响CPSR(即是否影响flag)；</p><p>Ra(19:16) 包含第一个操作数的寄存器的编码；(可以判断出来有多少个编程使用的寄存器)</p><p>Rd(15:12) 目标寄存器的编码；</p><p>Operand2(11:0) 指令的第二个操作数；</p><p>Opcode：</p><p>ADD，SUB，DIV，MUL，LOAD，STOR</p><p>Instruction types</p><p>Data processing;</p><p>Data movement;</p><p>Data storage;</p><p>Control;</p><h3 id="操作数类型"><a href="#操作数类型" class="headerlink" title="操作数类型"></a>操作数类型</h3><p>三类：<br>内存地址；</p><p>寄存器；</p><p>立即数；</p><p>寄存器文件：虚拟的</p><p>指令寻址方式：Immediate</p><p>减少使用%esp,%eap的寄存器，避免影响指针、栈结构等等；</p><p>移动数据：</p><p>1.Moving data:<br>“mov1 Source .d”</p><p>2.movl</p><ul><li>imm<ul><li>Reg: movl %$0x4,%eax</li><li>Mem movl $-147</li></ul></li><li>Reg<ul><li>Reg,Move</li></ul></li><li>Mem<ul><li>register: movl (%eax);</li></ul></li></ul><p>Perform arithmetic function on register or memenry</p><p>操作数不包括立即数</p><p>整数相关运算以及指令具体</p><p>算术移位、逻辑移位；</p><p>ALU的flag问题：<br>当前执行的指令对于程序之后的状态是否有影响；</p><p>状态分类：</p><p>CF：是否产生进位；</p><p>ZF：The most recent operation yielded zero;</p><p>SF：negative value<br>OF：Overflow check</p><p>Jump Struction</p><p>无条件跳转，可以添加后缀条件（即根据上一条语句的flag值变化进行约束）</p><p>StackFrame(栈针)</p><h2 id="寻址方式（Addressing-Modes-and-Format）"><a href="#寻址方式（Addressing-Modes-and-Format）" class="headerlink" title="寻址方式（Addressing Modes and Format）"></a>寻址方式（Addressing Modes and Format）</h2><h3 id="常规寻址方式"><a href="#常规寻址方式" class="headerlink" title="常规寻址方式"></a>常规寻址方式</h3><ul><li>立即数寻址</li><li>Direct Addressing(直接寻址)</li><li>Indirect（间接寻址，即二级指针，访问两次内存，可存储区域存储数据地址）</li><li>Register（寄存器寻址，速度最快）</li><li>Register Indirect（寄存器间接寻址，内存中存储寄存器存储内存的地址）</li><li>Displayment（偏移寻址）</li></ul><p>立即数寻址：<br>操作数出现在指令里。</p><p>优点：速度快</p><p>缺点：表示的数范围有限</p><p>直接寻址：<br>优点：it requires only one memory reference and no special calculation;</p><p>缺点：limited addressing space;</p><p>间接寻址：</p><p>优点：访问的范围很大</p><p>缺点：访问两次内存，非常慢</p><p>偏移寻址：<br>寄存器中借一个地址，然后对操作数进行偏移产生偏移量，地址和位移偏量求和得到数据的存储地址；</p><p>区分寻址方式</p><p>寄存器寻址：<br>优点：速度快，操作数的地址存储在指令中；</p><p>缺点：寄存器的数量过少。</p><p>寄存器的间接寻址：</p><p>优点：指令中的寄存器地址存储数据的地址；</p><p>缺点：访问了内存；</p><h2 id="偏移寻址"><a href="#偏移寻址" class="headerlink" title="偏移寻址"></a>偏移寻址</h2><p>相对寻址：（PC相对选址）</p><p>PC：program Counter ;</p><p>PC始终指向正在执行的命令的下一条命令；</p><p>相对寻址的定义：</p><p>在PC指向的地址上进行字节的增加、减少操作，以获得下一条指令的地址。</p><p>基址寄存器（base）偏移寻址：</p><p>确定base的地址，在base的地址上进行字节的加减得到新的存储地址；</p><p>变址寻址：</p><p>同偏移寻址的定义。</p><p>堆栈寻址：利用栈针，先进后出；</p><p>设置指令集：<br>考虑长度、指令类型、指令内容、指令是否产生flag、存储位置、操作数、地址范围、寄存器的数量、操作指令等等；</p><h2 id="Instruction-Usage"><a href="#Instruction-Usage" class="headerlink" title="Instruction Usage"></a>Instruction Usage</h2><p>影响指令执行的因素：</p><ul><li>condition code，表示最近一次指令执行得到的结果；（C，Z，O，S）→condition code,只有一位；</li><li>jump：跳转指令；</li></ul><p>一定要跳转到某一个label上，无条件跳转；</p><ul><li>条件分支（Translating Conditional Braches）;</li><li>循环指令（do …while while for）</li></ul><p>将高级语言转化成汇编语言，注意其中的跳转；</p><p>应用栈帧：执行子函数时，将主函数中得到的数据放入寄存器中进行储存，等到子函数执行完毕，将寄存器中存储的数据弹出；</p><p>pass procedure arguments;</p><p>store return information;</p><p>save registers for later restoration;(存储主函数下一条命令的地址)</p><p>for local storage; (CZOS)</p><p>栈帧的图片</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-1441f9343e5111a4e0.png" alt="14"></p><p>%eip PC</p><p>%esp %ebp stack pointer</p><h2 id="RICS"><a href="#RICS" class="headerlink" title="RICS"></a>RICS</h2><p>RISC 精简指令集；</p><p>CISC 复杂指令集；</p><h1 id="处理器设计"><a href="#处理器设计" class="headerlink" title="处理器设计"></a>处理器设计</h1><h2 id="Processor-Organization"><a href="#Processor-Organization" class="headerlink" title="Processor Organization"></a>Processor Organization</h2><p>CPU构成：ALU、CU；</p><p>功能：<br>Processor instruction；</p><p>Perform a act;</p><p>control time;</p><p>处理器构成：register,ALU,control unit,bus(系统总线)</p><p>bus：control bus,data bus , address bus;(传输对应的数值)</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Screenshot_20211029_090225.jpg" alt="15"></p><p>需要注意的问题：<br>1.visible－status(可以提供给用户的信息：程序状态、可用寄存器的数量)</p><p>2.register organization(可用于编程的寄存器数量、内部的结构设计)</p><p>3.Instruction set design</p><p>4.instruction encoding</p><h3 id="Y86处理器"><a href="#Y86处理器" class="headerlink" title="Y86处理器"></a>Y86处理器</h3><p>主要构成：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-1530718a3d6bea356e.png" alt="16"></p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Screenshot_20211029_092406.jpg" alt="17"></p><p>指令编码：</p><p>主要看指令码的前四位和相邻四位：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-169f0a63af0fd040ff.png" alt="18"></p><p>Register %esp is used as a stack pointer by the push, pop, call, and return instructions.</p><h2 id="Processor-Implementations"><a href="#Processor-Implementations" class="headerlink" title="Processor Implementations"></a>Processor Implementations</h2><p>执行指令经过的几个阶段：</p><p>Fetch(寻址)<br>Interrupt(中断)<br>Execute(执行)<br>Indirect(间接寻址)</p><p>具体分析过程：<br>（需要能看懂）</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-17.png" alt="19"></p><p>指令执行的大致过程：</p><p>Fetch (取指F) 访问内存</p><p>Extract the two 4-bit portions of the instruction specifier byte, referred to as icode (the instruction code) and ifun (the instruction function).（give RA,RB）</p><p>对于不需要寄存器的命令，可以通过识别命令类型来解决读取RA,RB的问题；</p><p>Decode (译码D) 可以访问寄存器。</p><p>过渡：向ALU传递signal，命令ALU对操作数进行计算，再发射signal信号对flag值进行修改；<br>Execute (执行E)</p><p>Visit Memory (访存M) 访问内存<br>Write back (写回W) 访问寄存器<br>PC update (更新PC)</p><p>举个例子：<br><strong>考试必考</strong></p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-18.png" alt="20"></p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-19.png" alt="21"></p><h2 id="Instruction-Pipeline-Optimizations"><a href="#Instruction-Pipeline-Optimizations" class="headerlink" title="Instruction Pipeline (Optimizations)"></a>Instruction Pipeline (Optimizations)</h2><p>如果不采用流水线会怎么样？<br>Delay = Combinational logic delay + register delay</p><p>产生延迟、数据的吞吐量较小，浪费存储资源；</p><p>引入流水线：</p><p>对比：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-20.png" alt="22"></p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-21.png" alt="23"></p><p>流水线：时钟信号控制，当出现时间上升沿时重复执行这条指令；</p><p>缺点：</p><p>1.每个时间周期中流水线上的各部分并不是整个时间段内一直在工作；</p><p>2.多条指令程序执行产生的流水线数据吞吐量明显下降；</p><p>Y86构建流水线执行取值、译码、执行、储存、写回的操作：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-22.png" alt="24"></p><p>F：储存下一次PC的指向地址；</p><p>D：储存最近取值的指令；</p><p>E：储存最近译码的指令；</p><p>M：储存最近执行的指令；</p><p>W：储存将要写入内存的结果数；</p><p>F：jmp,call,ret；</p><p>流水线会出现的危险：<br>1.数据依赖：</p><p>当第一条指令将操作数未写回之前赋值时使用的寄存器，会导致再次读取时发生错误</p><p>2.控制依赖：</p><p>旁路机制：</p><p>增加临时的寄存器，用来存储当时从寄存器中取出的数，防止多次读取发生错误；</p><p>流水线相较于PC</p><p>1.正在执行的指令不一定是PC指向的指令；</p><p>2.call指令不会产生流水线问题，其他的跳转指令会影响PC的值，产生流水线问题；</p><h2 id="Memory-Matters"><a href="#Memory-Matters" class="headerlink" title="Memory Matters"></a>Memory Matters</h2><p>1.memory is not unbounded;有范围限制</p><p>2.memory referencing bugs especially pernicious;出现bug会造成很大的影响</p><p>3.Memory performance is not uniform;储存需要规则限制</p><h3 id="Memory-Category"><a href="#Memory-Category" class="headerlink" title="Memory Category"></a>Memory Category</h3><p>1.semiconductor;(有电时储存，无电时清除数据)</p><p>2.magnetic,optical;（时刻保存数据）</p><h3 id="Storage-Type"><a href="#Storage-Type" class="headerlink" title="Storage Type"></a>Storage Type</h3><p>1.random access memory</p><p>Volatile</p><p>SRAM(Cache),DRAM;</p><p>2.read only memory</p><p>Non-volatile</p><p><a href="https://www.imagehub.cc/image/7OIyf"><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-23.png" alt="25"></a></p><p>ROM：只能读取记录一次，</p><p>PROM：通过编程将数据写入存储器；</p><p>PROM</p><p>可编程只读存储器，只能进行一次编程；</p><p>EPROM</p><p>可擦写可编程只读存储器</p><p>EEPROM:<br>电可擦除可编程只读存储器，少量数据存储，类似于小型的固件，对少量数据进行临时的存储；</p><p>FLASH VS EEPROM,RAM</p><p>flash更快，有更大的存储量，更为稳定；</p><h2 id="Summary-of-Memory"><a href="#Summary-of-Memory" class="headerlink" title="Summary of Memory"></a>Summary of Memory</h2><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-24.png" alt="26"></p><h3 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h3><p>特点：传统的芯片，最小单位是cell，每个cell存储一个字节的数据，有电时存储数据，</p><h3 id="SRAM"><a href="#SRAM" class="headerlink" title="SRAM"></a>SRAM</h3><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-25.png" alt="U27"></p><h3 id="DRAM-内存"><a href="#DRAM-内存" class="headerlink" title="DRAM(内存)"></a>DRAM(内存)</h3><p>由一个电容、一个晶体管构成cell，每10-100ms需要更新充电，对于外界的辐射更加敏感；</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-26.png" alt="28"></p><h3 id="memory-modules"><a href="#memory-modules" class="headerlink" title="memory modules"></a>memory modules</h3><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-27.png" alt="29"></p><h3 id="SDRAM-同步内存"><a href="#SDRAM-同步内存" class="headerlink" title="SDRAM(同步内存)"></a>SDRAM(同步内存)</h3><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-28.png" alt="30"></p><p>计算存储器的容量：</p>]]></content>
      
      
      <categories>
          
          <category> 计算机组成原理 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> 随堂笔记 </tag>
            
            <tag> 待更新 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图</title>
      <link href="/2021/10/05/tu/"/>
      <url>/2021/10/05/tu/</url>
      
        <content type="html"><![CDATA[<h1 id="图"><a href="#图" class="headerlink" title="图"></a>图</h1><p>定义</p><p>图是由两个集合顶点集V（G）和边集E（G）组成的。</p><p>无向图：没有方向的无序对</p><p>有向图、带权图</p><p>完全图：所有的点都与其他的点相连，即有n(n-1)/2条边的图</p><p>有向完全图：</p><p>稀疏图、稠密图：</p><p>子图：</p><p>相邻的节点通过边相连：两点之间的关系为邻接（该边属于图）或者关联</p><p>简单路径：当且仅当只有第一个节点和最后一个节点相等时。</p><p>连通图：每一个节点都能链接到。</p><p>连通分量：指的是无向图中的最大连通子图</p><p>强连通图：有向图中满足连通图条件的图</p><p>强连通分量：同上</p><p>生成树</p><p>一个有n个顶点的连通图构成的生成树有且只有n－1条边。</p><p>同一个连通图的生成树不一定相等。</p><h2 id="图的储存"><a href="#图的储存" class="headerlink" title="图的储存"></a>图的储存</h2><p>邻接矩阵，关系矩阵。</p><p>无向图：</p><p>顶点vi的度是邻接矩阵中第i行或第i列的元素之和，即成对角线关系</p><p>有向图：<br>vi出度：第i行元素之和</p><p>vi入度：第i列元素之和</p><p>稀疏图：通过链表进行储存，即顶点信息、边的信息、下一个关联节点的信息。</p><h2 id="图的遍历"><a href="#图的遍历" class="headerlink" title="图的遍历"></a>图的遍历</h2><p>深度优先遍历以及广度优先遍历</p><h2 id="最小生成树"><a href="#最小生成树" class="headerlink" title="最小生成树"></a>最小生成树</h2><p>定义：</p><p>所有的生成树中，代价最小的生成树（边的权值）</p><p>求法：</p><p>Prim算法：暴力求解，一条边一条边找；O(N2)</p><p>Kruskal算法：贪心，剩下的边选择最短边，直到所有的点在边上。O(e*loge) e为边数，应用并查集进行计算。</p><p>并查集：</p><p><a href="https://zhuanlan.zhihu.com/p/93647900/">https://zhuanlan.zhihu.com/p/93647900/</a></p><h2 id="最短路径问题"><a href="#最短路径问题" class="headerlink" title="最短路径问题"></a>最短路径问题</h2><p>单源最短路径：Dijstra算法，确定源点后一步一步进行计算，找出每一个最短步；</p><p>任意点对之间的最短路径：Floyd算法</p><h2 id="最长路径——关键路径"><a href="#最长路径——关键路径" class="headerlink" title="最长路径——关键路径"></a>最长路径——关键路径</h2>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> 图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树</title>
      <link href="/2021/10/05/shu/"/>
      <url>/2021/10/05/shu/</url>
      
        <content type="html"><![CDATA[<h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="定义：没有回路连通的无向图"><a href="#定义：没有回路连通的无向图" class="headerlink" title="定义：没有回路连通的无向图"></a>定义：没有回路连通的无向图</h2><p>悬挂节点、叶结点：度数为1的点；</p><p>内结点、分支节点：度数大于1的节点；</p><p>叶边、悬挂边；</p><p>性质：（彼此等价）</p><p>G是一个无向、G是一个自由树形→删除一条边之后不连通→从v到v的路径只有一条→G没有回路且有n－1条边→G是连通的且有n－1条边；</p><h2 id="森林"><a href="#森林" class="headerlink" title="森林"></a>森林</h2><p>定义：如果森林有n个节点，m个边，k个分支；</p><p>m=n-k;</p><p>推论：任何有限连通图G必有一节点数相同的自由树形，或称G的生成树；</p><p>G的基本循环的秩：得到生成边减去的边数；</p><p>最小生成树：<br>所有边的加权长度最小的；</p><p>求最短路径：贪心，注意不要构成回路；</p><h2 id="有向树"><a href="#有向树" class="headerlink" title="有向树"></a>有向树</h2><p>一个节点的入度为0，其余节点的入度均为1的弱连通有向图，称为有向树；</p><p>相关定义：根、叶（出度为0）、分支节点（出度大于1）、级（根节点到任意节点的距离）、高度；</p><p>定理：v是有向图的节点，该有向图为有向树，当且仅当v到其他任意一点的路径唯一且v的入度为0；</p><h2 id="有向森林"><a href="#有向森林" class="headerlink" title="有向森林"></a>有向森林</h2><p>正则m元有向树、m元有向树；</p><h2 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h2><p>最优二叉树：</p><p>有向有序树：</p><p>位置有向有序树：</p><p>用空串表示根节点，0表示左节点，1表示右节点；</p>]]></content>
      
      
      <categories>
          
          <category> 离散数学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> 离散数学2 </tag>
            
            <tag> 树 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线性结构</title>
      <link href="/2021/10/05/xian-xing-jie-gou/"/>
      <url>/2021/10/05/xian-xing-jie-gou/</url>
      
        <content type="html"><![CDATA[<h1 id="线性结构"><a href="#线性结构" class="headerlink" title="线性结构"></a>线性结构</h1><p>结构特点：</p><ul><li>头尾元素唯一</li><li>除头节点外都有前驱</li></ul><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>1.存储多项式的系数以及次数</p><ul><li>顺序存储，下标表示次数，元素表示系数（缺点：次数区间过大，会导致存储空间过大，空间复杂度过高）</li><li>结构数组顺序储存，顺序存储有利于多项式的加减</li></ul><p>2.线性表定义</p><p>n个数据元素构成的有限序列。</p><p>同类型数据构成的有顺序的线性结构（长度，空表，表头，表尾）</p><h3 id="顺序表"><a href="#顺序表" class="headerlink" title="顺序表"></a>顺序表</h3><p>用一组地址连续的存储单元一次存储线性表的数据元素。</p><p>删除、插入元素时间复杂度：O(n) </p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Screenshot_20210905_151738.jpg" alt="1"></p><p>稀疏矩阵的存储：<br>构建三列表，分别存储行列以及数据；</p><h3 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h3><p>数据域和地址域相结合</p><p>头结点的作用：</p><ul><li>插入、删除操作更加方便</li></ul><p>双向链表插入操作：先和后半部分相连；</p><p>经典的栈结构（插入、删除、清空、判断栈空，判断栈满）</p><p>栈结构的作用：<br>数制转换；</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><p>特点：一个元素对应多个前驱和多个后继，</p><h2 id="广义表"><a href="#广义表" class="headerlink" title="广义表"></a>广义表</h2><h2 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h2><h3 id="前缀、后缀表达式"><a href="#前缀、后缀表达式" class="headerlink" title="前缀、后缀表达式"></a>前缀、后缀表达式</h3><p>中缀：<br>操作数+操作符+操作数；</p><p>前缀：<br>操作符+操作数+操作数；</p><p>后缀：<br>操作数+操作数+操作符；</p><p>例：</p><p>a+b<em>c-d/e→-+a</em>bc/de</p><p>a+b<em>c-d/e→abc</em>+de/-</p><p>操作符优先级：<br>操作符：#  (  ^  *,/,%  +,-  )</p><p>栈内：   0  1  7  5         3    8</p><p>栈外：   0  8  6  4         2    1</p><p>转化方法：</p><p>存储两个数，遇到运算符之后对这两个数进行运算处理</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>具有一定操作的约束的线性表，旨在一端做插入、删除操作，先入后出。</p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>数组实现两个堆栈：两边向中间存储元素</p><p>单向链表实现堆栈：</p><h3 id="表达式求值"><a href="#表达式求值" class="headerlink" title="表达式求值"></a>表达式求值</h3><p>中缀表达式</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-1c06271147c7ebfdf.png" alt="2"></p><p>中缀表达式→后缀表达式</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-236946978054ddc59.png" alt="3"></p><h2 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h2><p>逻辑结构：先进先出；</p><p>存储结构：<br>假溢出：</p><p>当front&gt;0且max-1=rear，称为假溢出；</p><p>使用循环队列解决；</p><p>循环队列</p><p>两个堆栈实现队列操作：将所有的数据存储到一个堆栈中，然后出栈，存储到另一个堆栈中，先进先出。</p><p>此时front为实际队首的前一个位置；</p><p>rear仍为实际的队尾；</p><p>每次的进队和出队的操作都需要进行取余操作；</p><p>front和rear相等时队列为空；</p><p>front和rear+1相等时队列为空；</p><p>杨辉三角计算：<br>用0将每一层分割，首先将010压入队列，然后压出每一个元素，每个压出元素和队首元素求和压入，每层考虑以下两步；</p><p>奇数次遇到0：是开始，弹出0后压入0；</p><p>偶数次遇到0：是一层的结束，弹出压入0；</p><h2 id="多项式的乘除法"><a href="#多项式的乘除法" class="headerlink" title="多项式的乘除法"></a>多项式的乘除法</h2><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitleda30589c2d0f258c3.png" alt="4"></p><h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3><p>1.表达式计算：</p><p>表达式的组成：操作数、操作符以及分界符构成。可以分为前缀、中缀和后缀三中表达式。</p><h3 id="栈和队列的相互模拟"><a href="#栈和队列的相互模拟" class="headerlink" title="栈和队列的相互模拟"></a>栈和队列的相互模拟</h3><p>答：</p><p>（1）可以用两个栈模拟出一个队列。首先定义两个栈A和B，将栈A的作为队列的顺序存储结构，入队时将所有元素按顺序压进栈A中，然后将栈A中的元素压出，把栈B作为顺序输出结构，根据数据从栈A弹出的先后顺序压入栈B，出队时只需要将B中的数据压出即可。</p><p>（2）可以用两个队列模拟一个栈。首先定义两个队列A和B，把队列A作为栈的顺序存储结构，入栈时存储元素，然后将A中元素出队只剩一个元素，按出队顺序存入B中，使得栈顶的最后一个元素直接压出，如此往复，最后能将所有的元素压出栈。</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>在串T中查找是否有与串P相等的子串，则称串T为目标，把P称为式。</p><p>设两个串p和q，求q在p中首次出现的位置的运算称作模式匹配。</p><h3 id="KMP算法"><a href="#KMP算法" class="headerlink" title="KMP算法"></a>KMP算法</h3><p>思路：<br>1.构建next数组：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">getNext</span><span class="token punctuation">(</span>string q<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> len<span class="token operator">=</span>q<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>next<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>q<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果相同，说明前缀和后缀的末尾可以增加长度</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>next<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token comment">//如果不相同，将前缀移动到首端，此时对应的前缀后缀无匹配，所以为0，然后重复进行比较。</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>next<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.KMP算法求解：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">KMP</span><span class="token punctuation">(</span>string p<span class="token punctuation">,</span>string q<span class="token punctuation">,</span><span class="token keyword">int</span> <span class="token operator">*</span>next<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> len<span class="token operator">=</span>p<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>q<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>i<span class="token operator">++</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">==</span>q<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> i<span class="token operator">-</span>j<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//如果不相等且模式串已经发生移动，则进行next跳转</span>j<span class="token operator">=</span>next<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//没有对应的前缀，只能接着比较</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> 线性表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据结构基本概念</title>
      <link href="/2021/10/05/shu-ju-jie-gou-ji-ben-gai-nian/"/>
      <url>/2021/10/05/shu-ju-jie-gou-ji-ben-gai-nian/</url>
      
        <content type="html"><![CDATA[<h1 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h1><h2 id="经典放书问题"><a href="#经典放书问题" class="headerlink" title="经典放书问题"></a>经典放书问题</h2><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><p>递归会占用大量空间</p><p>利用clock（）进行计算</p><pre><code>#include&lt;iostream&gt;#include&lt;stdio.h&gt;#include&lt;time.h&gt;using namespace std;clock_t start,stop;double duration;int main(){start=clock();for(int i=0;i&lt;1000;i++){    cout&lt;&lt;1&lt;&lt;endl;//0.5007s    printf("1\n");//0.5395s}stop=clock();duration=((double)(stop-start))/CLK_TCK;return 0;}</code></pre><p>常量使用流输入输出较快，其他使用格式化输入输出较快</p><h2 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h2><p>1.一个有限指令集；</p><p>2.接受一些输入；</p><p>3.产生输出；</p><p>4.一定在有限步骤之后终止；</p><p>5.每一条指令必须有充分明确的目标，不可以有歧义，在计算机能够处理的范围之内，描述不应该只是任何一种计算机语言以及具体的实现手段</p><h3 id="S-n"><a href="#S-n" class="headerlink" title="S(n)"></a>S(n)</h3><h3 id="T-n"><a href="#T-n" class="headerlink" title="T(n)"></a>T(n)</h3><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-1ec8fd58f242b9e9e.png" alt="1"></p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitledd8b9adafb6393cfa.png" alt="2"></p><h2 id="二分算法"><a href="#二分算法" class="headerlink" title="二分算法"></a>二分算法</h2><pre><code>int Max3( int A, int B, int C ){ /* 返回3个整数中的最大值 */return A &gt; B ? A &gt; C ? A : C : B &gt; C ? B : C;}int DivideAndConquer( int List[], int left, int right ){ /* 分治法求List[left]到List[right]的最大子列和 */int MaxLeftSum, MaxRightSum; /* 存放左右子问题的解 */int MaxLeftBorderSum, MaxRightBorderSum; /*存放跨分界线的结果*/int LeftBorderSum, RightBorderSum;int center, i;if( left == right )  { /* 递归的终止条件，子列只有1个数字 */    if( List[left] &gt; 0 )  return List[left];    else return 0;}/* 下面是"分"的过程 */center = ( left + right ) / 2; /* 找到中分点 *//* 递归求得两边子列的最大和 */MaxLeftSum = DivideAndConquer( List, left, center );MaxRightSum = DivideAndConquer( List, center+1, right );/* 下面求跨分界线的最大子列和 */MaxLeftBorderSum = 0; LeftBorderSum = 0;for( i=center; i&gt;=left; i-- ) { /* 从中线向左扫描 */    LeftBorderSum += List[i];    if( LeftBorderSum &gt; MaxLeftBorderSum )        MaxLeftBorderSum = LeftBorderSum;} /* 左边扫描结束 */MaxRightBorderSum = 0; RightBorderSum = 0;for( i=center+1; i&lt;=right; i++ ) { /* 从中线向右扫描 */    RightBorderSum += List[i];    if( RightBorderSum &gt; MaxRightBorderSum )        MaxRightBorderSum = RightBorderSum;} /* 右边扫描结束 *//* 下面返回"治"的结果 */return Max3( MaxLeftSum, MaxRightSum, MaxLeftBorderSum + MaxRightBorderSum );}int MaxSubseqSum3( int List[], int N ){ /* 保持与前2种算法相同的函数接口 */    return DivideAndConquer( List, 0, N-1 );}</code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据结构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>STL</title>
      <link href="/2021/10/05/stl/"/>
      <url>/2021/10/05/stl/</url>
      
        <content type="html"><![CDATA[<h1 id="STL"><a href="#STL" class="headerlink" title="STL"></a>STL</h1><p>Column: Yes<br>files: C++</p><h2 id="广义上的概念"><a href="#广义上的概念" class="headerlink" title="广义上的概念"></a>广义上的概念</h2><p>STL 从广义上分为: 容器(container) 算法(algorithm) 迭代器(iterator)。</p><p>容器和算法之间通过迭代器进行无缝连接。STL 几乎所有的代码都采用了模板类或者模板函数，这相比传统的由函数和类组成的库来说提供了更好的代码重用机会。</p><p>STL(Standard Template Library)标准模板库,在我们 c++标准程序库中隶属于 STL 的占到了 80%以上。</p><h2 id="STL六大组件以及简要介绍"><a href="#STL六大组件以及简要介绍" class="headerlink" title="STL六大组件以及简要介绍"></a>STL六大组件以及简要介绍</h2><h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>存储数据：vector（不定数组），list（列表），deque，set（集合），map（地图，存放key和value，每个key对应一个value）等</p><h3 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h3><p>各种常用的算法，sort（排序，复杂度为nlogn），find（查找数据），copy（两个容器之间实现复制操作），for_each（与java中的fareach类似，同样实现for循环操作，对变量进行重命名）等</p><h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>类型：</p><ol><li>正向迭代器，定义方法如下：</li></ol><p>容器类名::iterator&nbsp; 迭代器名;</p><ol start="2"><li>常量正向迭代器，定义方法如下：</li></ol><p>容器类名::const_iterator&nbsp; 迭代器名;</p><ol start="3"><li>反向迭代器，定义方法如下：</li></ol><p>容器类名::reverse_iterator&nbsp; 迭代器名;</p><ol start="4"><li>常量反向迭代器，定义方法如下：</li></ol><p>容器类名::const_reverse_iterator&nbsp; 迭代器名;</p><p>本质：</p><p>运算符重载的模板。</p><p>注：</p><p>原生指针也是一种迭代器，每个容器都有自己的迭代器。</p><h3 id="仿函数"><a href="#仿函数" class="headerlink" title="仿函数"></a>仿函数</h3><p>定义：其行为类似于函数的东西，可以实现像使用函数一样来创建类的对象</p><p>示例：（对多个数据集求平均值）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">class</span> <span class="token class-name">CalculateAverage</span> <span class="token punctuation">{</span><span class="token keyword">public</span><span class="token operator">:</span>    <span class="token function">CalculateAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token function">acc</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">n</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">void</span> <span class="token keyword">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span> acc <span class="token operator">+=</span> x<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>    <span class="token keyword">float</span> <span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> acc <span class="token operator">/</span> n<span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">private</span><span class="token operator">:</span>    <span class="token keyword">float</span> acc<span class="token punctuation">;</span>    <span class="token keyword">int</span>   n<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>CalculateAverage avg<span class="token punctuation">;</span>avg <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>dataA<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataA<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>avg <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>dataB<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataB<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>avg <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">for_each</span><span class="token punctuation">(</span>dataC<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dataC<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> avg<span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> avg<span class="token punctuation">.</span><span class="token function">getAverage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="适配器"><a href="#适配器" class="headerlink" title="适配器"></a>适配器</h3><p>定义：一种修饰容器或者仿函数或迭代器接口的东西。适配器对容器进行包装，使其表现出另外一种行为。例如，stack&lt;int, vector<int> &gt;实现了栈的功能，但其内部 使用顺序容器vector<int>来存储数据 。（相当于是vector<int>表现出了栈的行为）。</int></int></int></p><p>类型：<br>1）队列（先进先出）</p><p>2）优先队列（部分元素有出栈的优先级）</p><p>3）栈（先进后出）</p><h3 id="空间配置器（了解即可）"><a href="#空间配置器（了解即可）" class="headerlink" title="空间配置器（了解即可）"></a>空间配置器（了解即可）</h3><p>定义：实现动态的空间管理、配置、释放。</p><h2 id="容器-1"><a href="#容器-1" class="headerlink" title="容器"></a>容器</h2><h2 id="数组（array）"><a href="#数组（array）" class="headerlink" title="数组（array）"></a>数组（array）</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span><span class="token comment">//头文件</span></span><span class="token keyword">template</span> <span class="token operator">&lt;</span><span class="token keyword">class</span> <span class="token class-name">T</span>，size_t N<span class="token operator">&gt;</span> <span class="token keyword">class</span> <span class="token class-name">array</span><span class="token punctuation">;</span><span class="token comment">//声明</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="部分函数总结"><a href="#部分函数总结" class="headerlink" title="部分函数总结"></a>部分函数总结</h3><p>begin() 起始元素，常用于for循环    </p><p>end() 结束元素，常用于for循环</p><p>size() 同sizeof，返回数组的大小</p><p>max_size() 返回数组能够存储的最大元素数</p><p>front() 返回数组的起始值</p><p>back() 返回数组的最后值</p><p>data() 返回初始值的地址</p><p>empty() 判断数组是否为空</p><p>fill(int value) 用value将数组填满 </p><p>swap(array A) 两个元素数量相同的数组进行元素的值交换</p><blockquote><p>,&lt;,= 比较两个数组的值大小（从首位开始判断）</p></blockquote><h3 id="代码实战部分"><a href="#代码实战部分" class="headerlink" title="代码实战部分"></a>代码实战部分</h3><p><strong>Iterators</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array values: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> arr<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> arr<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Capacity</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"sizeof(array) = "</span> <span class="token operator">&lt;&lt;</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"size of array = "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"max_size of array = "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array is empty!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array is not empty!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Element access</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> arr <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array[0] = "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array.at(4) = "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">at</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array.front() = "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array.back() = "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">back</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"&amp;array: "</span> <span class="token operator">&lt;&lt;</span> arr<span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token string">" = "</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">&amp;</span>arr <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Modifiers</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token operator">&gt;</span> arr<span class="token punctuation">;</span>     arr<span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// fill</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"array values: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> i <span class="token operator">:</span> arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> i <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>     std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> first <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">&gt;</span> second <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"first  array values: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> first<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"second array values: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> second<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> second<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>     first<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>second<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// swap</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"swap array success!"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"first  array values: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> first<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> first<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"second array values: "</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> it <span class="token operator">=</span> second<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> it <span class="token operator">!=</span> second<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>it<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>it <span class="token operator">&lt;&lt;</span> <span class="token string">" "</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Compare</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;array&gt;</span></span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&gt;</span> a <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&gt;</span> b <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token operator">&gt;</span> c <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">}</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a == b"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a != b"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a == c"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a != c"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a &lt; c"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"a &gt;= c"</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Other</strong></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token operator">&gt;</span> myarray <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>tuple<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">mytuple</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     std<span class="token double-colon punctuation">::</span>tuple_element<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token keyword">decltype</span><span class="token punctuation">(</span>myarray<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>type myelement<span class="token punctuation">;</span>  <span class="token comment">// int myelement</span>     myelement <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>myarray<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">2</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>myarray<span class="token punctuation">)</span> <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>myarray<span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>myarray<span class="token punctuation">)</span> <span class="token operator">=</span> myelement<span class="token punctuation">;</span>     std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"first element in myarray: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>myarray<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>cout <span class="token operator">&lt;&lt;</span> <span class="token string">"first element in mytuple: "</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span><span class="token generic-function"><span class="token function">get</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">0</span><span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>mytuple<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> std<span class="token double-colon punctuation">::</span>endl<span class="token punctuation">;</span>     <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="链表（List，类似于双向链表）"><a href="#链表（List，类似于双向链表）" class="headerlink" title="链表（List，类似于双向链表）"></a>链表（List，类似于双向链表）</h2><h3 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h3><p><strong>构造函数：</strong></p><p>list() 声明一个空列表；</p><p>list(n) 声明一个有n个元素的列表，每个元素都是由其默认构造函数T()构造出来的</p><p>list(n,val) 声明一个由n个元素的列表，每个元素都是由其复制构造函数T(val)得来的</p><p>list(n,val) 声明一个和上面一样的列表</p><p>list(first,last) 声明一个列表，其元素的初始值来源于由区间所指定的序列中的元素</p><hr><p><strong>begin()和end()：</strong></p><p>通过调用list容器的成员函数begin()得到一个指向容器起始位置的iterator，可以调用list容器的<br> end() 函数来得到list末端下一位置，相当于：int a[n]中的第n+1个位置a[n]，实际上是不存在的，不能访问，经常作为循环结束判断结束条件使用。</p><hr><p><strong>push_back() 和push_front()：</strong></p><p>使用list的成员函数push_back和push_front插入一个元素到list中。其中push_back()从list的末端插入，而 push_front()实现的从list的头部插入。</p><hr><p><strong>empty()：</strong></p><p>利用empty() 判断list是否为空。</p><p><strong>emplace(position,element)：</strong></p><p>在某一位置插入元素</p><hr><p><strong>resize()：</strong></p><p>如果调用resize(n)将list的长度改为只容纳n个元素，超出的元素将被删除，如果需要扩展那么调用默认构造函数T()将元素加到list末端。如果调用resize(n,val)，则扩展元素要调用构造函数T(val)函数进行元素构造，其余部分相同。</p><hr><p><strong>clear()：</strong>&nbsp;</p><p>清空list中的所有元素。</p><hr><p><strong>front()和back()：</strong>&nbsp;</p><p>通过front()可以获得list容器中的头部元素，通过back()可以获得list容器的最后一个元素。但是有一点要注意，就是list中元素是空的时候，这时候调用front()和back()会发生什么呢？实际上会发生不能正常读取数据的情况，但是这并不报错，那我们编程序时就要注意了，个人觉得在使用之前最好先调用empty()函数判断list是否为空。</p><hr><p><strong>pop_back和pop_front()：</strong></p><p>通过删除最后一个元素，通过pop_front()删除第一个元素；序列必须不为空，如果当list为空的时候调用pop_back()和pop_front()会使程序崩掉。</p><hr><p><strong>assign()：</strong></p><p>具体和vector中的操作类似，也是有两种情况，第一种是：l1.assign(n,val)将l1中元素变为n个T(val）。第二种情况是：l1.assign(l2.begin(),l2.end())将l2中的从l2.begin()到l2.end()之间的数值赋值给l1。</p><hr><p><strong>swap()：</strong></p><p>交换两个链表(两个重载)，一个是l1.swap(l2); 另外一个是swap(l1,l2)，都可能完成连个链表的交换。</p><hr><p><strong>reverse()：</strong></p><p>通过reverse()完成list的逆置。</p><hr><p><strong>merge()：</strong></p><p>合并两个链表并使之默认升序(也可改)，l1.merge(l2，greater<int>());<br> 调用结束后l2变为空，l1中元素包含原来l1 和<br>l2中的元素，并且排好序，升序。其实默认是升序，greater<int>()可以省略，另外greater<int>()是可以变的，也可以不按升序排列。</int></int></int></p><p><strong>insert()：</strong></p><p>在指定位置插入一个或多个元素(三个重载)：</p><p>l1.insert(l1.begin(),100); 在l1的开始位置插入100。</p><p>l1.insert(l1.begin(),2,200); 在l1的开始位置插入2个100。</p><p>l1.insert(l1.begin(),l2.begin(),l2.end());在l1的开始位置插入l2的从开始到结束的所有位置的元素。</p><hr><p><strong>erase()：</strong></p><p>删除一个元素或一个区域的元素(两个重载)</p><p>l1.erase(l1.begin()); 将l1的第一个元素删除。</p><p>l1.erase(l1.begin(),l1.end()); 将l1的从begin()到end()之间的元素删除。</p><h3 id="代码操作示例"><a href="#代码操作示例" class="headerlink" title="代码操作示例"></a>代码操作示例</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;list&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;algorithm&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>list<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span> strList<span class="token punctuation">;</span>strList<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"woshi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strList<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token string">"nishi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strList<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token string">"nendie"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strList<span class="token punctuation">.</span><span class="token function">push_front</span><span class="token punctuation">(</span><span class="token string">"nenniang"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>it<span class="token operator">=</span>strList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>strList<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>strList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>strList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"guangzhou"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strList<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token operator">++</span>strList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"shenzhen"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>it<span class="token operator">=</span>strList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>strList<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>strList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"woshi"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>it<span class="token operator">=</span>strList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>strList<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>list<span class="token operator">&lt;</span>string<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iterDel<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>it<span class="token operator">=</span>strList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>strList<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">*</span>it<span class="token operator">==</span><span class="token string">"guangzhou"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>iterDel<span class="token operator">=</span>it<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span>strList<span class="token punctuation">.</span><span class="token function">erase</span><span class="token punctuation">(</span>iterDel<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>it<span class="token operator">=</span>strList<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>strList<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>it<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> numTest<span class="token punctuation">;</span>numTest<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numTest<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numTest<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numTest<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>numTest<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iter<span class="token punctuation">;</span>iter<span class="token operator">=</span><span class="token function">remove</span><span class="token punctuation">(</span>numTest<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>numTest<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不定数组（vector）"><a href="#不定数组（vector）" class="headerlink" title="不定数组（vector）"></a>不定数组（vector）</h2><p>用法同List</p><h2 id="队列（deque，左闭右开）"><a href="#队列（deque，左闭右开）" class="headerlink" title="队列（deque，左闭右开）"></a>队列（deque，左闭右开）</h2><p><strong>1.iterator erase(iterator pos)</strong></p><p>删除pos所指向的元素。</p><p><strong>2.iterator erase(iterator first, iterator last)</strong></p><p>删除迭代器区间[first,last)所指向的所有元素。</p><p>其他同上</p><h2 id="String容器"><a href="#String容器" class="headerlink" title="String容器"></a>String容器</h2><p><strong>构造函数</strong></p><p>string（）构建新的空对象</p><p>string（n，c）构建n个字符c组成的string对象</p><p><strong>获取方法</strong></p><p>char &amp;operator[](int n) 可以引用[]</p><p>char at(int n) at方法获取字符</p><p><strong>append方法</strong></p><p>string&amp; append(const char *s);//把字符串s连接到当前字符串结尾<br>string&amp; append(const char *s, int n);//把字符串s的前n个字符连接到当前字符串结尾<br>string&amp; append(const string &amp;s);//同operator+=()<br>string&amp; append(const string &amp;s, int pos, int n);//把字符串s中从pos开始的n个字符连接到当前字符串结尾<br>string&amp; append(int n, char c);//在当前字符串结尾添加n个字符c</p><p><strong>搜索</strong></p><p>int find(const string&amp; str, int pos = 0) const; //查找str第一次出现位置,从pos开始查找<br>int find(const char* s, int pos = 0) const;  //查找s第一次出现位置,从pos开始查找<br>int find(const char* s, int pos, int n) const;  //从pos位置查找s的前n个字符第一次位置<br>int find(const char c, int pos = 0) const;  //查找字符c第一次出现位置<br>int rfind(const string&amp; str, int pos = npos) const;//查找str最后一次位置,从pos开始查找<br>int rfind(const char* s, int pos = npos) const;//查找s最后一次出现位置,从pos开始查找<br>int rfind(const char* s, int pos, int n) const;//从pos查找s的前n个字符最后一次位置<br>int rfind(const char c, int pos = 0) const; //查找字符c最后一次出现位置<br>string&amp; replace(int pos, int n, const string&amp; str); //替换从pos开始n个字符为字符串str<br>string&amp; replace(int pos, int n, const char* s); //替换从pos开始的n个字符为字符串s</p><p><strong>搜索字符串</strong></p><p>string substr(int pos = 0, int n = npos) const;//返回由pos开始的n个字符组成的字符串</p><h2 id="Stack容器、Queue容器"><a href="#Stack容器、Queue容器" class="headerlink" title="Stack容器、Queue容器"></a>Stack容器、Queue容器</h2><p>函数与上方所述无较大出入，不再赘述</p><h2 id="Set-multiset"><a href="#Set-multiset" class="headerlink" title="Set/multiset"></a>Set/multiset</h2><p>用法都相同，但是multiset允许键值重复。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">find</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找键key是否存在,若存在，返回该键的元素的迭代器；若不存在，返回set.end();</span><span class="token function">count</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//查找键key的元素个数</span><span class="token function">lower_bound</span><span class="token punctuation">(</span>keyElem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回第一个key&lt;=keyElem元素的迭代器。</span><span class="token function">upper_bound</span><span class="token punctuation">(</span>keyElem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回第一个key&gt;keyElem元素的迭代器。</span><span class="token function">equal_range</span><span class="token punctuation">(</span>keyElem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回容器中key与keyElem相等的上下限的两个迭代器。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Set部分的操作实例"><a href="#Set部分的操作实例" class="headerlink" title="Set部分的操作实例"></a>Set部分的操作实例</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> s<span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//输出首尾值 </span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//计算某一元素的个数 </span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span> <span class="token comment">//清空 </span>s<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cout<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span>s<span class="token punctuation">.</span><span class="token function">max_size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//迭代器使用 </span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iter<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>s<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">for</span><span class="token punctuation">(</span>iter<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">!=</span>s<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>iter<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>pair<span class="token operator">&lt;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator<span class="token punctuation">,</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator<span class="token operator">&gt;</span> pr<span class="token punctuation">;</span>pr<span class="token operator">=</span>s<span class="token punctuation">.</span><span class="token function">equal_range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>pr<span class="token punctuation">.</span>first<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>pr<span class="token punctuation">.</span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token comment">//定位器find(),返回查找元素的地址 </span><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span>  <span class="token function">s1</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span>a<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>set<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iter1<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>iter1<span class="token operator">=</span>s1<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span>s1<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>iter1<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Multiset的部分操作实例"><a href="#Multiset的部分操作实例" class="headerlink" title="Multiset的部分操作实例"></a>Multiset的部分操作实例</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;set&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">int</span> array<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">}</span><span class="token punctuation">;</span>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">ms</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span>array<span class="token operator">+</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>multiset<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>iterator iter<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>iter<span class="token operator">=</span>ms<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">!=</span>ms<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>iter<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span><span class="token operator">*</span>iter<span class="token operator">&lt;&lt;</span><span class="token string">" "</span><span class="token punctuation">;</span><span class="token punctuation">}</span>cout<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="对组（Pair）"><a href="#对组（Pair）" class="headerlink" title="对组（Pair）"></a>对组（Pair）</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//第一种方法创建一个对组</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token function">pair1</span><span class="token punctuation">(</span><span class="token function">string</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> pair1<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span> <span class="token comment">//访问pair第一个值</span>cout <span class="token operator">&lt;&lt;</span> pair1<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//访问pair第二个值</span><span class="token comment">//第二种</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pair2 <span class="token operator">=</span> <span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> pair2<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> pair2<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span class="token comment">//pair=赋值</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token operator">&gt;</span> pair3 <span class="token operator">=</span> pair2<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> pair3<span class="token punctuation">.</span>first <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span>cout <span class="token operator">&lt;&lt;</span> pair3<span class="token punctuation">.</span>second <span class="token operator">&lt;&lt;</span> endl<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="对组的部分实现"><a href="#对组的部分实现" class="headerlink" title="对组的部分实现"></a>对组的部分实现</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iostream&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;string&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;vector&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;utility&gt;</span></span><span class="token keyword">using</span> <span class="token keyword">namespace</span> std<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>pair<span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span>p<span class="token punctuation">;</span><span class="token keyword">typedef</span> vector <span class="token operator">&lt;</span> pair <span class="token operator">&lt;</span>string<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token operator">&gt;</span> <span class="token operator">&gt;</span> VP<span class="token punctuation">;</span>VP vp<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cin<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">.</span>first<span class="token operator">&gt;&gt;</span>p<span class="token punctuation">.</span>second<span class="token punctuation">;</span>vp<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>first<span class="token punctuation">,</span>p<span class="token punctuation">.</span>second<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>VP<span class="token double-colon punctuation">::</span>iterator it<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>it<span class="token operator">=</span>vp<span class="token punctuation">.</span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">!=</span>vp<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>it<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>cout<span class="token operator">&lt;&lt;</span>it<span class="token operator">-&gt;</span>first<span class="token operator">&lt;&lt;</span><span class="token string">","</span><span class="token operator">&lt;&lt;</span>it<span class="token operator">-&gt;</span>second<span class="token operator">&lt;&lt;</span>endl<span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Map-multimap"><a href="#Map-multimap" class="headerlink" title="Map/multimap"></a>Map/multimap</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">map<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//往容器插入元素，返回pair&lt;iterator,bool&gt;</span>map<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">&gt;</span> mapStu<span class="token punctuation">;</span><span class="token comment">// 第一种 通过pair的方式插入对象</span>mapStu<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token generic-function"><span class="token function">pair</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"小张"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第二种 通过pair的方式插入对象</span>mapStu<span class="token punctuation">.</span><span class="token function">inset</span><span class="token punctuation">(</span><span class="token function">make_pair</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"校长"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第三种 通过value_type的方式插入对象</span>mapStu<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">map</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">,</span> string<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span><span class="token function">value_type</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">"小李"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 第四种 通过数组的方式插入值</span>mapStu<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"小刘"</span><span class="token punctuation">;</span>mapStu<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"小王"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://www.notion.so/a6b5b4200ed2482d805242156d168256">Copy of STL容器使用时机</a></p><h2 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h2><p>算法概述</p><p>算法主要是由头文件<algorithm><functional> <numeric>组成。<br><algorithm>是所有STL头文件中最大的一个,其中常用的功能涉及到比较，交换，查找,遍历，复制，修改，反转，排序，合并等…<br><numeric>体积很小，只包括在几个序列容器上进行的简单运算的模板函数.<br><functional> 定义了一些模板类,用以声明函数对象。</functional></numeric></algorithm></numeric></functional></algorithm></p><p><a href="https://www.notion.so/6fdbfd509ca042728c928a341f880291">Copy of 查找</a></p><p><a href="https://www.notion.so/9a535290182c4de78e94ac47deaf3bed">Copy of 搜索、统计</a></p><h3 id="复制，变换、填充、移除、随机生成"><a href="#复制，变换、填充、移除、随机生成" class="headerlink" title="复制，变换、填充、移除、随机生成"></a>复制，变换、填充、移除、随机生成</h3><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled0bb24058563f67c0.png" alt="1"></p><p><a href="https://www.notion.so/8663cf57075a441aac1ecfa482e8c1ac">Copy of 排序</a></p><p><a href="https://www.notion.so/2425c5ab93b140d3b3e1b1e9b727453f">Copy of 关系</a></p><p><a href="https://www.notion.so/a167bb810c084b988d959764c1ac5b61">Copy of 堆算法</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> STL </tag>
            
            <tag> C++ </tag>
            
            <tag> 手册 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Qt</title>
      <link href="/2021/10/05/qt/"/>
      <url>/2021/10/05/qt/</url>
      
        <content type="html"><![CDATA[<h1 id="Qt"><a href="#Qt" class="headerlink" title="Qt"></a>Qt</h1><h1 id="Qt5安装概念解析"><a href="#Qt5安装概念解析" class="headerlink" title="Qt5安装概念解析"></a>Qt5安装概念解析</h1><h2 id="伙伴编辑模式"><a href="#伙伴编辑模式" class="headerlink" title="伙伴编辑模式"></a>伙伴编辑模式</h2><p>QLabel标签和伙伴窗口部件包括一个标签和一个窗口部件，它们具有伙伴关系。示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QLineEdit<span class="token operator">*</span> ageLineEdit <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLineEdit</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//this为当前对象的地址，只能在成员函数中应用</span>QLabel<span class="token operator">*</span> ageLabel <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token string">"&amp;Age"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>ageLabel<span class="token operator">-&gt;</span><span class="token function">setBuddy</span><span class="token punctuation">(</span>ageLineEdit<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="信号和槽机制"><a href="#信号和槽机制" class="headerlink" title="信号和槽机制"></a>信号和槽机制</h2><p>完成任意两个Qt对象之间的通信机制。</p><h3 id="连接方式"><a href="#连接方式" class="headerlink" title="连接方式"></a>连接方式</h3><p>单个信号相连：</p><blockquote><p>connect (Object1,SIGNAL(sigal1),Object2,SIGNAL(signal1));</p></blockquote><p>同个信号与多个槽：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">connect</span> <span class="token punctuation">(</span>Object1<span class="token punctuation">,</span><span class="token function">SIGNAL</span><span class="token punctuation">(</span>sigal2<span class="token punctuation">)</span><span class="token punctuation">,</span>Object2<span class="token punctuation">,</span><span class="token function">SIGNAL</span><span class="token punctuation">(</span>slot1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">connect</span> <span class="token punctuation">(</span>Object1<span class="token punctuation">,</span><span class="token function">SIGNAL</span><span class="token punctuation">(</span>sigal2<span class="token punctuation">)</span><span class="token punctuation">,</span>Object3<span class="token punctuation">,</span><span class="token function">SIGNAL</span><span class="token punctuation">(</span>slot2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同一个槽响应多个信号：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">connect</span><span class="token punctuation">(</span>Object1<span class="token punctuation">,</span><span class="token function">SIGNAL</span><span class="token punctuation">(</span>signal1<span class="token punctuation">)</span><span class="token punctuation">,</span>Object2<span class="token punctuation">,</span><span class="token function">SLOT</span><span class="token punctuation">(</span>slot<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><p>1.类型安全：签名、参数类型、数量必须相等；</p><p>2.松散耦合：在产生信号的类被删除后程序也不会崩溃；</p><h3 id="信号与槽机制的效率：低，但是灵活、简便"><a href="#信号与槽机制的效率：低，但是灵活、简便" class="headerlink" title="信号与槽机制的效率：低，但是灵活、简便"></a>信号与槽机制的效率：低，但是灵活、简便</h3><h2 id="对象系统"><a href="#对象系统" class="headerlink" title="对象系统"></a>对象系统</h2><h2 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h2><h1 id="Qt模板库、工具类及控件"><a href="#Qt模板库、工具类及控件" class="headerlink" title="Qt模板库、工具类及控件"></a>Qt模板库、工具类及控件</h1><h2 id="字符串（类似于STL中的string）"><a href="#字符串（类似于STL中的string）" class="headerlink" title="字符串（类似于STL中的string）"></a>字符串（类似于STL中的string）</h2><p>1.组合字符串：<br>+，+=，append()，**sprintf()，arg()<strong>，insert()，prepend()，repalce()，</strong>trimmed()，simplified()**。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">str<span class="token punctuation">.</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span><span class="token string">" Welcome "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str<span class="token operator">=</span><span class="token function">QString</span><span class="token punctuation">(</span><span class="token string">"%1 was born in %2."</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token string">"John"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">arg</span><span class="token punctuation">(</span><span class="token number">1998</span><span class="token punctuation">)</span><span class="token punctuation">;</span>str<span class="token punctuation">.</span><span class="token function">trimmed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//删除两端的空白字符</span>str<span class="token punctuation">.</span><span class="token function">simplified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//同上，但是用“ ”代替空白</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2.查询、比较字符串：</p><p><a href="https://www.notion.so/4bb67e3398d94078900b32c52eb5d36c">Copy of 查询、比较</a></p><p>3.转换字符串：</p><p>toInt()、toAscii()、toLatin1()、toUtf8()、toLocal8Bit();</p><p>4.非空判断：</p><p>isNull() 判断是否为空白（非空检验）</p><p>isEmpty() 判断是否为空格</p><h2 id="容器类"><a href="#容器类" class="headerlink" title="容器类"></a>容器类</h2><h3 id="QList类"><a href="#QList类" class="headerlink" title="QList类"></a>QList类</h3><p>1.子类：QItemSelection,QQueue,QSignalSpy,QStringList,QTestEventList;</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QList<span class="token operator">&lt;</span>QString<span class="token operator">&gt;</span> list<span class="token punctuation">;</span><span class="token punctuation">{</span>    QString <span class="token function">str</span><span class="token punctuation">(</span><span class="token string">"This is a test string"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    list<span class="token operator">&lt;&lt;</span>str<span class="token punctuation">;</span><span class="token comment">//将一个字符串储存在列表中</span><span class="token punctuation">}</span>list<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"hhh"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//压入列表</span><span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token string">" How are you?"</span><span class="token punctuation">;</span><span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="QlinkedList"><a href="#QlinkedList" class="headerlink" title="QlinkedList"></a>QlinkedList</h3><p>以非连续的内存块保存数据，不能使用下标，只能使用迭代器</p><h3 id="QVector"><a href="#QVector" class="headerlink" title="QVector"></a>QVector</h3><p>子类：Qploygon，QPolygonF，QStack;</p><h2 id="迭代器（类似于STL）"><a href="#迭代器（类似于STL）" class="headerlink" title="迭代器（类似于STL）"></a>迭代器（类似于STL）</h2><h2 id="QMap类和QHash类（同STL中map和multimap）"><a href="#QMap类和QHash类（同STL中map和multimap）" class="headerlink" title="QMap类和QHash类（同STL中map和multimap）"></a>QMap类和QHash类（同STL中map和multimap）</h2><h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><p>1.头文件：<qtalgorithms>,<qtglobal></qtglobal></qtalgorithms></p><p>2.常用算法：</p><p>qAbs() qMax() qSwap()</p><p>qRound()//四舍五入处理</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QLabel <span class="token operator">*</span>datelabel<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">QLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QDateTime <span class="token operator">*</span>datatime<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">QDateTime</span><span class="token punctuation">(</span><span class="token class-name">QDateTime</span><span class="token double-colon punctuation">::</span><span class="token function">currentDateTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>datelabel<span class="token operator">-&gt;</span><span class="token function">setText</span><span class="token punctuation">(</span>datatime<span class="token operator">-&gt;</span><span class="token function">date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>datelabel<span class="token operator">-&gt;</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h1><p>由表达式、量词和断言构成</p><p>部分示例：</p><h3 id="表达式"><a href="#表达式" class="headerlink" title="表达式"></a>表达式</h3><p>[ABC] 匹配一个A或一个B或一个C</p><p>[A-Z] 匹配一个任意的大写英文字母</p><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><p>x{1,1} 匹配一个字符x</p><p>x{1,5} 匹配一列字符x，至少要包含一个字符x，最多包含5个x</p><h3 id="断言"><a href="#断言" class="headerlink" title="断言"></a>断言</h3><p>^ 放在开头处，表示这个正则表达式必须从字符串的开始进行匹配</p><p>$ 放在结尾处，意味着正则表达式必须以字符串进行结尾</p><h3 id="详细总结"><a href="#详细总结" class="headerlink" title="详细总结"></a>详细总结</h3><p>表达式：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-191160c4038ff2251.png" alt="1"></p><p>量词：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-256762ed4251d0b77.png" alt="2"></p><p>断言：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-3d41fe9581c63facd.png" alt="3"></p><p>通配符：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-4222ae91f57f4305b.png" alt="4"></p><p>文本捕获部分：</p><p>在regexp中使用括号可以使一些元素组合在一起，这样既可以对它们进行量化，也可以捕获它们。例如，使用表达式 mail|letter 来匹配一个字符串，我们知道了有一个单词被匹配了，但是却不能知道具体是哪一个，使用括号就可以让我们捕获被匹配的那个单词，比如使用 (mail|letter) 来匹配字符串“I Sent you some email”，这样就可以使用cap()或者capturedTexts()函数来提取匹配的字符。</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QRegExp <span class="token function">rx4</span><span class="token punctuation">(</span><span class="token string">"(\\d+)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>QString str4 <span class="token operator">=</span> <span class="token string">"Offsets: 12 14 99 231 7"</span><span class="token punctuation">;</span>QStringList list<span class="token punctuation">;</span><span class="token keyword">int</span> pos2 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pos2 <span class="token operator">=</span> rx4<span class="token punctuation">.</span><span class="token function">indexIn</span><span class="token punctuation">(</span>str4<span class="token punctuation">,</span> pos2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    list <span class="token operator">&lt;&lt;</span> rx4<span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                                   <span class="token comment">// 第一个捕获到的文本</span>    pos2 <span class="token operator">+=</span> rx4<span class="token punctuation">.</span><span class="token function">matchedLength</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 上一个匹配的字符串的长度</span><span class="token punctuation">}</span><span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> list<span class="token punctuation">;</span>                            <span class="token comment">// 结果12,14,99,231,7</span> QRegExp <span class="token function">rxlen</span><span class="token punctuation">(</span><span class="token string">"(\\d+)(?:\\s*)(cm|inch)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> pos3 <span class="token operator">=</span> rxlen<span class="token punctuation">.</span><span class="token function">indexIn</span><span class="token punctuation">(</span><span class="token string">"Length: 189cm"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>pos3 <span class="token operator">&gt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    QString value <span class="token operator">=</span> rxlen<span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 结果为189</span>    QString unit <span class="token operator">=</span> rxlen<span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// 结果为cm</span>    QString string <span class="token operator">=</span> rxlen<span class="token punctuation">.</span><span class="token function">cap</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// 结果为189cm</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> value <span class="token operator">&lt;&lt;</span> unit <span class="token operator">&lt;&lt;</span> string<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="控件"><a href="#控件" class="headerlink" title="控件"></a>控件</h1><p>代码示例：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//widge.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;qapplication.h&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QPushButton&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QFont&gt;</span></span><span class="token class-name">Widget</span><span class="token double-colon punctuation">::</span><span class="token function">Widget</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span>    <span class="token operator">:</span> <span class="token function">QWidget</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">setMinimumSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setMaximumSize</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token number">1200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调节窗口大小</span>    QPushButton <span class="token operator">*</span>quit<span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">QPushButton</span><span class="token punctuation">(</span><span class="token string">"EXIT"</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    quit<span class="token operator">-&gt;</span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span><span class="token number">600</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//顶点坐标+长+宽</span>    quit<span class="token operator">-&gt;</span><span class="token function">setFont</span><span class="token punctuation">(</span><span class="token function">QFont</span><span class="token punctuation">(</span><span class="token string">"Times"</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span>QFont<span class="token double-colon punctuation">::</span>Black<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置字体的大小、颜色，Times可以用其他字符代替</span>    <span class="token function">connect</span><span class="token punctuation">(</span>quit<span class="token punctuation">,</span><span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>qApp<span class="token punctuation">,</span><span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">quit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//qApp不用设置就能生成</span><span class="token punctuation">}</span><span class="token class-name">Widget</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Widget</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//main.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QApplication&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    Widget w<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">setGeometry</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置窗口的总位置</span>    w<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="项目控件组"><a href="#项目控件组" class="headerlink" title="项目控件组"></a>项目控件组</h1><p>代码示例：（正则表达式深入理解、按钮变化）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//dialog.h</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">DIALOG_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DIALOG_H</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QDialog&gt;</span></span><span class="token keyword">namespace</span> Ui <span class="token punctuation">{</span><span class="token keyword">class</span> <span class="token class-name">Dialog</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Dialog</span> <span class="token operator">:</span> <span class="token base-clause"><span class="token keyword">public</span> <span class="token class-name">QDialog</span></span><span class="token punctuation">{</span>    Q_OBJECT<span class="token keyword">public</span><span class="token operator">:</span>    <span class="token keyword">explicit</span> <span class="token function">Dialog</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent <span class="token operator">=</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">~</span><span class="token function">Dialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">private</span><span class="token operator">:</span>    Ui<span class="token double-colon punctuation">::</span>Dialog <span class="token operator">*</span>ui<span class="token punctuation">;</span><span class="token keyword">private</span> slots<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">on_lineEdit_textChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span> <span class="token comment">// DIALOG_H</span></span><span class="token comment">//dialog.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dialog.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"ui_dialog.h"</span></span><span class="token class-name">Dialog</span><span class="token double-colon punctuation">::</span><span class="token function">Dialog</span><span class="token punctuation">(</span>QWidget <span class="token operator">*</span>parent<span class="token punctuation">)</span> <span class="token operator">:</span>    <span class="token function">QDialog</span><span class="token punctuation">(</span>parent<span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token function">ui</span><span class="token punctuation">(</span><span class="token keyword">new</span> Ui<span class="token double-colon punctuation">::</span>Dialog<span class="token punctuation">)</span><span class="token punctuation">{</span>    ui<span class="token operator">-&gt;</span><span class="token function">setupUi</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//初始化</span>    QRegExp <span class="token function">regExp</span><span class="token punctuation">(</span><span class="token string">"[A-Za-z][1-9][0-9]{0,2}"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构建输入框的正则表达式</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-&gt;</span>ok<span class="token punctuation">,</span><span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">accept</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-&gt;</span>cancel<span class="token punctuation">,</span><span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">clicked</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">reject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">connect</span><span class="token punctuation">(</span>ui<span class="token operator">-&gt;</span>lineEdit<span class="token punctuation">,</span><span class="token function">SIGNAL</span><span class="token punctuation">(</span><span class="token function">textChanged</span><span class="token punctuation">(</span>QString<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">this</span><span class="token punctuation">,</span><span class="token function">SLOT</span><span class="token punctuation">(</span><span class="token function">on_lineEdit_textChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Dialog</span><span class="token double-colon punctuation">::</span><span class="token operator">~</span><span class="token function">Dialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">delete</span> ui<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">void</span> <span class="token class-name">Dialog</span><span class="token double-colon punctuation">::</span><span class="token function">on_lineEdit_textChanged</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    ui<span class="token operator">-&gt;</span>ok<span class="token operator">-&gt;</span><span class="token function">setEnabled</span><span class="token punctuation">(</span>ui<span class="token operator">-&gt;</span>lineEdit<span class="token operator">-&gt;</span><span class="token function">hasAcceptableInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使ok键可选</span><span class="token punctuation">}</span><span class="token comment">//main.cpp</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"dialog.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QApplication&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    Dialog w<span class="token punctuation">;</span>    w<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="布局管理"><a href="#布局管理" class="headerlink" title="布局管理"></a>布局管理</h1><h2 id="分割窗口QSplitter类"><a href="#分割窗口QSplitter类" class="headerlink" title="分割窗口QSplitter类"></a>分割窗口QSplitter类</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//分成三部分，左主一，右有二</span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"mainwindow.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QApplication&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QSplitter&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTextEdit&gt;</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QTextCodec&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span>    QFont <span class="token function">font</span><span class="token punctuation">(</span><span class="token string">"ZYSong18030"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a<span class="token punctuation">.</span><span class="token function">setFont</span><span class="token punctuation">(</span>font<span class="token punctuation">)</span><span class="token punctuation">;</span>    QSplitter <span class="token operator">*</span>splitterMain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">QSplitter</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Horizontal<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//新建水平分割区</span>    QTextEdit <span class="token operator">*</span>textLeft <span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">QTextEdit</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"Left Widget"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>splitterMain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//主分割区插入文字</span>    textLeft<span class="token operator">-&gt;</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AlignCenter<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置位置</span>    QSplitter <span class="token operator">*</span>splitterRight <span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">QSplitter</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>Vertical<span class="token punctuation">,</span>splitterMain<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//垂直分割</span>    splitterRight<span class="token operator">-&gt;</span><span class="token function">setOpaqueResize</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以控制右侧各模块的大小</span>    QTextEdit <span class="token operator">*</span>textUp <span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">QTextEdit</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"Top Widget"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>splitterRight<span class="token punctuation">)</span><span class="token punctuation">;</span>    textUp<span class="token operator">-&gt;</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AlignCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>    QTextEdit <span class="token operator">*</span>textBottom <span class="token operator">=</span><span class="token keyword">new</span> <span class="token function">QTextEdit</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"Bottom Widget"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>splitterRight<span class="token punctuation">)</span><span class="token punctuation">;</span>    textBottom<span class="token operator">-&gt;</span><span class="token function">setAlignment</span><span class="token punctuation">(</span>Qt<span class="token double-colon punctuation">::</span>AlignCenter<span class="token punctuation">)</span><span class="token punctuation">;</span>    splitterMain<span class="token operator">-&gt;</span><span class="token function">setStretchFactor</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    splitterMain<span class="token operator">-&gt;</span><span class="token function">setWindowTitle</span><span class="token punctuation">(</span><span class="token class-name">QObject</span><span class="token double-colon punctuation">::</span><span class="token function">tr</span><span class="token punctuation">(</span><span class="token string">"Splitter"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    splitterMain<span class="token operator">-&gt;</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//    MainWindow w;</span><span class="token comment">//    w.show();</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="停靠窗口QDockWidget类"><a href="#停靠窗口QDockWidget类" class="headerlink" title="停靠窗口QDockWidget类"></a>停靠窗口QDockWidget类</h2><p>流程：</p><p>1.创建一个对象的停靠窗体；</p><p>2.设置此停靠窗体的属性，通常调用setFeatures（）以及setAllowedAreas（）两种方法；</p><p>3.新建一个要插入停靠窗口的控件；</p><p>4.将控件插入停靠窗体，调用QDockWidget的setWidget()方法；</p><h2 id="堆栈窗体QStackedWidget类"><a href="#堆栈窗体QStackedWidget类" class="headerlink" title="堆栈窗体QStackedWidget类"></a>堆栈窗体QStackedWidget类</h2><p>流程：</p><p>1.声明列表以及栈；</p><p>2.链表作为多个条目的载体，而栈储存不同标签的内容；</p><p>3.头文件完善；</p><p>4.运行；</p><h2 id="基本布局"><a href="#基本布局" class="headerlink" title="基本布局"></a>基本布局</h2><p>各种布局类以及继承关系如下图所示：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-590fdcb63d22a32db.png" alt="5"></p><p>常用方法：</p><p>addWeight()  加入需要布局的条件</p><p>addLayout()  加入子布局</p><h1 id="Qt中项目管理文件及其作用"><a href="#Qt中项目管理文件及其作用" class="headerlink" title="Qt中项目管理文件及其作用"></a>Qt中项目管理文件及其作用</h1><p>后缀为“.pro”的文件是项目的管理文件，文件名就是项目的名称。</p><p>作用：</p><ul><li>加入GUI设计模块；</li><li>可以根据项目的具体需求，在项目管理文件中添加适当的类库模块支持。</li></ul><h1 id="Qt项目界面文件及其作用"><a href="#Qt项目界面文件及其作用" class="headerlink" title="Qt项目界面文件及其作用"></a>Qt项目界面文件及其作用</h1><h2 id="功能区域讲解："><a href="#功能区域讲解：" class="headerlink" title="功能区域讲解："></a>功能区域讲解：</h2><ul><li>组件面板：窗口左侧是界面设计组件面板，分为多个组，如Layouts、Buttons、Display Widgets等，界面设计的常见组件都可以在组件面板里找到。</li><li>Signals 和 Slots 编辑器与 Action 编辑器是位于待设计窗体下方的两个编辑器。Signals 和Slots 编辑器用于可视化地进行信号与槽的关联，Action 编辑器用于可视化设计 Action。</li><li>对象浏览器（Object Inspector）：窗口右上方是 Object Inspector，用树状视图显示窗体上各组件之间的布局包含关系，视图有两列，显示每个组件的对象名称（ObjectName）和类名称。</li><li>中间主要区域是待设计的窗体。如果要将某个组件放置到窗体上时，从组件面板上拖放一个组件到窗体上即可。例如，先放一个 Label 和一个 Push Button 到窗体上。</li><li>属性编辑器（Property Editor）：窗口右下方是属性编辑器，是界面设计时最常用到的编辑器。属性编辑器显示某个选中的组件或窗体的各种属性及其取值，可以在属性编辑器里修改这些属性的值。</li></ul><h2 id="widget-h文件讲解"><a href="#widget-h文件讲解" class="headerlink" title="widget.h文件讲解"></a>widget.h文件讲解</h2><p>widget.h 文件是窗体类的头文件。在创建项目时，选择窗体基类是 QWidget，在 widget.h 中定义了一个继承自 QWidget 的类 Widget。</p><ul><li>构造函数：执行父类 QWidget 的构造函数，创建一个 Ui::Widget 类的对象 ui。这个 ui 就是 Widget 的 private 部分定义的指针变量 ui；</li><li>析构函数：删除new创建的指针ui；</li></ul><h2 id="Qt项目中main主函数及其作用"><a href="#Qt项目中main主函数及其作用" class="headerlink" title="Qt项目中main主函数及其作用"></a>Qt项目中main主函数及其作用</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"widget.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;QApplication&gt;</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    QApplication <span class="token function">a</span><span class="token punctuation">(</span>argc<span class="token punctuation">,</span> argv<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//定义并创建应用程序</span>    Widget w<span class="token punctuation">;</span> <span class="token comment">//定义并创建窗口</span>    w<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//显示窗口</span>    <span class="token keyword">return</span> a<span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//应用程序运行</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Qt信号与槽机制详解"><a href="#Qt信号与槽机制详解" class="headerlink" title="Qt信号与槽机制详解"></a>Qt信号与槽机制详解</h1><p>1.信号就是在特定的条件下发射的事件，例：<br>PushButton→clicked()</p><p>ComboBox→CurrentIndexChanged()</p><p>2.槽是什么？</p><p>槽是对信号相应的函数</p><p>3.SIGNAL</p><ul><li>SIGNAL 和 SLOT 是 Qt 的宏，用于指明信号和槽，并将它们的参数转换为相应的字符串。</li><li>严格的情况下，信号与槽的参数个数和类型需要一致，至少信号的参数不能少于槽的参数。如果不匹配，会出现编译错误或运行错误。</li><li>当一个信号被发射时，与其关联的槽函数通常被立即执行，就像正常调用一个函数一样。只有当信号关联的所有槽函数执行完毕后，才会执行发射信号处后面的代码。</li></ul><h1 id="Qt-Creator快捷键总结（摘自CSDN）"><a href="#Qt-Creator快捷键总结（摘自CSDN）" class="headerlink" title="Qt Creator快捷键总结（摘自CSDN）"></a>Qt Creator快捷键总结（摘自CSDN）</h1><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-669f6d6a3547c6894.png" alt="6"></p><h1 id="Qt元对象系统"><a href="#Qt元对象系统" class="headerlink" title="Qt元对象系统"></a>Qt元对象系统</h1><p>提供对象之间通信的信号与槽机制、运行时类型信息和动态属性系统。</p><p>1.实现基础：</p><ul><li>QObject 类是所有使用元对象系统的类的基类。</li><li>在一个类的 private 部分声明 Q_OBJECT宏，使得类可以使用元对象的特性，如动态属性、信号与槽。</li><li>MOC（元对象编译器）为每个 QObject 的子类提供必要的代码来实现元对象系统的特性。</li></ul><h1 id="属性系统"><a href="#属性系统" class="headerlink" title="属性系统"></a>属性系统</h1><p>Qt 提供一个 Q_PROPERTY() 宏可以定义属性，它也是基于元对象系统实现的。Qt 的属性系统与 C++ 编译器无关，可以用任何标准的 C++ 编译器编译定义了属性的 Qt C++ 程序。</p><p>1.如何使用属性？</p><p>只要知道属性的名称，就可以通过QObject::property()读取属性值，通过QObject::setProperty()设置属性值</p><p>2.动态属性？</p><p>程序运行时为类定义一个新的属性，针对某一个类的实例，而非某个确定的类。动态属性可以使用 QObject::property() 查询，就如在类定义里用 Q_PROPERTY 宏定义的属性一样。</p><p>3.类的附加信息？<br>形式：Q_CLASSINFO(“”,””);</p><p>作用：通过元对象的一些函数获取类的附加信息。</p><h1 id="迭代器（只关注STL部分）"><a href="#迭代器（只关注STL部分）" class="headerlink" title="迭代器（只关注STL部分）"></a>迭代器（只关注STL部分）</h1><p>1.STL类型的迭代器类：</p><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitledeae5d2777a834f49.png" alt="7"></p><p>2.顺序迭代器的使用方法：</p><p>逐项输出列表中的元素：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QList<span class="token operator">&lt;</span>QString<span class="token operator">&gt;</span> list<span class="token punctuation">;</span>list <span class="token operator">&lt;&lt;</span> <span class="token string">"A"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"B"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"C"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"D"</span><span class="token punctuation">;</span>QList<span class="token operator">&lt;</span>QString<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator i<span class="token punctuation">;</span><span class="token comment">//constBegin()和constEnd()仅用于只读迭代器</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">constBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> list<span class="token punctuation">.</span><span class="token function">constEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据改为小写：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">QList<span class="token operator">&lt;</span>QString<span class="token operator">&gt;</span> list<span class="token punctuation">;</span>list <span class="token operator">&lt;&lt;</span> <span class="token string">"A"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"B"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"C"</span> <span class="token operator">&lt;&lt;</span> <span class="token string">"D"</span><span class="token punctuation">;</span>QList<span class="token operator">&lt;</span>QString<span class="token operator">&gt;</span><span class="token double-colon punctuation">::</span>const_iterator i<span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">constBegin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i <span class="token operator">!=</span> list<span class="token punctuation">.</span><span class="token function">constEnd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span>    <span class="token function">qDebug</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token operator">*</span>i<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Qt-foreach关键词用法"><a href="#Qt-foreach关键词用法" class="headerlink" title="Qt foreach关键词用法"></a>Qt foreach关键词用法</h1><p>方便地访问容器里所有数据项</p><blockquote><p>foreach (variable, container)</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Qt </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 日常学习 </tag>
            
            <tag> Qt </tag>
            
            <tag> 概念 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java 中级</title>
      <link href="/2021/10/05/java-zhong-ji/"/>
      <url>/2021/10/05/java-zhong-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="java中级"><a href="#java中级" class="headerlink" title="java中级"></a>java中级</h1><h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><h3 id="文件打开"><a href="#文件打开" class="headerlink" title="文件打开"></a>文件打开</h3><p>File f = new File(“C:\file.txt”);</p><h3 id="throw和throws的区别"><a href="#throw和throws的区别" class="headerlink" title="throw和throws的区别"></a>throw和throws的区别</h3><p>throws与throw这两个关键字接近，不过意义不一样，有如下区别：</p><ol><li><p>throws 出现在方法声明上，而throw通常都出现在方法体内。</p></li><li><p>throws 表示出现异常的一种可能性，并不一定会发生这些异常；throw则是抛出了异常，执行throw则一定抛出了某个异常对象。</p></li></ol><h3 id="CheckedException"><a href="#CheckedException" class="headerlink" title="CheckedException"></a>CheckedException</h3><p>必须进行处理的异常</p><p><img src="https://s3.bmp.ovh/imgs/2021/11/a2a7465cd3b0ef45.png"></p><h3 id="异常类型详解"><a href="#异常类型详解" class="headerlink" title="异常类型详解"></a>异常类型详解</h3><p>ArithmeticException——由于除数为0引起的异常； </p><p>ArrayStoreException——由于数组存储空间不够引起的异常； </p><p>ClassCastException—一当把一个对象归为某个类，但实际上此对象并不是由这个类 创建的，也不是其子类创建的，则会引起异常； </p><p>IllegalMonitorStateException——监控器状态出错引起的异常； </p><p>NegativeArraySizeException—一数组长度是负数，则产生异常； </p><p>NullPointerException—一程序试图访问一个空的数组中的元素或访问空的对象中的 方法或变量时产生异常； </p><p>OutofMemoryException——用new语句创建对象时，如系统无法为其分配内存空 间则产生异常； </p><p>SecurityException——由于访问了不应访问的指针，使安全性出问题而引起异常； </p><p>IndexOutOfBoundsExcention——由于数组下标越界或字符串访问越界引起异常； </p><p>IOException——由于文件未找到、未打开或者I/O操作不能进行而引起异常； </p><p>ClassNotFoundException——未找到指定名字的类或接口引起异常； </p><p>CloneNotSupportedException——一程序中的一个对象引用Object类的clone方法，但 此对象并没有连接Cloneable接口，从而引起异常； </p><p>InterruptedException—一当一个线程处于等待状态时，另一个线程中断此线程，从 而引起异常，有关线程的内容，将在下一章讲述； </p><p>NoSuchMethodException一所调用的方法未找到，引起异常； </p><p>Illega1AccessExcePtion—一试图访问一个非public方法； </p><p>StringIndexOutOfBoundsException——访问字符串序号越界，引起异常； </p><p>ArrayIdexOutOfBoundsException—一访问数组元素下标越界，引起异常； </p><p>NumberFormatException——字符的UTF代码数据格式有错引起异常； </p><p>IllegalThreadException—一线程调用某个方法而所处状态不适当，引起异常； </p><p>FileNotFoundException——未找到指定文件引起异常； </p><p>EOFException——未完成输入操作即遇文件结束引起异常。</p><h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">EnemyHeroIsDeadException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span><span class="token punctuation">{</span>         <span class="token keyword">public</span> <span class="token class-name">EnemyHeroIsDeadException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>             <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">EnemyHeroIsDeadException</span><span class="token punctuation">(</span><span class="token class-name">String</span> msg<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>具体的实现内容：在类的方法中实现</p><h3 id="文件I-O"><a href="#文件I-O" class="headerlink" title="文件I/O"></a>文件I/O</h3><p>1.File常用方法：</p><p>exists()                      判断文件是否存在</p><p>f.list()</p><p>File []fs = f.listFiles()</p><p>getAbsolutePath()    返回文件的绝对路径</p><p>getParent()</p><p>isDirectory()</p><p>isFile()</p><p>length()</p><p>lastModified()</p><p>mkdirs()</p><p>renameTo(String str)</p><p>setLastModified(0)</p><h3 id="流输入输出"><a href="#流输入输出" class="headerlink" title="流输入输出"></a>流输入输出</h3><p>InputStream，OutputStream</p><p>代码示例：</p><blockquote><p>FileInputStream fis = new FileInputStream(f)</p></blockquote><p>字节流的形式读取文件：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">File</span> f <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建基于文件的输入流</span>            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//创建字节数组，其长度就是文件的长度</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> all <span class="token operator">=</span><span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//以字节流的形式读取文件所有内容</span>            fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>all<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">byte</span> b <span class="token operator">:</span> all<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//打印出来是65 66</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>                         <span class="token comment">//每次使用完流，都应该进行关闭</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="拆分文件"><a href="#拆分文件" class="headerlink" title="拆分文件"></a>拆分文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"分割输出："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> bytes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1000</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> filenum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> <span class="token number">1000</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">%</span>size<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                filenum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>size<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>                filenum <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">/</span>size <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> filenum<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment">//w1为目标文件名</span>                <span class="token class-name">File</span> w1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:\\a\\tupu118"</span><span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>i<span class="token operator">+</span><span class="token string">".pdf"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span>w1<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>num <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    fos<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>bytes<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"输出子文件：%s，文件大小为%d字节%n"</span><span class="token punctuation">,</span>w1<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">stream</span><span class="token punctuation">;</span>  <span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileWriter</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestStream</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment">// 准备文件lol2.txt</span>        <span class="token class-name">File</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:/lol2.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 创建基于文件的Writer</span>        <span class="token keyword">try</span> <span class="token punctuation">(</span><span class="token class-name">FileWriter</span> fr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileWriter</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// 以字符流的形式把数据写入到文件中</span>            <span class="token class-name">String</span> data<span class="token operator">=</span><span class="token string">"abcdefg1234567890"</span><span class="token punctuation">;</span>            <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> data<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fr<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>cs<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment">// TODO Auto-generated catch block</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>String→char型数组→write</p><h3 id="文件加密-解密"><a href="#文件加密-解密" class="headerlink" title="文件加密/解密"></a>文件加密/解密</h3>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 日常学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之杂七杂八的知识点</title>
      <link href="/2021/07/21/java-zhi-za-qi-za-ba-de-zhi-shi-dian/"/>
      <url>/2021/07/21/java-zhi-za-qi-za-ba-de-zhi-shi-dian/</url>
      
        <content type="html"><![CDATA[<h1 id="杂七杂八的知识点"><a href="#杂七杂八的知识点" class="headerlink" title="杂七杂八的知识点"></a>杂七杂八的知识点</h1><h3 id="整型计算"><a href="#整型计算" class="headerlink" title="整型计算"></a>整型计算</h3><p>1.整型和整型进行运算的时候，如果两边的值都是小于或者等于int的，那么其结果就是int。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloWorld</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token keyword">final</span> <span class="token keyword">int</span> j<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">short</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token keyword">short</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取字符"><a href="#读取字符" class="headerlink" title="读取字符"></a>读取字符</h3><p>2.如何读取一个字符？</p><p>先创建一个Scanner对象</p><p>调用Scanner对象的next()方法获取控制台输入，返回的是一个String类型,因为没有nextChar()方法</p><p>调用String的charAt(0)方法获取第一个字符</p><p>Scanner sc = new Scanner(System.in);</p><p>String s = sc.next();</p><p>char c = s.charAt(0);</p><h3 id="foreach-增强for循环，提高循环效率"><a href="#foreach-增强for循环，提高循环效率" class="headerlink" title="foreach 增强for循环，提高循环效率"></a>foreach 增强for循环，提高循环效率</h3><p>示例：for(String elemnets : str)</p><h3 id="数组的复制"><a href="#数组的复制" class="headerlink" title="数组的复制"></a>数组的复制</h3><p>System.arraycopy(src, srcPos, dest, destPos, length)</p><p>（原数组，数组起始位置，新数组，起始位置，长度）</p><h3 id="print无换行，println有换行"><a href="#print无换行，println有换行" class="headerlink" title="print无换行，println有换行"></a>print无换行，println有换行</h3><h3 id="Array相关函数"><a href="#Array相关函数" class="headerlink" title="Array相关函数"></a>Array相关函数</h3><p>1.copyOfRnge()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">int</span> b<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">copyOfRange</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2.toString()</p><p>输出的为数组形式的字符串</p><p>3.binarySearch(a,data)</p><p>4.equals(a, b) 比较内容是否一样</p><p>5.fill(a, 5)</p><h3 id="函数的可变参数"><a href="#函数的可变参数" class="headerlink" title="函数的可变参数"></a>函数的可变参数</h3><p>public void attack(Hero …heros)</p><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ADHero</span> <span class="token keyword">extends</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" 进行了一次攻击 ，但是不确定打中谁了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">// 可变数量的参数</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">attack</span><span class="token punctuation">(</span><span class="token class-name">Hero</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> heros<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> heros<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">" 攻击了 "</span> <span class="token operator">+</span> heros<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">ADHero</span> bh <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ADHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>bh<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"赏金猎人"</span><span class="token punctuation">;</span><span class="token class-name">Hero</span> h1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>h1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"盖伦"</span><span class="token punctuation">;</span><span class="token class-name">Hero</span> h2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>h2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"提莫"</span><span class="token punctuation">;</span>bh<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span class="token punctuation">;</span>bh<span class="token punctuation">.</span><span class="token function">attack</span><span class="token punctuation">(</span>h1<span class="token punctuation">,</span> h2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="java类中的数据成员未加修饰默认为公共类型"><a href="#java类中的数据成员未加修饰默认为公共类型" class="headerlink" title="java类中的数据成员未加修饰默认为公共类型"></a>java类中的数据成员未加修饰默认为公共类型</h3><h3 id="类中的静态方法与类一点关系都没有，切记"><a href="#类中的静态方法与类一点关系都没有，切记" class="headerlink" title="类中的静态方法与类一点关系都没有，切记"></a>类中的静态方法与类一点关系都没有，切记</h3><h3 id="对于静态变量、静态初始化块、变量、初始化块、构造器，它们的初始化顺序以此是（静态变量、静态初始化块）-gt-（变量、初始化块）-gt-构造器"><a href="#对于静态变量、静态初始化块、变量、初始化块、构造器，它们的初始化顺序以此是（静态变量、静态初始化块）-gt-（变量、初始化块）-gt-构造器" class="headerlink" title="对于静态变量、静态初始化块、变量、初始化块、构造器，它们的初始化顺序以此是（静态变量、静态初始化块）>（变量、初始化块）>构造器"></a>对于静态变量、静态初始化块、变量、初始化块、构造器，它们的初始化顺序以此是（静态变量、静态初始化块）&gt;（变量、初始化块）&gt;构造器</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">charactor</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"some hero"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">Hero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>name <span class="token operator">=</span> <span class="token string">"one hero"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">{</span>name <span class="token operator">=</span> <span class="token string">"the hero"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>顺序：some-the-one</p><h2 id="只构造一个实例"><a href="#只构造一个实例" class="headerlink" title="只构造一个实例"></a>只构造一个实例</h2><h3 id="饿汉模式"><a href="#饿汉模式" class="headerlink" title="饿汉模式"></a>饿汉模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">charactor</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GiantDragon</span> <span class="token punctuation">{</span>    <span class="token comment">//私有化构造方法使得该类无法在外部通过new 进行实例化</span><span class="token keyword">private</span> <span class="token class-name">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment">//准备一个类属性，指向一个实例化对象。 因为是类属性，所以只有一个</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">GiantDragon</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GiantDragon</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//public static 方法，提供给调用者获取12行定义的对象</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">GiantDragon</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> instance<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">charactor</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestGiantDragon</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//通过new实例化会报错</span><span class="token comment">//GiantDragon g = new GiantDragon();</span><span class="token comment">//只能通过getInstance得到对象</span><span class="token class-name">GiantDragon</span> g1 <span class="token operator">=</span> <span class="token class-name">GiantDragon</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">GiantDragon</span> g2 <span class="token operator">=</span> <span class="token class-name">GiantDragon</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">GiantDragon</span> g3 <span class="token operator">=</span> <span class="token class-name">GiantDragon</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//都是同一个对象</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g1<span class="token operator">==</span>g2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>g1<span class="token operator">==</span>g3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>区别：（主要为时间上）</p><p>饿汉式是立即加载的方式，无论是否会用到这个对象，都会加载。</p><p>如果在构造方法里写了性能消耗较大，占时较久的代码，比如建立与数据库的连接，那么就会在启动的时候感觉稍微有些卡顿。</p><p>懒汉式，是延迟加载的方式，只有使用的时候才会加载。 并且有</p><p><a href="https://how2j.cn/k/thread/thread-synchronized/355.html#step793">线程安全</a></p><p>的考量(鉴于同学们学习的进度，暂时不对线程的章节做展开)。</p><p>使用懒汉式，在启动的时候，会感觉到比饿汉式略快，因为并没有做对象的实例化。 但是在第一次调用的时候，会进行实例化操作，感觉上就略慢</p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="什么是单例模式？"><a href="#什么是单例模式？" class="headerlink" title="什么是单例模式？"></a>什么是单例模式？</h3><ol><li><p>构造方法私有化</p></li><li><p>静态属性指向实例</p></li><li><p>public static的 getInstance方法，返回第二步的静态属性</p></li></ol><h3 id="枚举enum是一种特殊的类-还是类-，使用枚举可以很方便的定义常量"><a href="#枚举enum是一种特殊的类-还是类-，使用枚举可以很方便的定义常量" class="headerlink" title="枚举enum是一种特殊的类(还是类)，使用枚举可以很方便的定义常量"></a>枚举enum是一种特殊的类(还是类)，使用枚举可以很方便的定义常量</h3><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">Season</span> <span class="token punctuation">{</span>SPRING<span class="token punctuation">,</span>SUMMER<span class="token punctuation">,</span>AUTUMN<span class="token punctuation">,</span>WINTER<span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="父类向子类转换需要强转"><a href="#父类向子类转换需要强转" class="headerlink" title="父类向子类转换需要强转"></a>父类向子类转换需要强转</h3><h3 id="类可以转换成接口"><a href="#类可以转换成接口" class="headerlink" title="类可以转换成接口"></a>类可以转换成接口</h3><p>代码示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">charactor</span><span class="token punctuation">;</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">float</span> hp<span class="token punctuation">;</span>           <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ADHero</span> ad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ADHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                  <span class="token class-name">AD</span> adi <span class="token operator">=</span> ad<span class="token punctuation">;</span>              <span class="token punctuation">}</span>       <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s3.bmp.ovh/imgs/2021/11/e2f937df6bf7ce6d.png" alt="1"></p><h3 id="类转换为某一个接口时，只能接受已连接接口的最近基类"><a href="#类转换为某一个接口时，只能接受已连接接口的最近基类" class="headerlink" title="类转换为某一个接口时，只能接受已连接接口的最近基类"></a>类转换为某一个接口时，只能接受已连接接口的最近基类</h3><h3 id="instanceof方法判断"><a href="#instanceof方法判断" class="headerlink" title="instanceof方法判断"></a>instanceof方法判断</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">charactor</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hero</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">protected</span> <span class="token keyword">float</span> hp<span class="token punctuation">;</span>          <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ADHero</span> ad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ADHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">APHero</span> ap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">APHero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">Hero</span> h1<span class="token operator">=</span> ad<span class="token punctuation">;</span>        <span class="token class-name">Hero</span> h2<span class="token operator">=</span> ap<span class="token punctuation">;</span>                 <span class="token comment">//判断引用h1指向的对象，是否是ADHero类型</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h1 <span class="token keyword">instanceof</span> <span class="token class-name">ADHero</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//判断引用h2指向的对象，是否是APHero类型</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h2 <span class="token keyword">instanceof</span> <span class="token class-name">APHero</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token comment">//判断引用h1指向的对象，是否是Hero的子类型</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>h1 <span class="token keyword">instanceof</span> <span class="token class-name">Hero</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="String的“-”方法能够将不同类型的元素进行连接吗，形成字符串"><a href="#String的“-”方法能够将不同类型的元素进行连接吗，形成字符串" class="headerlink" title="String的“+”方法能够将不同类型的元素进行连接吗，形成字符串"></a>String的“+”方法能够将不同类型的元素进行连接吗，形成字符串</h3><h3 id="子类只能继承一个抽象类，不能继承多个，java不支持多继承"><a href="#子类只能继承一个抽象类，不能继承多个，java不支持多继承" class="headerlink" title="子类只能继承一个抽象类，不能继承多个，java不支持多继承"></a>子类只能继承一个抽象类，不能继承多个，java不支持多继承</h3><h3 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">charactor</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Mortal</span> <span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">default</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">revive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"本英雄复活了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="接口中加入default修饰可写具体的方法"><a href="#接口中加入default修饰可写具体的方法" class="headerlink" title="接口中加入default修饰可写具体的方法"></a>接口中加入default修饰可写具体的方法</h3><h2 id="字符串与数字"><a href="#字符串与数字" class="headerlink" title="字符串与数字"></a>字符串与数字</h2><h3 id="封装类"><a href="#封装类" class="headerlink" title="封装类"></a>封装类</h3><p><img src="https://s1.imagehub.cc/images/2021/11/12/Untitled-2.png" alt="2"></p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">package digit<span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestNumber</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>                 <span class="token comment">//把一个基本类型的变量,转换为Integer对象</span>        Integer it <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//把一个Integer对象，转换为一个基本类型的int</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> it<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自动装箱-拆箱"><a href="#自动装箱-拆箱" class="headerlink" title="自动装箱/拆箱"></a>自动装箱/拆箱</h3><p>例：int i=0;  Integer=i;</p><p>Integer的部分函数;</p><p>1.Integer.MAX_VALUE</p><p>2.Integer.MIN_VALUE</p><h2 id="整型-字符型转换"><a href="#整型-字符型转换" class="headerlink" title="整型/字符型转换"></a>整型/字符型转换</h2><p>int →String        valueof()  或  装箱后toString（）</p><p>String→int         Inter.parseInt(str)</p><h2 id="Math"><a href="#Math" class="headerlink" title="Math"></a>Math</h2><p>round 四舍五入</p><p>random 0-1之间的随机数</p><p>E  自然常数</p><h2 id="格式化输出"><a href="#格式化输出" class="headerlink" title="格式化输出"></a>格式化输出</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">package digit<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestNumber</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         String name <span class="token operator">=</span><span class="token string">"盖伦"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> kill <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        String title<span class="token operator">=</span><span class="token string">"超神"</span><span class="token punctuation">;</span>                 String sentenceFormat <span class="token operator">=</span><span class="token string">"%s 在进行了连续 %d 次击杀后，获得了 %s 的称号%n"</span><span class="token punctuation">;</span>        <span class="token comment">//使用printf格式化输出</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>sentenceFormat<span class="token punctuation">,</span>name<span class="token punctuation">,</span>kill<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用format格式化输出</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>sentenceFormat<span class="token punctuation">,</span>name<span class="token punctuation">,</span>kill<span class="token punctuation">,</span>title<span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Character常用方法"><a href="#Character常用方法" class="headerlink" title="Character常用方法"></a>Character常用方法</h2><p>1.isLetter（char c）</p><p>2.isDigit(char c)</p><p>3.isWhitespace(char c) 判断是否为空白</p><p>4.isUpperCase(char c) 大小写转换，下同</p><p>5.isLowerCase(char c)</p><p>6.toUpperCase(char c)</p><p>7.toLowerCase(char c)</p><h2 id="生成随机数-有固定范围"><a href="#生成随机数-有固定范围" class="headerlink" title="生成随机数(有固定范围)"></a>生成随机数(有固定范围)</h2><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Random rand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> num<span class="token operator">=</span>rand<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">48</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="String详解"><a href="#String详解" class="headerlink" title="String详解"></a>String详解</h2><p><img src="https://s3.bmp.ovh/imgs/2021/11/5d42c0e3cca4a1ca.png" alt="3"></p><h2 id="StringBuffer"><a href="#StringBuffer" class="headerlink" title="StringBuffer"></a>StringBuffer</h2><p><img src="https://s3.bmp.ovh/imgs/2021/11/323a47df144e5f24.png" alt="4"></p><p><strong>System.out.println(sb.capacity());//总空间</strong></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 日常学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之泛型程序设计</title>
      <link href="/2021/07/21/java-zhi-fan-xing-cheng-xu-she-ji/"/>
      <url>/2021/07/21/java-zhi-fan-xing-cheng-xu-she-ji/</url>
      
        <content type="html"><![CDATA[<h1 id="泛型程序设计"><a href="#泛型程序设计" class="headerlink" title="泛型程序设计"></a>泛型程序设计</h1><h2 id="引入泛型程序设计的目的"><a href="#引入泛型程序设计的目的" class="headerlink" title="引入泛型程序设计的目的"></a>引入泛型程序设计的目的</h2><p>实现代码复用，提高程序的运行速率</p><h3 id="类型参数应用"><a href="#类型参数应用" class="headerlink" title="类型参数应用"></a>类型参数应用</h3><p>1.用处：指定使用的构造器的类型，具有可读性；</p><p>2.示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">var</span> files <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> files <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//另一种形式</span><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> passwords <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">//对匿名子类进行菱形语法的使用</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匿名子类？<br><a href="https://blog.csdn.net/qq1922631820/article/details/85122494">https://blog.csdn.net/qq1922631820/article/details/85122494</a></p><h2 id="简单泛型类"><a href="#简单泛型类" class="headerlink" title="简单泛型类"></a>简单泛型类</h2><p>代码示例：</p><pre><code>package pair1;import com.github.javaparser.utils.Pair;class ArrayAlg{    public static Pair&lt;String,String&gt; minmax(String[] a){        if(a == null || a.length == 0){            return null;        }        String min = a[0];        String max = a[0];        for(int i=0;i&lt;a.length;i++){            if(max.compareTo(a[i])&lt;0)                max = a[i];            if(min.compareTo(a[i])&gt;0)                min = a[i];        }        return new Pair&lt;&gt;(min, max);    }}public class PairTest1 {    public static void main(String[] args) {        String[] words = {"Mary","had","a","little","lamb"};        Pair&lt;String,String&gt; mm = ArrayAlg.minmax(words);        System.out.println(mm.getKey());        System.out.println(mm.getValue());    }}</code></pre><p>注：pair插件在intelli中存在，且官方文档中含有getValue（）函数，但是在编译过程中不能应用。</p><h2 id="泛型方法"><a href="#泛型方法" class="headerlink" title="泛型方法"></a>泛型方法</h2><p>1.示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">ArrayAlg</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span> <span class="token class-name">T</span> <span class="token function">getMiddle</span><span class="token punctuation">(</span><span class="token class-name">T</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> a<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> a<span class="token punctuation">[</span>a<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.在普通类中定义，而不是在泛型类中；</p><p>3.形式：类型变量放在修饰符的后面，并在返回类型的前面；</p><p>4.防止错误信息：传入的参数必须保持类型相同；</p><h2 id="类型变量的限定"><a href="#类型变量的限定" class="headerlink" title="类型变量的限定"></a>类型变量的限定</h2><p>1.限制T一定含有某个接口</p><blockquote><p>public static <t extends="" comparable=""> T min(T[] a)</t></p></blockquote><p>2.<t extends="" boundingtype="">应该是限定类型（bounding type）的子类型</t></p><p>3.设置多个限定：</p><p>T extends Comparable &amp; Serialiable</p><pre><code>package pair2;import com.github.javaparser.utils.Pair;import java.time.LocalDate;class ArrayAlg{    public static &lt;T extends Comparable&gt; Pair&lt;T&gt; minmax(T[] a){        if(a==null || a.length==0){            return null;        }        T min=a[0];        T max=a[0];        for(int i=0;i&lt;a.length;i++){            if(min.compareTo(a[i])&gt;0)                min=a[i];            if(max.compareTo(a[i])&lt;0)                max=a[i];        }        return new Pair&lt;&gt;(min,max);    }}public class PairTest2 {    public static void main(String[] args) {        LocalDate[] birthday = {                LocalDate.of(1996,12,9),                LocalDate.of(1815,12,10),                LocalDate.of(1903,12,3),                LocalDate.of(1910,6,22)        };        Pair&lt;LocalDate&gt; mm = ArraryAlg.minmax(birthday);        System.out.println("min="+mm.getFirst());        System.out.println("max="+mm.getSecond());    }}</code></pre><h2 id="泛型代码和虚拟机（略）"><a href="#泛型代码和虚拟机（略）" class="headerlink" title="泛型代码和虚拟机（略）"></a>泛型代码和虚拟机（略）</h2><h3 id="类型擦除"><a href="#类型擦除" class="headerlink" title="类型擦除"></a>类型擦除</h3><h3 id="转换泛型表达式"><a href="#转换泛型表达式" class="headerlink" title="转换泛型表达式"></a>转换泛型表达式</h3><p>产生原因：擦除返回类型后，进入强制类型转换的插入，虚拟机会把方法转化成两条指令：</p><ul><li>对原始方法Pair.getFirst的调用</li><li>将返回的Object类型强制转换为Employee类型</li></ul><h3 id="转换泛型方法"><a href="#转换泛型方法" class="headerlink" title="转换泛型方法"></a>转换泛型方法</h3><p>桥方法：</p><p><a href="https://blog.csdn.net/hao_yan_bing/article/details/89447792">https://blog.csdn.net/hao_yan_bing/article/details/89447792</a></p><h2 id="限制与局限性"><a href="#限制与局限性" class="headerlink" title="限制与局限性"></a>限制与局限性</h2><ul><li>不能用基本类型实例化类型参数（getClass总是返回原始类型）</li><li>不能创建参数化类型的数组（当然，你可以声明通配类型的数组，然后进行强制类型转换。例：var table = (Pair<string>[]) new Pair&lt;?&gt;[10];)）</string></li><li>运行时类型查询只适用于原始类型</li><li>Varargs警告（可变参数）</li><li>不能实例化类型变量</li><li>不能构造泛型数组</li><li>不能抛出或捕捉泛型类的实例</li><li>可以取消对检查型异常的检查</li><li>注意擦除后的冲突：</li></ul><p>倘若两个接口类型是同一个接口的不同参数化，一个类或类型变量就不能同时作为这两个接口类型的子类</p><h2 id="泛型类型的继承规则"><a href="#泛型类型的继承规则" class="headerlink" title="泛型类型的继承规则"></a>泛型类型的继承规则</h2><p>1.通常情况下，Pair<t>和Pair<s>不存在任何关系；</s></t></p><s><p>2.泛型类可以转化成实现其他的泛型类,与其他的类没有任何区别</p><h2 id="通配符类型"><a href="#通配符类型" class="headerlink" title="通配符类型"></a>通配符类型</h2><p>1.什么是通配符？（示例：Pair &lt;? extends Employee&gt;）</p><p>用于表示任何泛型，不存在子类的关系；</p></s>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 日常学习 </tag>
            
            <tag> 自我提升 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之异常、断言和日志</title>
      <link href="/2021/07/21/java-zhi-yi-chang-duan-yan-he-ri-zhi/"/>
      <url>/2021/07/21/java-zhi-yi-chang-duan-yan-he-ri-zhi/</url>
      
        <content type="html"><![CDATA[<h1 id="异常、断言和日志"><a href="#异常、断言和日志" class="headerlink" title="异常、断言和日志"></a>异常、断言和日志</h1><h2 id="处理错误"><a href="#处理错误" class="headerlink" title="处理错误"></a>处理错误</h2><p>1.哪些方面会经常出现错误呢？</p><p>1）连接的url语法不正确（例：用户输入账号格式不正确）</p><p>2）设备出现问题（内存）</p><p>3）代码错误</p><p>2.如何处理异常？</p><p>抛出一个封装了错误信息的对象，不返回任何正常值。（利用异常处理器进行处理）</p><h3 id="异常分类"><a href="#异常分类" class="headerlink" title="异常分类"></a>异常分类</h3><p>1.异常对象都是派生于Throwable类的一个类实例；</p><p>2.java中的异常层次结构：</p><p>Throwable：所有异常类的超类</p><p>Error：内部错误以及资源耗尽的错误（不常见）</p><p>Exception：代码错误或输入错误，较为常见</p><p>IOException：从Exceptoin继承，主要针对的异常：文件读取越界、访问不存在的文件或类</p><p>RuntimeExceptinon：从Exception继承，主要针对的异常：错误的类型转换、数组越界、指针为空</p><p>3.横向分类：</p><p>非检查类：RuntimeException，error；</p><p>检查类：IOException</p><blockquote><p>C++中的异常类有runtime_error(非检查类问题)和logic_error(检查问题)</p></blockquote><h3 id="检查型异常的声明"><a href="#检查型异常的声明" class="headerlink" title="检查型异常的声明"></a>检查型异常的声明</h3><p>1.类型：throws …Exception,…..Exception</p><p>2.抛出异常的前提条件：</p><p>调用一个抛出异常的方法</p><p>检测到错误并且抛出一个检查型异常</p><p>程序错误</p><p>虚拟机的库内发生问题</p><p>3.一个方法必须声明所有可能抛出的检查性异常，而非检查型异常，，要么在控制之外，要么一开始就应该避免发生的情况</p><p>4.一个类声明的抛出异常应该对应某个特定类的示例，或者是这个特定类的子类</p><h3 id="如何抛出异常"><a href="#如何抛出异常" class="headerlink" title="如何抛出异常"></a>如何抛出异常</h3><p>创建一个合适的异常类，实例化一个对象，然后将对象抛出</p><h3 id="创建异常类"><a href="#创建异常类" class="headerlink" title="创建异常类"></a>创建异常类</h3><p>例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">FileForException</span> <span class="token keyword">extends</span> <span class="token class-name">IOException</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token class-name">FileFormatException</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token class-name">FileFormatException</span><span class="token punctuation">(</span><span class="token class-name">String</span> gripe<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">super</span><span class="token punctuation">(</span>gripe<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="捕获异常"><a href="#捕获异常" class="headerlink" title="捕获异常"></a>捕获异常</h2><p>1.如果想要抛出一个异常，必须在首部添加一个throws说明符，提醒调用者可能会出现异常；</p><p>2.示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">{</span>code<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">catch</span><span class="token punctuation">(</span>file <span class="token operator">|</span> unknown e<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment">//一次性捕获多个异常</span>code<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Finally语句"><a href="#Finally语句" class="headerlink" title="Finally语句"></a>Finally语句</h3><p>1.用途：在抛出异常后部分资源需要进行清理、分配；</p><p>2.执行Finally语句的前提？</p><p>在上文语句中有try（无论是否 有异常跳出）</p><p>3.无论是否有异常抛出，都会执行finally块中的in.close（）语句。有异常抛出时，finally块会将异常重新进行抛出。</p><h3 id="Try-with-Resources"><a href="#Try-with-Resources" class="headerlink" title="Try-with-Resources"></a>Try-with-Resources</h3><p>1.用途：关闭接口的使用，同时将未完成的资源进行关闭处理；</p><p>2.示例:</p><pre><code>try(var in = Scanner(new FileInputStream(" "), StandardCharsets.UTF_8)){            while(in.hasNext()){                System.out.println(in.next());            }        }</code></pre><h3 id="堆栈轨迹分析"><a href="#堆栈轨迹分析" class="headerlink" title="堆栈轨迹分析"></a>堆栈轨迹分析</h3><p>示例：</p><pre><code>package stackTrace;import java.util.Scanner;public class stackTraceTest {    public static int factorial(int n){        System.out.println("factorial(" + n + "):");        var walker = StackWalker.getInstance();        walker.forEach(System.out::println);        int r;        if(n&lt;=1)            r=1;        else            r=n*factorial(n-1);        System.out.println("return" + r);        return r;    }    public static void main(String[] args) {        try(var in = new Scanner(System.in)){            System.out.print("enter n:");            int n = in.nextInt();            factorial(n);        }    }}</code></pre><h3 id="异常的部分注意事项"><a href="#异常的部分注意事项" class="headerlink" title="异常的部分注意事项"></a>异常的部分注意事项</h3><p>1.finally语句中禁止出现改变控制流的语句（如return throw break continue），会覆盖原代码的返回值,影响程序的进程；</p><p>2.不能过分细化异常，同时在也不能过于笼统地只抛出RuntimeExpection或者Throwable；</p><p>3.早抛出，晚抓取；</p><h2 id="断言（测试与调试阶段的工具）"><a href="#断言（测试与调试阶段的工具）" class="headerlink" title="断言（测试与调试阶段的工具）"></a>断言（测试与调试阶段的工具）</h2><p>1.何为断言？</p><p>断言机制允许在测试期间向代码中插入一些检查，而产生代码中会自动删除此类检查；</p><p>2.断言的形式：</p><pre><code>assert x&gt;=0 : x;//断言x为非负数，同时将x传入AssertException类</code></pre><p>3.如何启用/禁用断言机制？</p><p>使用时可以通过引入AssertExcetion类加载器，反之为禁用；</p><p>例：</p><blockquote><p>java -enableassertions MyApp</p></blockquote><p>同理也可以在某个类或整个包中使用启用断言（先类后包）</p><blockquote><p>java -ea:MyClass -ea:com.mycompany.mylib MyApp</p></blockquote><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><p>1.相较于C++而言，java的断言机制不会返回错误语句，需要在返回AssertException这个类中的字符串中添加报错字段：</p><blockquote><p>assert x ≥ 0 : “ x ≥ 0 “ ;</p></blockquote><p>2.断言往往应用在软件的开发测试阶段，且需要保持绝对的正确，防止断言失误导致程序应用时产生难以解决的bug；</p><p>3.在官方文档中，如果某一个方法出现前置条件（即要求绝对的方法解释），需要对这一要求进行断言处理，如：保证指针/对象非空。</p><h2 id="日志（陪伴程序整个生命周期）"><a href="#日志（陪伴程序整个生命周期）" class="headerlink" title="日志（陪伴程序整个生命周期）"></a>日志（陪伴程序整个生命周期）</h2><p>1.为什么引入日志？</p><p>调试bug时经常加入或删除部分输出语句来推断错误点，日志通过结合异常处理将错误进行分级记录，方便debug；</p><ul><li><p>日志的优点</p><p>  1.可以实现全部日志删除以及某一级别日志的删除；</p><p>  2.定向。即日志可以指向不同的处理器（文件、控制台）；</p><p>  3.过滤无用日志；</p><p>  4.一个应用程序可以搭载多个处理器；</p></li></ul><h3 id="基本日志"><a href="#基本日志" class="headerlink" title="基本日志"></a>基本日志</h3><p>全局日志记录器：<br>打印日志： Logger.getGlobal().info(“File →Open menu item selected”);</p><p>取消日志： Logger.getGlobal().setLevel(level.OFF);</p><p>更多API：<a href="https://blog.csdn.net/justfamily/article/details/104227702">https://blog.csdn.net/justfamily/article/details/104227702</a></p><h3 id="高级日志"><a href="#高级日志" class="headerlink" title="高级日志"></a>高级日志</h3><ul><li><p>日志级别（由高到低）</p><p>  1.SEVERE</p><p>  2.WARNING</p><p>  3.INFO（默认情况下，只记录前三个级别）</p><p>  4.CONFIG</p><p>  5.FINE</p><p>  6.FINER</p><p>  7.FINEST</p></li></ul><p>1.日志本地化：</p><p>目的：面向全球用户</p><p>更多：</p><p><a href="https://blog.csdn.net/PacosonSWJTU/article/details/50272839">java日志–修改日志管理器配置+日志本地化_PacosonSWJTU的博客-CSDN博客_java 日志本地化</a></p><h3 id="处理器"><a href="#处理器" class="headerlink" title="处理器"></a>处理器</h3><p>1.原理：将记录发送到CosoleHandler（有层次，即子类到父类）</p><p>2.如何将日志进行发送操作？（操作过程）</p><ul><li>FileHandler 将记录收集到文件中</li><li>Sokethandler 将记录发送到指定的主机和端口</li></ul><h3 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h3><p><a href="https://www.cnblogs.com/z-x-p/p/11691170.html">https://www.cnblogs.com/z-x-p/p/11691170.html</a></p><h3 id="格式化器"><a href="#格式化器" class="headerlink" title="格式化器"></a>格式化器</h3><p><a href="https://www.cnblogs.com/zk-blog/p/13409739.html">https://www.cnblogs.com/zk-blog/p/13409739.html</a></p><h3 id="日志编辑的常用技巧"><a href="#日志编辑的常用技巧" class="headerlink" title="日志编辑的常用技巧"></a>日志编辑的常用技巧</h3><p>1.对一个简单的应用，它的日志记录器可以命名为包的名字；</p><p>2.默认设置会将INFO等级及以上的信息传入控制台，默认设置可调；</p><p>3.由于最高三级的消息都会显示在控制台上，因此将较为有意义的放在前三级中，将其他等级较低的放在FINE中</p><h3 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h3><p>无（bug太多，免费版不支持日志功能）</p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 日常学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之接口、lambda表达式与内部类</title>
      <link href="/2021/07/21/java-zhi-jie-kou-lambda-biao-da-shi-yu-nei-bu-lei/"/>
      <url>/2021/07/21/java-zhi-jie-kou-lambda-biao-da-shi-yu-nei-bu-lei/</url>
      
        <content type="html"><![CDATA[<h1 id="接口、lambda表达式与内部类"><a href="#接口、lambda表达式与内部类" class="headerlink" title="接口、lambda表达式与内部类"></a>接口、lambda表达式与内部类</h1><h1 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h1><h2 id="接口的概念："><a href="#接口的概念：" class="headerlink" title="接口的概念："></a>接口的概念：</h2><p>对于某一个类，如果它具有一个接口，接口中含有多组要求，希望这个类能够实现这些功能。</p><p>1.疑问：<br>为什么不在类中点明某一个具体的方法，而是将方法的声明放在接口中？<br>1）强类型语言，在执行过程中如果有确定的接口与方法进行对接，不会出bug；</p><p>2）抽象类进行一次继承获得扩展类后不能继续继承（java拒绝多重继承）</p><p>2.接口实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Comparable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">T</span> other<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//类似于模板</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3.具体实现步骤：<br>1）将类声明为给定的接口：<br>例：class Employee implements Comparable<employee></employee></p><p>2）对接口中的所有方法实现定义：<br>例：public int compareTo(Employee other) return Double.compare(salary,other.salary);</p><p>4.注意点：</p><p>1）注意多态的使用，类似于精度损失，注意强制转换；</p><p>2）满足对称性、传递性和自反性，类相等判断依据，返回结果应当与equals相同；</p><p>3）技巧：在超类中设定接口对应算法供派生类应用；</p><h2 id="接口属性与默认方法"><a href="#接口属性与默认方法" class="headerlink" title="接口属性与默认方法"></a>接口属性与默认方法</h2><p>1.接口变量的使用：<br>1）用instanceof检验一个对象是否实现了某个特定的接口；</p><p>2）引用实现了这个接口的类的对象；</p><p>例：</p><p>if(anObject instanceof Comparable){}</p><p>Comparable e = new Employee();</p><p>2.接口扩展：类似于继承</p><p>3.默认方法的使用：<br>1）是什么？</p><p>接口方法的默认实现，类似于c++中构建虚函数进行实现，在子类中同时可以实现覆盖操作；</p><p>2）为什么？</p><p>将迭代器设置为只读，从而使防止栈中没有数据不能正常退出；</p><p>“接口演化”：长期存在的接口增加新的方法会导致源代码兼容出现问题（如果新方法没有进行默认处理）</p><p>3）怎么做：<br>在接口内部：default boolean isEmpty(T other){return size==0;}</p><p>4）默认方法出现冲突（二义性）</p><p>各类超类优先，接口方法覆盖；</p><p>注意：</p><p>1）接口中可以声明静态常量；</p><p>2）通过类优先的原则可知，object类的方法不能通过默认方法进行无效处理；</p><p>其他：</p><p>1）Object类中的clone函数：生成对应类对象的一个精准的副本（实现cloneable接口）</p><p>2）Path接口：URI或字符串构建资源的路径</p><p>实现方法举例：</p><p>public static Path of(URI uri){…}</p><h2 id="回调"><a href="#回调" class="headerlink" title="回调"></a>回调</h2><p>用户采取特定的动作，程序根据特定的动作进行特定输出；</p><p>直接上代码：（打点计时器（雾））</p><pre><code>package inherience;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.time.Instant;public class TimerTest {    public static void main(String[] args) {        var listener = new TimePrinter();//引入接口        var timer = new Timer(1000,listener);//时间构造器，计时，1000为时间间隔        timer.start();        JOptionPane.showMessageDialog(null,"Dear Master,quit program?");//界面提醒是否关闭程序        System.exit(0);    }}class TimePrinter implements ActionListener{    public void actionPerformed(ActionEvent event){        System.out.println("At the tone,the time is " + Instant.ofEpochMilli(event.getWhen()));//输出返回后的时间        Toolkit.getDefaultToolkit().beep();    }}</code></pre><h2 id="Comparator接口与对象克隆——两种接口实现"><a href="#Comparator接口与对象克隆——两种接口实现" class="headerlink" title="Comparator接口与对象克隆——两种接口实现"></a>Comparator接口与对象克隆——两种接口实现</h2><p>1.Comparator：数组排序新方法，根据长度大小进行排序：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> inferface <span class="token class-name">Comparator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">{</span><span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">T</span> first<span class="token punctuation">,</span><span class="token class-name">T</span> second<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> first<span class="token operator">-</span>second<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">var</span> comp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LengthComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>comp<span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>words<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>words<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token class-name">String</span> friend <span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">"xx"</span><span class="token punctuation">,</span><span class="token string">"yy"</span><span class="token punctuation">,</span><span class="token string">"zsz"</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>friend<span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token class-name">LengthComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.clone重载：（使用较少，了解即可）<br>1）区分默认clone函数（浅拷贝，拉），深拷贝：重写clone函数，引入Cloneable接口（为标记接口，只能用于查询时的instanceof）；</p><p>2）浅拷贝的缺点：<br>      拷贝后副本类中的子类会随着样本类的变化而变化，即共享子类；</p><p>默认拷贝函数为受保护类型，只能拷贝本身，用途不大；</p><p>3）主要代码实现：</p><pre><code>package inherience;public class CloneTest {    public static void main(String[] args) {        var original = new Employee(...);        original.setHireDay(...);        Employee copy = original.clone();        copy.raiseSalary(10);        copy.setHireDay(2002,12,31);    }}public class Employee{    public Employee clone(){        Employee cloned = (Employee) super.clone();//从基类开始生成派生类        cloned.hireDay=(Date)hireDay.clone();        return cloned;    }}</code></pre><h1 id="lambda表达式"><a href="#lambda表达式" class="headerlink" title="lambda表达式"></a>lambda表达式</h1><h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>传递代码块，相较于传递带有特定方法的类，效率较高。</p><h2 id="语法调用"><a href="#语法调用" class="headerlink" title="语法调用"></a>语法调用</h2><p>1.注意：<br>无需指定lambda表达式的返回类型，同时lambda表达式的实现可以通过写方法的形式进行；</p><p>2.代码实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//比较器实现：</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>plants<span class="token punctuation">,</span><span class="token punctuation">(</span>first<span class="token punctuation">,</span>second<span class="token punctuation">)</span><span class="token operator">-&gt;</span>first<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>second<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//动作监视器实现：</span><span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span>event<span class="token operator">-&gt;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"The time is "</span><span class="token operator">+</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>timer<span class="token punctuation">.</span>start<span class="token punctuation">;</span><span class="token comment">//(参数)-&gt;具体实现 </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="方法引用"><a href="#方法引用" class="headerlink" title="方法引用"></a>方法引用</h2><p>1.定义：当lambda表达式只调用一个方法，没有其他操作，可以进行简化，进行方法引用。</p><p>2.示例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Greeter</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello,the time is "</span> <span class="token operator">+</span> <span class="token class-name">Instant</span><span class="token punctuation">.</span><span class="token function">ofEpochMilli</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span><span class="token function">getWhen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">RepeatedGreeter</span> <span class="token keyword">extends</span> <span class="token class-name">Greeter</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">greet</span><span class="token punctuation">(</span><span class="token class-name">ActionEvent</span> event<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">var</span> timer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Timer</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">,</span><span class="token keyword">super</span><span class="token operator">::</span><span class="token function">greet</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        timer<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="构造器引用"><a href="#构造器引用" class="headerlink" title="构造器引用"></a>构造器引用</h2><p>示例：Stream<person> stream = names.stream().map(Person::new);//为各个列表元素调用Person（String）构造器；</person></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>1.组成部分：一个代码块、参数、自由变量的值；</p><p>2.引入的变量在表达式内和表达式外进行值的改变都是不安全的操作；</p><h1 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h1><p>1.示例：</p><pre><code>//实现打点计时器package innerClass;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.time.Instant;public class InnerClassTest {    public static void main(String[] args) {        var clock = new TalkingClock(1000,true);        clock.start();        JOptionPane.showMessageDialog(null,"Quit program?");        System.exit(0);    }}class TalkingClock{    private final int interval;    private final boolean beep;    public TalkingClock(int interval,boolean beep){        this.interval=interval;        this.beep=beep;    }    public void start(){        var listener = new TimePrinter();        var timer = new Timer(interval,listener);        timer.start();    }    //内部类实现    public class TimePrinter implements ActionListener{        public void actionPerformed(ActionEvent event){            System.out.println("At the tone,the time is " + Instant.ofEpochMilli(event.getWhen()));            if(beep){                Toolkit.getDefaultToolkit().beep();            }//在包内实现了隐藏        }    }}</code></pre><p>2.内部类的作用：<br>1）在同一个包中实现隐藏，类似于c++中的函数实现，不在包外显示，因此不需要；</p><p>2）内部类的对象会有一个隐式引用，指向这个实例化对象的外对象（outer）。</p><p>例：使用内部类构成链表时，不同链表中的元素都是各自链表的一个引用；</p><p>3）内部类可以引用外部类的私有成员（有降低安全性的风险），同时可以访问局部常量；</p><p>3.注意事项：</p><p>如何进行隐式引用？ 利用OuterClass.this表示外部类；</p><h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p>在外部类的函数中实现，类似于局部变量；</p><h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p>对上述代码进行改写：</p><pre><code>package anonymouslnnerClass;import javax.swing.*;import java.awt.*;import java.awt.event.ActionEvent;import java.awt.event.ActionListener;import java.time.Instant;public class AnonymouslnnerClassTest {    public static void main(String[] args) {        var clock = new TalkingClock();        clock.start(1000,true);        JOptionPane.showMessageDialog(null,"Quit the program?");        System.exit(0);    }}class TalkingClock{    public void start(int interval,boolean beep){        var listener = new ActionListener(){            public void actionPerformed(ActionEvent event){                System.out.println("At the tone,the time is "+Instant.ofEpochMilli(event.getWhen()));                if(beep)                    Toolkit.getDefaultToolkit().beep();            }        };//注意分号        var timer =new Timer(interval,listener);        timer.start();    }}</code></pre><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><pre><code>//从数组中挑选最大的元素（只有double类型）package staticInnerClass;import java.util.ArrayList;public class StaticInnerClassTest {    public static void main(String[] args) {        var values = new double[20];        for(int i=0;i&lt;values.length;i++)            values[i]=100*Math.random();        ArrayAlg.Pair p = ArrayAlg.minmax(values);        System.out.println("min= " + p.getFirst());        System.out.println("max= " + p.getSecond());    }}class ArrayAlg{    public static class Pair {        private double first;        private double second;        public Pair(double f, double s) {            first = f;            second = s;        }        public double getFirst() {            return first;        }        public double getSecond() {            return second;        }    }    public static Pair minmax(double[] values){        double min = Double.POSITIVE_INFINITY;        double max = Double.NEGATIVE_INFINITY;        for (double v: values) {            if(min&gt;v) min=v;            if(max&lt;v) max=v;        }        return new Pair(min,max);    }}</code></pre><h3 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h3><p>1.利用代理可以在运行过程中创建一组给定接口的新类，在程序运行的过程中进行创建；</p><p>2.代理类包含的方法：</p><p>指定接口所需方法以及Object类中的所有方法；</p><p>3.建立代理类需要的参数：</p><p>类加速器、Class对象数组、调用处理器；</p><p>4.代码示例：</p><pre><code>package proxy;import java.lang.reflect.InvocationHandler;import java.util.Arrays;import java.util.Random;public class ProxyTest {    public static void main(String[] args) {        var elements = new Object[1000];        for(int i=0;i&lt; elements.length;i++){            Integer value = i+1;            var handler = new TraceHandler(value);            Object proxy = Proxy.newProoxyInstance(ClassLoader.getSystemClassLoader(),new Class[]{Comparable.class},handler);            elements[i]=proxy;        }        Integer key = new Random().nextInt(elements.length)+1;        int result = Arrays.binarySearch(elements,key);        if(result&gt;=0)            System.out.println(elements[result]);    }}class TraceHandler implements InvocationHandler{    private Object target;    public TraceHandler(Object t){        target = t;    }    public Object invoke(Object proxy,Method m,Object[] args)throws Throwable{        System.out.print(target);        System.out.print("."+m.getName()+"(");        if(args!=null){            for(int i=0;i&lt;args.length;i++){                System.out.print(args[i]);                if(i&lt;args.length-1)                    System.out.println(",");            }        }        System.out.println(")");        return m.invoke(target,args);    }}</code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 日常学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java之继承</title>
      <link href="/2021/07/21/java-zhi-ji-cheng/"/>
      <url>/2021/07/21/java-zhi-ji-cheng/</url>
      
        <content type="html"><![CDATA[<h1 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h1><p>1.java不支持多重继承，提供了接口进行多重继承的操作；</p><p>2.继承部分代码；</p><pre><code><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">inherience</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDate</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> hireDay<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">double</span> salary<span class="token punctuation">,</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">int</span> day<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary<span class="token operator">=</span>salary<span class="token punctuation">;</span>        hireDay<span class="token operator">=</span><span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span>month<span class="token punctuation">,</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">LocalDate</span> <span class="token function">getHireDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> hireDay<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">raiseSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> byPercent<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> raise <span class="token operator">=</span>salary<span class="token operator">*</span>byPercent<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>        salary<span class="token operator">+=</span>raise<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> <span class="token namespace">inherience</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Employee</span><span class="token punctuation">{</span><span class="token comment">//实现继承</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> bonus<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">double</span> salary<span class="token punctuation">,</span> <span class="token keyword">int</span> year<span class="token punctuation">,</span> <span class="token keyword">int</span> month<span class="token punctuation">,</span> <span class="token keyword">int</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> salary<span class="token punctuation">,</span> year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>        bonus<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> baseSalary <span class="token operator">=</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> baseSalary<span class="token operator">+</span>bonus<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBonus</span><span class="token punctuation">(</span><span class="token keyword">double</span> b<span class="token punctuation">)</span><span class="token punctuation">{</span>        bonus <span class="token operator">=</span> b<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">3.</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token comment">//阻止对其进行派生；（作用同const）</span><span class="token number">4.</span>在进行强制转换时，要考虑能否成功地转化；<span class="token operator">*</span><span class="token operator">*</span><span class="token number">5.</span>构建抽象类：<span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">A</span><span class="token punctuation">;</span>注意：<span class="token number">1</span>）在抽象类中尽可能少地实现具体方法；<span class="token number">2</span>）方法全为具体的话，这个类不是抽象类；<span class="token number">6.</span>抽象类代码示例：<span class="token keyword">package</span> <span class="token namespace">inherience</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> people <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        people<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"xhsioio"</span><span class="token punctuation">,</span><span class="token number">10000</span><span class="token punctuation">,</span><span class="token number">1989</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        people<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token string">"ycy"</span><span class="token punctuation">,</span><span class="token string">"Engineering"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Person</span> p<span class="token operator">:</span>             people<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> p<span class="token punctuation">.</span><span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> <span class="token namespace">inherience</span><span class="token punctuation">;</span><span class="token keyword">public</span>  <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//类似于虚函数的写法，子类对其进行重载</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token operator">=</span>name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">package</span> <span class="token namespace">inherience</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">LocalDate</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> salary<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">LocalDate</span> hireDay<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">double</span> salary<span class="token punctuation">,</span><span class="token keyword">int</span> year<span class="token punctuation">,</span><span class="token keyword">int</span> month<span class="token punctuation">,</span><span class="token keyword">int</span> day<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>        hireDay <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>year<span class="token punctuation">,</span> month<span class="token punctuation">,</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">LocalDate</span> <span class="token function">getHireDay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> hireDay<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getDescription</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"an employee with a salary of $%.2f"</span><span class="token punctuation">,</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">raiseSalary</span><span class="token punctuation">(</span><span class="token keyword">double</span> byPercent<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">double</span> raise <span class="token operator">=</span>salary<span class="token operator">*</span>byPercent<span class="token operator">/</span><span class="token number">100</span><span class="token punctuation">;</span>        salary<span class="token operator">+=</span>raise<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">7.</span>Object类是所有类的超类：<span class="token operator">*</span><span class="token operator">*</span><span class="token number">1</span>）只能作为各种值的一个泛型函数；<span class="token number">2</span>）只有基本类型不属于<span class="token class-name">Object</span><span class="token punctuation">;</span><span class="token operator">*</span><span class="token operator">*</span><span class="token number">8.</span>equals方法：<span class="token operator">*</span><span class="token operator">*</span><span class="token number">1</span>）<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token punctuation">)</span>otherObject <span class="token keyword">instanceof</span> <span class="token class-name">Employee</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment">//允许otherObject为它的子类</span><span class="token number">2</span>）equals 方法实现：<span class="token keyword">instanceof</span>检验，调用getClass，捕获<span class="token class-name">ClassCastException</span>或者什么也不做（这肯定什么都不做啊kora）<span class="token number">3</span>）较为完美的方法：显示参数otherObject，强制转换为other的变量；检测<span class="token keyword">this</span>和otherObject是否相等；检验otherObject是否为<span class="token keyword">null</span><span class="token operator">*</span><span class="token operator">*</span>（必要操作）<span class="token operator">*</span><span class="token operator">*</span>比较<span class="token keyword">this</span>和otherObject的类：（<span class="token number">1</span>）equals的 语义在子类中改变：<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span>≠otherObject<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>（<span class="token number">2</span>）所有子类都有相等的句意用<span class="token keyword">instanceof</span>检验；将otherObject强制转换为相应类类型的变量；使用<span class="token operator">==</span>比较基本类型字段，根据相等性概念；<span class="token operator">*</span><span class="token operator">*</span><span class="token number">8.</span>hashCode方法：<span class="token operator">*</span><span class="token operator">*</span><span class="token number">1</span>）由对象导出的一个整型值，没有规律<span class="token number">2</span>）equals的定义与hashCode的定义必须相容，即x<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span>返回<span class="token boolean">true</span>，那么x<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>和y<span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回<span class="token boolean">true</span>；```java<span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">7</span><span class="token operator">*</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">11</span><span class="token operator">*</span><span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>salary<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">13</span><span class="token operator">*</span><span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hashCode</span><span class="token punctuation">(</span>hireDay<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//return Objects.hash(name,salary,hireDay);//简洁写法</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre><p><strong>9.toString方法：</strong></p><pre><code>//普通类public boolean equals(Object otherObject){        if(this == otherObject)            return true;        if(otherObject == null)            return false;        if(getClass()!=otherObject.getClass())            return false;        var other = (Employee)otherObject;        return Objects.equals(name,other.name)&amp;&amp;Objects.equals(hireDay,other.hireDay);    }public String toString(){        return getClass().getName()+"[name="+name+",salary="+salary+",hireDay="+hireDay+"]";    }public int hashCode(){        return Objects.hash(name,salary,hireDay);    }//派生类public boolean equals(Object otherObject){        if(!super.equals(otherObject))            return false;        var other = (Manager)otherObject;        return bonus == other.bonus;    }public int hashCode(){        return java.util.Objects.hash(super.hashCode(),bonus);    }public String toString(){        return super.toString()+"[bonus="+bonus+"]";    }</code></pre><p><strong>9.泛型数组列表（类似于c++中的vector来自于java的ArrayList类）</strong></p><p>1）菱形语法：<br>var staff = new ArrayList<employee>();</employee></p><p>staff.add(new Employee(…..));</p><p>2）部分语法实现：</p><p>staff.size()；//返回数组大小</p><p>staff.trimToSize()//清除数组中的多余空间</p><p>boolean add(E obj);//在数组末尾添加一个元素，永远返回true；</p><p>staff.set(i,harry);//更改</p><p>staff.get(i);//返回对应对象</p><p>staff.add(n,e);//数组中间插入数据</p><p>Employee e = staff.remove(n);//移除某一位置的元素</p><pre><code>package inherience;import java.util.ArrayList;public class ArrayListTest {    public static void main(String[] args) {        var staff = new ArrayList&lt;Employee&gt;();        staff.add(new Employee("xhsioi",150000,1989,4,8));        staff.add(new Employee("jjj",15456,4,8,9));        staff.add(new Employee("ison",200000,2014,7,8));        for (Employee e:             staff) {            e.raiseSalary(500);        }        for (Employee e:             staff) {            System.out.println("name:" + e.getName() + ",Salary:" + e.getSalary() + ",hireDay:" + e.getHireDay());        }    }}</code></pre><h1 id="对象包装器与自动封装"><a href="#对象包装器与自动封装" class="headerlink" title="对象包装器与自动封装"></a><strong>对象包装器与自动封装</strong></h1><p>1.自动封箱：//效率低于int[ ]类型<br>int→Integer,Float,Double,Short,Character,Boolean,Byte,Long;</p><p>2.同一个条件表达式注意优先级，低优先级的类型会发生转换；</p><p>3.类型转化函数parse：<br>int x = Integer.parseInt(s);//字符串→整型</p><h2 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Size</span><span class="token punctuation">{</span><span class="token function">SMALL</span><span class="token punctuation">(</span><span class="token string">"S"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">MEDIUM</span><span class="token punctuation">(</span><span class="token string">"M"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">LARGE</span><span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">EXTRA_LARGE</span><span class="token punctuation">(</span><span class="token string">"XL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//首先声明静态变量</span><span class="token keyword">private</span> <span class="token class-name">Size</span><span class="token punctuation">(</span><span class="token class-name">String</span> abbreviation<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>abbreviation<span class="token operator">=</span>abbreviation<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token class-name">String</span> abbreviation<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h1><p>1.getClass 实现不同对象的多态；</p><p>2.异常类型分析：<br>1）类型：编译器能解决和你本来应该解决的；</p><p>2）throws语句的使用（同c++中的异常处理）；</p><p>3.资源加载：将同一文件中的资源进行读取</p><p>1）实现前提：构搭一个jar架子；</p><p>2）资源代码实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Resourcetest</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>args<span class="token punctuation">)</span><span class="token keyword">throws</span> <span class="token class-name">IOXception</span><span class="token punctuation">{</span><span class="token class-name">Class</span> cl<span class="token operator">=</span><span class="token class-name">ResourceTest</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">;</span><span class="token class-name">URL</span> aboutURL <span class="token operator">=</span> c1<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token string">"1.gif"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//读取所要资源的URL值</span><span class="token keyword">var</span> icon <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ImageIcon</span><span class="token punctuation">(</span>aboutURL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构建图片信息类</span><span class="token class-name">InputStresm</span> <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"data/about.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> about <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Stream<span class="token punctuation">.</span>ReadAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正文内容</span><span class="token class-name">InputStream2</span> <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"tittle.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> title <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">Stream2</span><span class="token punctuation">.</span><span class="token function">readAllBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">StandardCharsets</span><span class="token punctuation">.</span>UTF_8<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//标题</span><span class="token class-name">JoptionPane</span><span class="token punctuation">.</span><span class="token function">showmessageDialog</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span>about<span class="token punctuation">,</span><span class="token class-name">JOptionPane</span><span class="token punctuation">.</span>INFORMATION_MESSAGE<span class="token punctuation">,</span>icon<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token number">4.</span>分析类的能力：<span class="token class-name">Field</span>、<span class="token class-name">Method</span>、<span class="token class-name">Constructor</span> 分别描述类的字段、方法和构造器； <span class="token class-name">Field</span>：getName<span class="token punctuation">,</span>getType<span class="token punctuation">;</span>共有：getModifiers（返回整数，判断动态静态储存）；<span class="token number">5.</span>使用反射在运行时分析对象<span class="token keyword">package</span> <span class="token namespace">inherience</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">AccessibleObject</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Array</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Modifier</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ObjectAnalyzer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">&gt;</span></span> visited <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ReflectiveOperationException</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>obj <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token string">"null"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>visited<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//判断obj是否在visited</span>            <span class="token keyword">return</span> <span class="token string">"..."</span><span class="token punctuation">;</span>        visited<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> cl <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cl <span class="token operator">==</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//判断是否为数</span>            <span class="token class-name">String</span> r <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"[]{"</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">getLength</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span>                    r <span class="token operator">+=</span> <span class="token string">","</span><span class="token punctuation">;</span>                <span class="token class-name">Object</span> val <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getComponentType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">isMemberClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//判断指定的class成员是否为基本类</span>                    r <span class="token operator">+=</span> val<span class="token punctuation">;</span>                <span class="token keyword">else</span>                    r <span class="token operator">+=</span> <span class="token function">toString</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">return</span> r <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token class-name">StringBuilder</span> r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span>cl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//构建字符串类</span>        <span class="token keyword">do</span> <span class="token punctuation">{</span>            r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Field</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getDeclaredFields</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">AccessibleObject</span><span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span>fields<span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//取出的key和value</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Field</span> f <span class="token operator">:</span>                    fields<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token class-name">Modifier</span><span class="token punctuation">.</span><span class="token function">isStatic</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getModifiers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>r<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"["</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Class</span> t <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">Object</span> val <span class="token operator">=</span> f<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>t<span class="token punctuation">.</span><span class="token function">isPrimitive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                        r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">else</span>                        r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token function">toString</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            r<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"]"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            cl <span class="token operator">=</span> cl<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>cl <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>package inherience;import java.util.ArrayList;public class Test {    public static void main(String[] args) throws ReflectiveOperationException {        var square = new ArrayList&lt;Integer&gt;();        for (int i = 1; i &lt;= 5; i++)            square.add(i * i);        System.out.println(new ObjectAnalyzer().toString(square));    }}</code></pre><p>6.使用反射编写泛型数组代码</p><p>1）获得新数组的元素类型：</p><p>首先获得数组的类对象；</p><p>确认他为一个数组；</p><p>使用Class类的getComponentType方法，确定数组的正确类型；</p><p>2）整型数组类型int[]可以转换成Object，但不能转换成对象数组；</p><p>7.调用任一方法和构造器</p><p>1）利用lambda表达式和接口代替c++中的指针</p><h1 id="继承的设计技巧"><a href="#继承的设计技巧" class="headerlink" title="继承的设计技巧"></a>继承的设计技巧</h1><p>1.将公共字段放在基类（超类）中；</p><p>2.尽量不要使用protected来限制变量；</p><p>3.继承并非万能，如果超类封闭且对现有类有继承的必要；</p><p>4.在覆盖一个方法的时候，不应当毫无理由的地改变它的行为；</p><p>5.增加多态的使用：x.action();</p><p>6.反射机制不需要滥用：<br>1）优点：在运行时可以查看字段和方法</p><p>2）缺点：无法查找编写的错误，只有在运行的时候才会发现错误并导致异常</p><h1 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h1><p>1.int-&gt;boolean<br>利用三元运算符&lt;布尔值&gt;?1:0<br>eg.以比较字符串的方式重写compareTo</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Student</span> other<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>other<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token number">1</span> <span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> 日常学习 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
